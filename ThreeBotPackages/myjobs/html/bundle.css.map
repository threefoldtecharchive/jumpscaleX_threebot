{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Navigation.svelte",
    "../src/routes/Workers.svelte",
    "../src/routes/TasksRendering.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport active from 'svelte-spa-router/active'\nimport {\n\t\tlink,\n\t\tpush,\n\t\tpop,\n\t\treplace,\n\t\tlocation,\n\t\tquerystring,\n\t} from 'svelte-spa-router';\n</script>\n<div>\n\t<nav class=\"navbar navbar-inverse test\">\n\t\t<div class=\"container-fluid\">\n\t\t\t<div class=\"navbar-header\">\n\t\t\t\t<span class=\"navbar-brand\" href=\"#\">Jobs visualization</span>\n\t\t\t</div>\n\t\t\t<ul class=\"nav navbar-nav\">\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"/workers\"  use:link >Workers</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"/tasks\" use:link use:active={'/tasks/*', 'my-active'}>Tasks</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n</div>\n\n<style>\n/* Style for \"active\" links; need to mark this :global because the router adds the class directly */\n:global(a.my-active) {\n    color: #9d9d9d !important;\n}\n</style>\n",
    "<script>\n  import { getWorkers } from \"../data\";\n  import { onMount } from \"svelte\";\n  import {\n    link,\n    push,\n    pop,\n    replace,\n    location,\n    querystring\n  } from \"svelte-spa-router\";\n\n  const state = {\n    RESULT: \"OK\",\n    ERROR: \"ERROR\",\n    NEW: \"NEW\"\n  };\n  var successCount = 0;\n  var failureCount = 0;\n  var newCount = 0;\n  const status = { ONLINE: \"online\", OFFLINE: \"offline\" };\n  let workers = [];\n\n  onMount(async () => {\n    getWorkers().then(function(data) {\n      if (!data) {\n        return;\n      }\n      console.log(`DATA : ${data}`);\n      //Todo:The data will need to be parsed to json\n      workers = JSON.parse(data).workers;\n\n      workers.forEach(worker => {\n        worker.state = worker.state.toUpperCase();\n      });\n      //Calculating the statstics relatedt to the workers\n      statsticsCalculation();\n      function statsticsCalculation() {\n        workers.forEach(worker => {\n          if (worker.state == state.RESULT) successCount++;\n          else if (worker.state == state.ERROR) failureCount++;\n          else if (worker.state == state.NEW) newCount++;\n          else {\n          }\n        });\n      }\n    });\n  });\n</script>\n\n<style>\n  .mt-3 {\n    margin-top: 20px;\n  }\n</style>\n\n<!--[Header]-->\n<h1>Workers</h1>\n<!--[Statstics-Data]-->\n<div class=\"row mt-3\">\n  <!--[Tasks-Data]-->\n  <div class=\"col-xs-12\">\n    <!-- content here -->\n    <table class=\"table table-striped\">\n      <!--[Tasks-Data-Headers]-->\n      <thead>\n        <tr>\n          <th class=\"text-center\" scope=\"col\">Total Workers</th>\n          <th class=\"text-center\" scope=\"col\">New Workers</th>\n          <th class=\"text-center\" scope=\"col\">Success Workers</th>\n          <th class=\"text-center\" scope=\"col\">Failure Workers</th>\n        </tr>\n      </thead>\n      <tbody class=\"text-center\">\n        <td>{workers.length}</td>\n        <td>{newCount}</td>\n        <td>{successCount}</td>\n        <td>{failureCount}</td>\n      </tbody>\n    </table>\n  </div>\n</div>\n{#if workers && workers.length > 0}\n  <!--[Containder]-->\n  <div>\n    <div class=\"row\">\n      <!--[Workers-Data]-->\n      <div class=\"col-xs-12\">\n        <table class=\"table table-striped\">\n          <!--[Workers-Data-Headers]-->\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Id</th>\n              <th scope=\"col\">Halt</th>\n              <th scope=\"col\">Pid</th>\n              <th scope=\"col\">State</th>\n              <th scope=\"col\">Error</th>\n              <th scope=\"col\">Current Job</th>\n              <th scope=\"col\">Last Update</th>\n              <th scope=\"col\">Time Start</th>\n              <th scope=\"col\">Timeout</th>\n            </tr>\n          </thead>\n          <!--[Workers-Data-Body]-->\n          <tbody>\n            {#each workers as worker, i}\n              <tr>\n                <th scope=\"row\">{i + 1}</th>\n                <td>\n                  <a href=\"/single-worker-tasks/{worker.id}\" use:link>\n                    {worker.id}\n                  </a>\n                </td>\n                <td>{worker.halt}</td>\n                <td>{worker.pid}</td>\n                {#if worker.state == state.RESULT}\n                  <td>\n                    <span class=\"label label-pill label-success\">\n                      {worker.state}\n                    </span>\n                  </td>\n                {:else if worker.state == state.ERROR}\n                  <td>\n                    <span class=\"label label-pill label-danger\">\n                      {worker.state}\n                    </span>\n                  </td>\n                {:else if worker.state == state.NEW}\n                  <td>\n                    <span class=\"label label-pill label-primary\">\n                      {worker.state}\n                    </span>\n                  </td>\n                {/if}\n                <td>{worker.error}</td>\n                <td>{worker.current_job}</td>\n                <td>{worker.last_update}</td>\n                <td>{worker.time_start}</td>\n                <td>{worker.timeout}</td>\n              </tr>\n            {/each}\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n  </div>\n{:else}\n  <!-- this block renders when photos.length === 0 -->\n  <!-- <p>loading...</p> -->\n  <div class=\"text-center\">\n    <img src={'/img/loader.gif'} class=\"img-fluid\" alt=\"Responsive image\" />\n  </div>\n{/if}\n",
    "<script>\n  export let allTasks = [];\n  export let isError = false;\n  const state = {\n    RESULT: \"OK\",\n    ERROR: \"ERROR\",\n    NEW: \"NEW\",\n    RUNNING: \"RUNNING\",\n    HALTED: \"HALTED\",\n    ALL: \"all\"\n  };\n\n  let counters = { success: 0, error: 0, new: 0, running: 0, halted: 0 };\n  let currentFilter = state.ALL;\n  $: filteredTasks = () => {\n    //Re-intialize the counters and re-calculate the statstics\n    counters = { success: 0, error: 0, new: 0, running: 0, halted: 0 };\n    statsticsCalculation();\n    if (currentFilter == state.ALL) return allTasks;\n    else if (currentFilter == state.RESULT) return tasksFiltering(state.RESULT);\n    else if (currentFilter == state.ERROR) return tasksFiltering(state.ERROR);\n    else if (currentFilter == state.NEW) return tasksFiltering(state.NEW);\n    else if (currentFilter == state.RUNNING)\n      return tasksFiltering(state.RUNNING);\n    else if (currentFilter == state.HALTED) return tasksFiltering(state.HALTED);\n  };\n\n  function tasksFiltering(state) {\n    let filteredTasks = [];\n    allTasks.forEach(task => {\n      if (task.state == state) filteredTasks.push(task);\n    });\n    return filteredTasks;\n  }\n\n  //Calculating the stastics related to the tasks\n  function statsticsCalculation() {\n    allTasks.forEach(task => {\n      console.log(`task.state: ${task.state}`);\n\n      if (task.state === state.RESULT) counters[\"success\"]++;\n      else if (task.state === state.ERROR) counters[\"error\"]++;\n      else if (task.state === state.NEW) counters[\"new\"]++;\n      else if (task.state === state.RUNNING) counters[\"running\"]++;\n      else if (task.state === state.HALTED) counters[\"halted\"]++;\n      else {\n        console.log(`task.state: ${task.state}`);\n      }\n    });\n  }\n\n  function updateFilter(filter) {\n    currentFilter = filter;\n  }\n</script>\n\n<style>\n  .mt-3 {\n    margin-top: 20px;\n  }\n</style>\n\n<!--[Filter]-->\n<div>\n  <button\n    on:click={() => updateFilter(state.ALL)}\n    class:active={currentFilter === state.ALL}>\n    All\n  </button>\n  <button\n    on:click={() => updateFilter(state.RESULT)}\n    class:active={currentFilter === state.RESULT}>\n    Succes\n  </button>\n  <button\n    on:click={() => updateFilter(state.ERROR)}\n    class:active={currentFilter === state.ERROR}>\n    Failure\n  </button>\n  <button\n    on:click={() => updateFilter(state.NEW)}\n    class:active={currentFilter === state.NEW}>\n    New\n  </button>\n  <button\n    on:click={() => updateFilter(state.RUNNING)}\n    class:active={currentFilter === state.RUNNING}>\n    Running\n  </button>\n  <button\n    on:click={() => updateFilter(state.HALTED)}\n    class:active={currentFilter === state.HALTED}>\n    Halted\n  </button>\n\n</div>\n<!--[Statstics]-->\n{#if isError != true}\n  <!--[Containder]-->\n  <div class=\"row mt-3\">\n    <!--[Tasks-Data]-->\n    <div class=\"col-xs-12\">\n      <!-- content here -->\n      <table class=\"table table-striped\">\n        <!--[Tasks-Data-Headers]-->\n        <thead>\n          <tr>\n            <th class=\"text-center\" scope=\"col\">Total Tasks</th>\n            <th class=\"text-center\" scope=\"col\">Success Tasks</th>\n            <th class=\"text-center\" scope=\"col\">Failure Tasks</th>\n            <th class=\"text-center\" scope=\"col\">New Tasks</th>\n            <th class=\"text-center\" scope=\"col\">Running Tasks</th>\n            <th class=\"text-center\" scope=\"col\">Halted Tasks</th>\n          </tr>\n        </thead>\n        <tbody class=\"text-center\">\n          <td>{allTasks.length}</td>\n          <td>{counters['success']}</td>\n          <td>{counters['error']}</td>\n          <td>{counters['new']}</td>\n          <td>{counters['running']}</td>\n          <td>{counters['halted']}</td>\n        </tbody>\n      </table>\n    </div>\n  </div>\n{/if}\n<!--[Containder]-->\n{#if filteredTasks() && filteredTasks().length > 0}\n  <div>\n    <div class=\"row\">\n      <!--[Tasks-Data]-->\n      <div class=\"col-xs-12\">\n        {#if isError != true}\n          <!-- content here -->\n          <table class=\"table table-striped\">\n            <!--[Tasks-Data-Headers]-->\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Id</th>\n                <!-- <th scope=\"col\">Category</th> -->\n                <th scope=\"col\">Time Start</th>\n                <th scope=\"col\">Time Stop</th>\n                <th scope=\"col\">State</th>\n                <th scope=\"col\">Timeout</th>\n                <th scope=\"col\">Action</th>\n                <th scope=\"col\">args</th>\n                <th scope=\"col\">kwargs</th>\n                <th scope=\"col\">Result</th>\n                <th scope=\"col\">Error</th>\n                <!-- <th scope=\"col\">Return Queues</th> -->\n              </tr>\n            </thead>\n            <!--[Tasks-Data-Body]-->\n            <tbody>\n              {#each filteredTasks() as task, i}\n                <tr>\n                  <th scope=\"row\">{i + 1}</th>\n                  <td>{task.id}</td>\n                  <!-- <td>{task.category}</td> -->\n                  <td>{task.time_start}</td>\n                  <td>{task.time_stop}</td>\n                  {#if task.state == state.RESULT}\n                    <td>\n                      <span class=\"label label-pill label-success\">\n                        {task.state}\n                      </span>\n                    </td>\n                  {:else if task.state == state.ERROR}\n                    <td>\n                      <span class=\"label label-pill label-danger\">\n                        {task.state}\n                      </span>\n                    </td>\n                  {:else if task.state == state.NEW}\n                    <td>\n                      <span class=\"label label-pill label-primary\">\n                        {task.state}\n                      </span>\n                    </td>\n                  {:else if task.state == state.RUNNING}\n                    <td>\n                      <span class=\"label label-pill label-warning\">\n                        {task.state}\n                      </span>\n                    </td>\n                  {:else if task.state == state.HALTED}\n                    <td>\n                      <span class=\"label label-pill label-info\">\n                        {task.state}\n                      </span>\n                    </td>\n                  {/if}\n\n                  <td>{task.timeout}</td>\n                  <td>{task.action_id}</td>\n                  <td>{task.args}</td>\n                  <td>{task.kwargs}</td>\n                  <td>{task.result}</td>\n                  <td>{task.error}</td>\n                  <!-- <td>{task.return_queues}</td> -->\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        {:else}\n          <!-- else content here -->\n          <h3>There is no worker with this ID</h3>\n        {/if}\n\n      </div>\n    </div>\n\n  </div>\n{:else}\n  <!-- this block renders when photos.length === 0 -->\n  <!-- <p>loading...</p> -->\n  <div class=\"text-center\">\n    <img src={'/img/loader.gif'} class=\"img-fluid\" alt=\"Responsive image\" />\n  </div>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AA+BQ,WAAW,AAAE,CAAC,AAClB,KAAK,CAAE,OAAO,CAAC,UAAU,AAC7B,CAAC;ACkBC,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,AAClB,CAAC;ACID,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,IAAI,AAClB,CAAC"
}