{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Navigation.svelte",
    "../src/routes/Workers.svelte",
    "../src/routes/TasksRendering.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport active from 'svelte-spa-router/active'\nimport {\n\t\tlink,\n\t\tpush,\n\t\tpop,\n\t\treplace,\n\t\tlocation,\n\t\tquerystring,\n\t} from 'svelte-spa-router';\n</script>\n<div>\n\t<nav class=\"navbar navbar-inverse test\">\n\t\t<div class=\"container-fluid\">\n\t\t\t<div class=\"navbar-header\">\n\t\t\t\t<span class=\"navbar-brand\" href=\"#\">Jobs visualization</span>\n\t\t\t</div>\n\t\t\t<ul class=\"nav navbar-nav\">\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"/workers\"  use:link >Workers</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"/tasks\" use:link use:active={'/tasks/*', 'my-active'}>Tasks</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n</div>\n\n<style>\n/* Style for \"active\" links; need to mark this :global because the router adds the class directly */\n:global(a.my-active) {\n    color: #9d9d9d !important;\n}\n</style>\n",
    "<script>\n\timport { getWorkers } from '../data';\n\timport { onMount } from 'svelte';\n\timport {\n\t\tlink,\n\t\tpush,\n\t\tpop,\n\t\treplace,\n\t\tlocation,\n\t\tquerystring,\n\t} from 'svelte-spa-router';\n\n\tconst state = {\n\t\tRESULT: 'OK',\n\t\tERROR: 'ERROR',\n\t\tNEW: 'NEW',\n\t};\n\tvar successCount = 0;\n\tvar failureCount = 0;\n\tvar newCount = 0;\n\tconst status = { ONLINE: 'online', OFFLINE: 'offline' };\n\tlet workers = [];\n\n\tonMount(async () => {\n\t\tgetWorkers().then(function(data) {\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Todo:The data will need to be parsed to json\n\t\t\tworkers = data;\n\t\t\tworkers.forEach(worker => {\n\t\t\t\tworker.state = worker.state.toUpperCase();\n\t\t\t});\n\t\t\t//Calculating the statstics relatedt to the workers\n\t\t\tstatsticsCalculation();\n\t\t\tfunction statsticsCalculation() {\n\t\t\t\tworkers.forEach(worker => {\n\t\t\t\t\tif (worker.state == state.RESULT) successCount++;\n\t\t\t\t\telse if (worker.state == state.ERROR) failureCount++;\n\t\t\t\t\telse if (worker.state == state.NEW) newCount++;\n\t\t\t\t\telse {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n</script>\n\n<style>\n\t.mt-3 {\n\t\tmargin-top: 20px;\n\t}\n</style>\n\n<!--[Header]-->\n<h1>Workers</h1>\n{#if workers && workers.length > 0}\n\t<!--[Containder]-->\n\t<div>\n\t\t<div class=\"row\">\n\t\t\t<!--[Workers-Data]-->\n\t\t\t<div class=\"col-xs-12\">\n\t\t\t\t<table class=\"table table-striped\">\n\t\t\t\t\t<!--[Workers-Data-Headers]-->\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th scope=\"col\">#</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Id</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Halt</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Pid</th>\n\t\t\t\t\t\t\t<th scope=\"col\">State</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Error</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Current Job</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Last Update</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Time Start</th>\n\t\t\t\t\t\t\t<th scope=\"col\">Timeout</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<!--[Workers-Data-Body]-->\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{#each workers as worker, i}\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope=\"row\">{i + 1}</th>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<a href=\"/single-worker-tasks/{worker.id}\" use:link>\n\t\t\t\t\t\t\t\t\t\t{worker.id}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td>{worker.halt}</td>\n\t\t\t\t\t\t\t\t<td>{worker.pid}</td>\n\t\t\t\t\t\t\t\t{#if worker.state == state.RESULT}\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-success\">\n\t\t\t\t\t\t\t\t\t\t\t{worker.state}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t{:else if worker.state == state.ERROR}\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-danger\">\n\t\t\t\t\t\t\t\t\t\t\t{worker.state}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t{:else if worker.state == state.NEW}\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-primary\">\n\t\t\t\t\t\t\t\t\t\t\t{worker.state}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t<td>{worker.error}</td>\n\t\t\t\t\t\t\t\t<td>{worker.current_job}</td>\n\t\t\t\t\t\t\t\t<td>{worker.last_update}</td>\n\t\t\t\t\t\t\t\t<td>{worker.time_start}</td>\n\t\t\t\t\t\t\t\t<td>{worker.timeout}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t\t<!--[Statstics-Data]-->\n\t\t<div class=\"row mt-3\">\n\t\t\t<!--[Tasks-Data]-->\n\t\t\t<div class=\"col-xs-12\">\n\t\t\t\t<!-- content here -->\n\t\t\t\t<table class=\"table table-striped\">\n\t\t\t\t\t<!--[Tasks-Data-Headers]-->\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Total Workers</th>\n\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">New Workers</th>\n\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Success Workers</th>\n\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Failure Workers</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody class=\"text-center\">\n\t\t\t\t\t\t<td>{workers.length}</td>\n\t\t\t\t\t\t<td>{newCount}</td>\n\t\t\t\t\t\t<td>{successCount}</td>\n\t\t\t\t\t\t<td>{failureCount}</td>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{:else}\n\t<!-- this block renders when photos.length === 0 -->\n\t<!-- <p>loading...</p> -->\n\t<div class=\"text-center\">\n\t\t<img src={'/img/loader.gif'} class=\"img-fluid\" alt=\"Responsive image\" />\n\t</div>\n{/if}\n",
    "<script>\n\texport let allTasks = [];\n\texport let isError = false;\n\tconst state = {\n\t\tRESULT: 'OK',\n\t\tERROR: 'ERROR',\n\t\tNEW: 'NEW',\n\t\tRUNNING: 'RUNNING',\n\t\tHALTED: 'HALTED',\n\t\tALL: 'all',\n\t};\n\n\tlet counters = { success: 0, error: 0, new: 0, running: 0, halted: 0 };\n\tlet currentFilter = state.ALL;\n\t$: filteredTasks = () => {\n\t\t//Re-intialize the counters and re-calculate the statstics\n\t\tcounters = { success: 0, error: 0, new: 0, running: 0, halted: 0 };\n\t\tstatsticsCalculation();\n\t\tif (currentFilter == state.ALL) return allTasks;\n\t\telse if (currentFilter == state.RESULT) return tasksFiltering(state.RESULT);\n\t\telse if (currentFilter == state.ERROR) return tasksFiltering(state.ERROR);\n\t\telse if (currentFilter == state.NEW) return tasksFiltering(state.NEW);\n\t\telse if (currentFilter == state.RUNNING)\n\t\t\treturn tasksFiltering(state.RUNNING);\n\t\telse if (currentFilter == state.HALTED) return tasksFiltering(state.HALTED);\n\t};\n\n\tfunction tasksFiltering(state) {\n\t\tlet filteredTasks = [];\n\t\tallTasks.forEach(task => {\n\t\t\tif (task.state == state) filteredTasks.push(task);\n\t\t});\n\t\treturn filteredTasks;\n\t}\n\n\t//Calculating the stastics related to the tasks\n\tfunction statsticsCalculation() {\n\t\tallTasks.forEach(task => {\n\t\t\tif (task.state == state.RESULT) counters['success']++;\n\t\t\telse if (task.state == state.ERROR) counters['error']++;\n\t\t\telse if (task.state == state.NEW) counters['new']++;\n\t\t\telse if (task.state == state.RUNNING) counters['running']++;\n\t\t\telse if (task.state == state.HALTED) counters['halted']++;\n\t\t\telse {\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction updateFilter(filter) {\n\t\tcurrentFilter = filter;\n\t}\n</script>\n\n<style>\n\t.mt-3 {\n\t\tmargin-top: 20px;\n\t}\n</style>\n\n<!--[Containder]-->\n{#if filteredTasks() && filteredTasks().length > 0}\n\t<div>\n\t\t<div class=\"row\">\n\t\t\t<!--[Tasks-Data]-->\n\t\t\t<div class=\"col-xs-12\">\n\t\t\t\t{#if isError != true}\n\t\t\t\t\t<!-- content here -->\n\t\t\t\t\t<table class=\"table table-striped\">\n\t\t\t\t\t\t<!--[Tasks-Data-Headers]-->\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope=\"col\">#</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Id</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Category</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Time Start</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Time Stop</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">State</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Timeout</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Action Id</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">args</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">kwargs</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Result</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Error</th>\n\t\t\t\t\t\t\t\t<th scope=\"col\">Return Queues</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<!--[Tasks-Data-Body]-->\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{#each filteredTasks() as task, i}\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope=\"row\">{i + 1}</th>\n\t\t\t\t\t\t\t\t\t<td>{task.id}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.category}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.time_start}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.time_stop}</td>\n\t\t\t\t\t\t\t\t\t{#if task.state == state.RESULT}\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-success\">\n\t\t\t\t\t\t\t\t\t\t\t\t{task.state}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{:else if task.state == state.ERROR}\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-danger\">\n\t\t\t\t\t\t\t\t\t\t\t\t{task.state}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{:else if task.state == state.NEW}\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-primary\">\n\t\t\t\t\t\t\t\t\t\t\t\t{task.state}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{:else if task.state == state.RUNNING}\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-warning\">\n\t\t\t\t\t\t\t\t\t\t\t\t{task.state}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{:else if task.state == state.HALTED}\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"label label-pill label-info\">\n\t\t\t\t\t\t\t\t\t\t\t\t{task.state}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t\t\t\t<td>{task.timeout}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.action_id}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.args}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.kwargs}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.result}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.error}</td>\n\t\t\t\t\t\t\t\t\t<td>{task.return_queues}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t{:else}\n\t\t\t\t\t<!-- else content here -->\n\t\t\t\t\t<h3>There is no worker with this ID</h3>\n\t\t\t\t{/if}\n\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!--[Filter]-->\n\t\t<div>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.ALL)}\n\t\t\t\tclass:active={currentFilter === state.ALL}>\n\t\t\t\tAll\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.RESULT)}\n\t\t\t\tclass:active={currentFilter === state.RESULT}>\n\t\t\t\tSucces\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.ERROR)}\n\t\t\t\tclass:active={currentFilter === state.ERROR}>\n\t\t\t\tFailure\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.NEW)}\n\t\t\t\tclass:active={currentFilter === state.NEW}>\n\t\t\t\tNew\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.RUNNING)}\n\t\t\t\tclass:active={currentFilter === state.RUNNING}>\n\t\t\t\tRunning\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\ton:click={() => updateFilter(state.HALTED)}\n\t\t\t\tclass:active={currentFilter === state.HALTED}>\n\t\t\t\tHalted\n\t\t\t</button>\n\n\t\t</div>\n\t\t<!--[Statstics]-->\n\t\t{#if isError != true}\n\t\t\t<!--[Containder]-->\n\t\t\t<div class=\"row mt-3\">\n\t\t\t\t<!--[Tasks-Data]-->\n\t\t\t\t<div class=\"col-xs-12\">\n\t\t\t\t\t<!-- content here -->\n\t\t\t\t\t<table class=\"table table-striped\">\n\t\t\t\t\t\t<!--[Tasks-Data-Headers]-->\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Total Tasks</th>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Success Tasks</th>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Failure Tasks</th>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">New Tasks</th>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Running Tasks</th>\n\t\t\t\t\t\t\t\t<th class=\"text-center\" scope=\"col\">Halted Tasks</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody class=\"text-center\">\n\t\t\t\t\t\t\t<td>{allTasks.length}</td>\n\t\t\t\t\t\t\t<td>{counters['success']}</td>\n\t\t\t\t\t\t\t<td>{counters['error']}</td>\n\t\t\t\t\t\t\t<td>{counters['new']}</td>\n\t\t\t\t\t\t\t<td>{counters['running']}</td>\n\t\t\t\t\t\t\t<td>{counters['halted']}</td>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n{:else}\n\t<!-- this block renders when photos.length === 0 -->\n\t<!-- <p>loading...</p> -->\n\t<div class=\"text-center\">\n\t\t<img src={'/img/loader.gif'} class=\"img-fluid\" alt=\"Responsive image\" />\n\t</div>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AA+BQ,WAAW,AAAE,CAAC,AAClB,KAAK,CAAE,OAAO,CAAC,UAAU,AAC7B,CAAC;ACgBA,KAAK,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,AACjB,CAAC;ACGD,KAAK,cAAC,CAAC,AACN,UAAU,CAAE,IAAI,AACjB,CAAC"
}