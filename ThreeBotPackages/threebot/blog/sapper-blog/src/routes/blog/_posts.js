let posts;
export default posts = [{"title": "Version 0.8.6 released", "slug": "version-released", "content": "The version jump from 0.8.2 to 0.8.6 acknowledges the fact that all developmentof the compiler is now done in Nimrod.Bugfixes--------- The pragmas ``hint[X]:off`` and ``warning[X]:off`` now work.- Method call syntax for iterators works again (``for x in lines.split()``).- Fixed a typo in ``removeDir`` for POSIX that lead to an infinite recursion.- The compiler now checks that module filenames are valid identifiers.- Empty patterns for the ``dynlib`` pragma are now possible.- ``os.parseCmdLine`` returned wrong results for trailing whitespace.- Inconsequent tuple usage (using the same tuple with and without named fields)  does not crash the code generator anymore.- A better error message is provided when the loading of a proc within a  dynamic lib fails.Additions---------- Added ``system.contains`` for open arrays.- The PEG module now supports the *search loop operator* ``@``.- Grammar/parser: ``SAD|IND`` is allowed before any kind of closing bracket.  This allows for more flexible source code formatting.- The compiler now uses a *bind* table for symbol lookup within a ``bind``  context. (See [manual.html#templates](https://nim-lang.org/docs/manual.html#templates) for details.)- ``discard \"\"\"my long comment\"\"\"`` is now optimized away.- New ``--floatChecks: on|off`` switches and pragmas for better debugging  of floating point operations. (See  [manual.html#types-pre-defined-floating-point-types](https://nim-lang.org/docs/manual.html#types-pre-defined-floating-point-types) for details.)- The manual has been improved. (Many thanks to Philippe Lhoste!)Changes affecting backwards compatibility------------------------------------------ The compiler does not skip the linking step anymore even if no file  has changed.- ``os.splitFile(\".xyz\")`` now returns ``(\"\", \".xyz\", \"\")`` instead of  ``(\"\", \"\", \".xyz\")``. So filenames starting with a dot are handled  differently.- ``strutils.split(s: string, seps: set[char])`` never yields the empty string  anymore. This behaviour is probably more appropriate for whitespace splitting.- The compiler now stops after the ``--version`` command line switch.- Removed support for enum inheritance in the parser; enum inheritance has  never been documented anyway.- The ``msg`` field of ``system.E_base`` has now the type ``string``, instead  of ``cstring``. This improves memory safety.", "content_with_meta": "---\ntitle: \"Version 0.8.6 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nThe version jump from 0.8.2 to 0.8.6 acknowledges the fact that all development\nof the compiler is now done in Nimrod.\n\nBugfixes\n--------\n- The pragmas ``hint[X]:off`` and ``warning[X]:off`` now work.\n- Method call syntax for iterators works again (``for x in lines.split()``).\n- Fixed a typo in ``removeDir`` for POSIX that lead to an infinite recursion.\n- The compiler now checks that module filenames are valid identifiers.\n- Empty patterns for the ``dynlib`` pragma are now possible.\n- ``os.parseCmdLine`` returned wrong results for trailing whitespace.\n- Inconsequent tuple usage (using the same tuple with and without named fields)\n  does not crash the code generator anymore.\n- A better error message is provided when the loading of a proc within a\n  dynamic lib fails.\n\n\nAdditions\n---------\n- Added ``system.contains`` for open arrays.\n- The PEG module now supports the *search loop operator* ``@``.\n- Grammar/parser: ``SAD|IND`` is allowed before any kind of closing bracket.\n  This allows for more flexible source code formatting.\n- The compiler now uses a *bind* table for symbol lookup within a ``bind``\n  context. (See [manual.html#templates](https://nim-lang.org/docs/manual.html#templates) for details.)\n- ``discard \"\"\"my long comment\"\"\"`` is now optimized away.\n- New ``--floatChecks: on|off`` switches and pragmas for better debugging\n  of floating point operations. (See\n  [manual.html#types-pre-defined-floating-point-types](https://nim-lang.org/docs/manual.html#types-pre-defined-floating-point-types) for details.)\n- The manual has been improved. (Many thanks to Philippe Lhoste!)\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n- The compiler does not skip the linking step anymore even if no file\n  has changed.\n- ``os.splitFile(\".xyz\")`` now returns ``(\"\", \".xyz\", \"\")`` instead of\n  ``(\"\", \"\", \".xyz\")``. So filenames starting with a dot are handled\n  differently.\n- ``strutils.split(s: string, seps: set[char])`` never yields the empty string\n  anymore. This behaviour is probably more appropriate for whitespace splitting.\n- The compiler now stops after the ``--version`` command line switch.\n- Removed support for enum inheritance in the parser; enum inheritance has\n  never been documented anyway.\n- The ``msg`` field of ``system.E_base`` has now the type ``string``, instead\n  of ``cstring``. This improves memory safety.\n", "tags": ["nim", "python"], "published_at": "", "id": 6}, {"title": "Version 0.8.8 released", "slug": "version-released", "content": "Bugfixes--------- The Posix version of ``os.copyFile`` has better error handling.- Fixed bug #502670 (underscores in identifiers).- Fixed a bug in the ``parsexml`` module concerning the parsing of  ``<tag attr=\"value\" />``.- Fixed a bug in the ``parsexml`` module concerning the parsing of  enities like ``&ltXX``.- ``system.write(f: TFile, s: string)`` now works even if ``s`` contains binary  zeros.- Fixed a bug in ``os.setFilePermissions`` for Windows.- An overloadable symbol can now have the same name as an imported module.- Fixed a serious bug in ``strutils.cmpIgnoreCase``.- Fixed ``unicode.toUTF8``.- The compiler now rejects ``'\\n'`` (use ``\"\\n\"`` instead).- ``times.getStartMilsecs()`` now works on Mac OS X.- Fixed a bug in ``pegs.match`` concerning start offsets.- Lots of other little bugfixes.Additions---------- Added ``system.cstringArrayToSeq``.- Added ``system.lines(f: TFile)`` iterator.- Added ``system.delete``, ``system.del`` and ``system.insert`` for sequences.- Added ``system./`` for int.- Exported ``system.newException`` template.- Added ``cgi.decodeData(data: string): tuple[key, value: string]``.- Added ``strutils.insertSep``.- Added ``math.trunc``.- Added ``ropes`` module.- Added ``sockets`` module.- Added ``browsers`` module.- Added ``httpserver`` module.- Added ``httpclient`` module.- Added ``parseutils`` module.- Added ``unidecode`` module.- Added ``xmldom`` module.- Added ``xmldomparser`` module.- Added ``xmltree`` module.- Added ``xmlparser`` module.- Added ``htmlparser`` module.- Added ``re`` module.- Added ``graphics`` module.- Added ``colors`` module.- Many wrappers now do not contain redundant name prefixes (like ``GTK_``,  ``lua``). The old wrappers are still available in ``lib/oldwrappers``.  You can change your configuration file to use these.- Triple quoted strings allow for ``\"`` in more contexts.- ``\"\"`` within raw string literals stands for a single quotation mark.- Arguments to ``openArray`` parameters can be left out.- More extensive subscript operator overloading. (To be documented.)- The documentation generator supports the ``.. raw:: html`` directive.- The Pegs module supports back references via the notation ``$capture_index``.Changes affecting backwards compatibility------------------------------------------ Overloading of the subscript operator only works if the type does not provide  a built-in one.- The search order for libraries which is affected by the ``path`` option  has been reversed, so that the project's path is searched before  the standard library's path.- The compiler does not include a Pascal parser for bootstrapping purposes any  more. Instead there is a ``pas2nim`` tool that contains the old functionality.- The procs ``os.copyFile`` and ``os.moveFile`` have been deprecated  temporarily, so that the compiler warns about their usage. Use them with  named arguments only, because the parameter order will change the next  version!- ``atomic`` and ``let`` are now keywords.- The ``\\w`` character class for pegs now includes the digits ``'0'..'9'``.- Many wrappers now do not contain redundant name prefixes (like ``GTK_``,  ``lua``) anymore.- Arguments to ``openArray`` parameters can be left out.", "content_with_meta": "---\ntitle: \"Version 0.8.8 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\nBugfixes\n--------\n- The Posix version of ``os.copyFile`` has better error handling.\n- Fixed bug #502670 (underscores in identifiers).\n- Fixed a bug in the ``parsexml`` module concerning the parsing of\n  ``<tag attr=\"value\" />``.\n- Fixed a bug in the ``parsexml`` module concerning the parsing of\n  enities like ``&ltXX``.\n- ``system.write(f: TFile, s: string)`` now works even if ``s`` contains binary\n  zeros.\n- Fixed a bug in ``os.setFilePermissions`` for Windows.\n- An overloadable symbol can now have the same name as an imported module.\n- Fixed a serious bug in ``strutils.cmpIgnoreCase``.\n- Fixed ``unicode.toUTF8``.\n- The compiler now rejects ``'\\n'`` (use ``\"\\n\"`` instead).\n- ``times.getStartMilsecs()`` now works on Mac OS X.\n- Fixed a bug in ``pegs.match`` concerning start offsets.\n- Lots of other little bugfixes.\n\n\nAdditions\n---------\n- Added ``system.cstringArrayToSeq``.\n- Added ``system.lines(f: TFile)`` iterator.\n- Added ``system.delete``, ``system.del`` and ``system.insert`` for sequences.\n- Added ``system./`` for int.\n- Exported ``system.newException`` template.\n- Added ``cgi.decodeData(data: string): tuple[key, value: string]``.\n- Added ``strutils.insertSep``.\n- Added ``math.trunc``.\n- Added ``ropes`` module.\n- Added ``sockets`` module.\n- Added ``browsers`` module.\n- Added ``httpserver`` module.\n- Added ``httpclient`` module.\n- Added ``parseutils`` module.\n- Added ``unidecode`` module.\n- Added ``xmldom`` module.\n- Added ``xmldomparser`` module.\n- Added ``xmltree`` module.\n- Added ``xmlparser`` module.\n- Added ``htmlparser`` module.\n- Added ``re`` module.\n- Added ``graphics`` module.\n- Added ``colors`` module.\n- Many wrappers now do not contain redundant name prefixes (like ``GTK_``,\n  ``lua``). The old wrappers are still available in ``lib/oldwrappers``.\n  You can change your configuration file to use these.\n- Triple quoted strings allow for ``\"`` in more contexts.\n- ``\"\"`` within raw string literals stands for a single quotation mark.\n- Arguments to ``openArray`` parameters can be left out.\n- More extensive subscript operator overloading. (To be documented.)\n- The documentation generator supports the ``.. raw:: html`` directive.\n- The Pegs module supports back references via the notation ``$capture_index``.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- Overloading of the subscript operator only works if the type does not provide\n  a built-in one.\n- The search order for libraries which is affected by the ``path`` option\n  has been reversed, so that the project's path is searched before\n  the standard library's path.\n- The compiler does not include a Pascal parser for bootstrapping purposes any\n  more. Instead there is a ``pas2nim`` tool that contains the old functionality.\n- The procs ``os.copyFile`` and ``os.moveFile`` have been deprecated\n  temporarily, so that the compiler warns about their usage. Use them with\n  named arguments only, because the parameter order will change the next\n  version!\n- ``atomic`` and ``let`` are now keywords.\n- The ``\\w`` character class for pegs now includes the digits ``'0'..'9'``.\n- Many wrappers now do not contain redundant name prefixes (like ``GTK_``,\n  ``lua``) anymore.\n- Arguments to ``openArray`` parameters can be left out.\n", "tags": ["nim", "python"], "published_at": "", "id": 7}, {"title": "Version 0.8.10 released", "slug": "version-released", "content": "Bugfixes--------- Bugfix: Command line parsing on Windows and ``os.parseCmdLine`` now adheres  to the same parsing rules as Microsoft's C/C++ startup code.- Bugfix: Passing a ``ref`` pointer to the untyped ``pointer`` type is invalid.- Bugfix: Updated ``keyval`` example.- Bugfix: ``system.splitChunk`` still contained code for debug output.- Bugfix: ``dialogs.ChooseFileToSave`` uses ``STOCK_SAVE`` instead of  ``STOCK_OPEN`` for the GTK backend.- Bugfix: Various bugs concerning exception handling fixed.- Bugfix: ``low(somestring)`` crashed the compiler.- Bugfix: ``strutils.endsWith`` lacked range checking.- Bugfix: Better detection for AMD64 on Mac OS X.Changes affecting backwards compatibility------------------------------------------ Reversed parameter order for ``os.copyFile`` and ``os.moveFile``!!!- Procs not marked as ``procvar`` cannot only be passed to a procvar anymore,  unless they are used in the same module.- Deprecated ``times.getStartMilsecs``: Use ``epochTime`` or ``cpuTime``  instead.- Removed ``system.OpenFile``.- Removed ``system.CloseFile``.- Removed ``strutils.replaceStr``.- Removed ``strutils.deleteStr``.- Removed ``strutils.splitLinesSeq``.- Removed ``strutils.splitSeq``.- Removed ``strutils.toString``.- If a DLL cannot be loaded (via the ``dynlib`` pragma) ``EInvalidLibrary``  is not raised anymore. Instead ``system.quit()`` is called. This is because  raising an exception requires heap allocations. However the memory manager  might be contained in the DLL that failed to load.- The ``re`` module (and the ``pcre`` wrapper) now depend on the pcre dll.Additions---------- The ``{.compile: \"file.c\".}`` pragma uses a CRC check to see if the file  needs to be recompiled.- Added ``system.reopen``.- Added ``system.getCurrentException``.- Added ``system.appType``.- Added ``system.compileOption``.- Added ``times.epochTime`` and ``times.cpuTime``.- Implemented explicit type arguments for generics.- Implemented ``{.size: sizeof(cint).}`` pragma for enum types. This is useful  for interfacing with C.- Implemented ``{.pragma.}`` pragma for user defined pragmas.- Implemented ``{.extern.}`` pragma for better control of name mangling.- The ``importc`` and ``exportc`` pragmas support format strings:  ``proc p{.exportc: \"nim_$1\".}`` exports ``p`` as ``nim_p``. This is useful  for user defined pragmas.- The standard library can be built as a DLL. Generating DLLs has been  improved.- Added ``expat`` module.- Added ``json`` module.- Added support for a *Tiny C* backend. Currently this only works on Linux.  You need to bootstrap with ``-d:tinyc`` to enable Tiny C support. Nimrod  can then execute code directly via ``nimrod run myfile``.", "content_with_meta": "---\ntitle: \"Version 0.8.10 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nBugfixes\n--------\n- Bugfix: Command line parsing on Windows and ``os.parseCmdLine`` now adheres\n  to the same parsing rules as Microsoft's C/C++ startup code.\n- Bugfix: Passing a ``ref`` pointer to the untyped ``pointer`` type is invalid.\n- Bugfix: Updated ``keyval`` example.\n- Bugfix: ``system.splitChunk`` still contained code for debug output.\n- Bugfix: ``dialogs.ChooseFileToSave`` uses ``STOCK_SAVE`` instead of\n  ``STOCK_OPEN`` for the GTK backend.\n- Bugfix: Various bugs concerning exception handling fixed.\n- Bugfix: ``low(somestring)`` crashed the compiler.\n- Bugfix: ``strutils.endsWith`` lacked range checking.\n- Bugfix: Better detection for AMD64 on Mac OS X.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- Reversed parameter order for ``os.copyFile`` and ``os.moveFile``!!!\n- Procs not marked as ``procvar`` cannot only be passed to a procvar anymore,\n  unless they are used in the same module.\n- Deprecated ``times.getStartMilsecs``: Use ``epochTime`` or ``cpuTime``\n  instead.\n- Removed ``system.OpenFile``.\n- Removed ``system.CloseFile``.\n- Removed ``strutils.replaceStr``.\n- Removed ``strutils.deleteStr``.\n- Removed ``strutils.splitLinesSeq``.\n- Removed ``strutils.splitSeq``.\n- Removed ``strutils.toString``.\n- If a DLL cannot be loaded (via the ``dynlib`` pragma) ``EInvalidLibrary``\n  is not raised anymore. Instead ``system.quit()`` is called. This is because\n  raising an exception requires heap allocations. However the memory manager\n  might be contained in the DLL that failed to load.\n- The ``re`` module (and the ``pcre`` wrapper) now depend on the pcre dll.\n\n\nAdditions\n---------\n\n- The ``{.compile: \"file.c\".}`` pragma uses a CRC check to see if the file\n  needs to be recompiled.\n- Added ``system.reopen``.\n- Added ``system.getCurrentException``.\n- Added ``system.appType``.\n- Added ``system.compileOption``.\n- Added ``times.epochTime`` and ``times.cpuTime``.\n- Implemented explicit type arguments for generics.\n- Implemented ``{.size: sizeof(cint).}`` pragma for enum types. This is useful\n  for interfacing with C.\n- Implemented ``{.pragma.}`` pragma for user defined pragmas.\n- Implemented ``{.extern.}`` pragma for better control of name mangling.\n- The ``importc`` and ``exportc`` pragmas support format strings:\n  ``proc p{.exportc: \"nim_$1\".}`` exports ``p`` as ``nim_p``. This is useful\n  for user defined pragmas.\n- The standard library can be built as a DLL. Generating DLLs has been\n  improved.\n- Added ``expat`` module.\n- Added ``json`` module.\n- Added support for a *Tiny C* backend. Currently this only works on Linux.\n  You need to bootstrap with ``-d:tinyc`` to enable Tiny C support. Nimrod\n  can then execute code directly via ``nimrod run myfile``.\n", "tags": ["nim", "python"], "published_at": "", "id": 8}, {"title": "Version 0.8.12 released", "slug": "version-released", "content": "Bugfixes--------- Bugfix: ``httpclient`` correct passes the path starting with ``/``.- Bugfixes for the ``htmlparser`` module.- Bugfix: ``pegs.find`` did not respect ``start`` parameter.- Bugfix: ``dialogs.ChooseFilesToOpen`` did not work if only one file is  selected.- Bugfix: niminst: ``nimrod`` is not default dir for *every* project.- Bugfix: Multiple yield statements in iterators did not cause local vars to be  copied.- Bugfix: The compiler does not emit very inaccurate floating point literals  anymore.- Bugfix: Subclasses are taken into account for ``try except`` matching.- Bugfix: Generics and macros are more stable. There are still known bugs left  though.- Bugfix: Generated type information for tuples was sometimes wrong, causing  random crashes.- Lots of other bugfixes: Too many to list them all.Changes affecting backwards compatibility------------------------------------------ Operators starting with ``^`` are now right-associative and have the highest  priority.- Deprecated ``os.getApplicationFilename``: Use ``os.getAppFilename`` instead.- Deprecated ``os.getApplicationDir``: Use ``os.getAppDir`` instead.- Deprecated ``system.copy``: Use ``substr`` or string slicing instead.- Changed and documented how generalized string literals work: The syntax  ``module.re\"abc\"`` is now supported.- Changed the behaviour of ``strutils.%``, ``ropes.%``  if both notations ``$#`` and ``$i`` are involved.- The ``pegs`` and ``re`` modules distinguish between ``replace``  and ``replacef`` operations.- The pointer dereference operation ``p^`` is deprecated and might become  ``^p`` in later versions or be dropped entirely since it is rarely used.  Use the new notation ``p[]`` in the rare cases where you need to  dereference a pointer explicitly.- ``system.readFile`` does not return ``nil`` anymore but raises an ``EIO``  exception instead.- Unsound co-/contravariance for procvars has been removed.Language Additions------------------- Source code filters are now documented.- Added the ``linearScanEnd``, ``unroll``, ``shallow`` pragmas.- Added ``emit`` pragma for direct code generator control.- Case statement branches support constant sets for programming convenience.- Tuple unpacking is not enforced in ``for`` loops anymore.- The compiler now supports array, sequence and string slicing.- A field in an ``enum`` may be given an explicit string representation.  This yields more maintainable code than using a constant  ``array[TMyEnum, string]`` mapping.- Indices in array literals may be explicitly given, enhancing readability:  ``[enumValueA: \"a\", enumValueB: \"b\"]``.- Added thread support via the ``threads`` core module and  the ``--threads:on`` command line switch.- The built-in iterators ``system.fields`` and ``system.fieldPairs`` can be  used to iterate over any field of a tuple. With this mechanism operations  like ``==`` and ``hash`` are lifted to tuples.- The slice ``..`` is now a first-class operator, allowing code like:  ``x in 1000..100_000``.Compiler Additions------------------- The compiler supports IDEs via the new group of ``idetools`` command line  options.- The *interactive mode* (REPL) has been improved and documented for the  first time.- The compiler now might use hashing for string case statements depending  on the number of string literals in the case statement.Library Additions------------------ Added ``lists`` module which contains generic linked lists.- Added ``sets`` module which contains generic hash sets.- Added ``tables`` module which contains generic hash tables.- Added ``queues`` module which contains generic sequence based queues.- Added ``intsets`` module which contains a specialized int set data type.- Added ``scgi`` module.- Added ``smtp`` module.- Added ``encodings`` module.- Added ``re.findAll``, ``pegs.findAll``.- Added ``os.findExe``.- Added ``parseutils.parseUntil`` and ``parseutils.parseWhile``.- Added ``strutils.align``, ``strutils.tokenize``, ``strutils.wordWrap``.- Pegs support a *captured search loop operator* ``{@}``.- Pegs support new built-ins: ``\\letter``, ``\\upper``, ``\\lower``,  ``\\title``, ``\\white``.- Pegs support the new built-in ``\\skip`` operation.- Pegs support the ``$`` and ``^`` anchors.- Additional operations were added to the ``complex`` module.- Added ``strutils.formatFloat``,  ``strutils.formatBiggestFloat``.- Added unary ``<`` for nice looking excluding upper bounds in ranges.- Added ``math.floor``.- Added ``system.reset`` and a version of ``system.open`` that  returns a ``TFile`` and raises an exception in case of an error.- Added a wrapper for ``redis``.- Added a wrapper for ``0mq`` via the ``zmq`` module.- Added a wrapper for ``sphinx``.- Added ``system.newStringOfCap``.- Added ``system.raiseHook`` and ``system.outOfMemHook``.- Added ``system.writeFile``.- Added ``system.shallowCopy``.- ``system.echo`` is guaranteed to be thread-safe.- Added ``prelude`` include file for scripting convenience.- Added ``typeinfo`` core module for access to runtime type information.- Added ``marshal`` module for JSON serialization.", "content_with_meta": "---\ntitle: \"Version 0.8.12 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nBugfixes\n--------\n- Bugfix: ``httpclient`` correct passes the path starting with ``/``.\n- Bugfixes for the ``htmlparser`` module.\n- Bugfix: ``pegs.find`` did not respect ``start`` parameter.\n- Bugfix: ``dialogs.ChooseFilesToOpen`` did not work if only one file is\n  selected.\n- Bugfix: niminst: ``nimrod`` is not default dir for *every* project.\n- Bugfix: Multiple yield statements in iterators did not cause local vars to be\n  copied.\n- Bugfix: The compiler does not emit very inaccurate floating point literals\n  anymore.\n- Bugfix: Subclasses are taken into account for ``try except`` matching.\n- Bugfix: Generics and macros are more stable. There are still known bugs left\n  though.\n- Bugfix: Generated type information for tuples was sometimes wrong, causing\n  random crashes.\n- Lots of other bugfixes: Too many to list them all.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- Operators starting with ``^`` are now right-associative and have the highest\n  priority.\n- Deprecated ``os.getApplicationFilename``: Use ``os.getAppFilename`` instead.\n- Deprecated ``os.getApplicationDir``: Use ``os.getAppDir`` instead.\n- Deprecated ``system.copy``: Use ``substr`` or string slicing instead.\n- Changed and documented how generalized string literals work: The syntax\n  ``module.re\"abc\"`` is now supported.\n- Changed the behaviour of ``strutils.%``, ``ropes.%``\n  if both notations ``$#`` and ``$i`` are involved.\n- The ``pegs`` and ``re`` modules distinguish between ``replace``\n  and ``replacef`` operations.\n- The pointer dereference operation ``p^`` is deprecated and might become\n  ``^p`` in later versions or be dropped entirely since it is rarely used.\n  Use the new notation ``p[]`` in the rare cases where you need to\n  dereference a pointer explicitly.\n- ``system.readFile`` does not return ``nil`` anymore but raises an ``EIO``\n  exception instead.\n- Unsound co-/contravariance for procvars has been removed.\n\n\nLanguage Additions\n------------------\n\n- Source code filters are now documented.\n- Added the ``linearScanEnd``, ``unroll``, ``shallow`` pragmas.\n- Added ``emit`` pragma for direct code generator control.\n- Case statement branches support constant sets for programming convenience.\n- Tuple unpacking is not enforced in ``for`` loops anymore.\n- The compiler now supports array, sequence and string slicing.\n- A field in an ``enum`` may be given an explicit string representation.\n  This yields more maintainable code than using a constant\n  ``array[TMyEnum, string]`` mapping.\n- Indices in array literals may be explicitly given, enhancing readability:\n  ``[enumValueA: \"a\", enumValueB: \"b\"]``.\n- Added thread support via the ``threads`` core module and\n  the ``--threads:on`` command line switch.\n- The built-in iterators ``system.fields`` and ``system.fieldPairs`` can be\n  used to iterate over any field of a tuple. With this mechanism operations\n  like ``==`` and ``hash`` are lifted to tuples.\n- The slice ``..`` is now a first-class operator, allowing code like:\n  ``x in 1000..100_000``.\n\n\nCompiler Additions\n------------------\n\n- The compiler supports IDEs via the new group of ``idetools`` command line\n  options.\n- The *interactive mode* (REPL) has been improved and documented for the\n  first time.\n- The compiler now might use hashing for string case statements depending\n  on the number of string literals in the case statement.\n\n\nLibrary Additions\n-----------------\n\n- Added ``lists`` module which contains generic linked lists.\n- Added ``sets`` module which contains generic hash sets.\n- Added ``tables`` module which contains generic hash tables.\n- Added ``queues`` module which contains generic sequence based queues.\n- Added ``intsets`` module which contains a specialized int set data type.\n- Added ``scgi`` module.\n- Added ``smtp`` module.\n- Added ``encodings`` module.\n- Added ``re.findAll``, ``pegs.findAll``.\n- Added ``os.findExe``.\n- Added ``parseutils.parseUntil`` and ``parseutils.parseWhile``.\n- Added ``strutils.align``, ``strutils.tokenize``, ``strutils.wordWrap``.\n- Pegs support a *captured search loop operator* ``{@}``.\n- Pegs support new built-ins: ``\\letter``, ``\\upper``, ``\\lower``,\n  ``\\title``, ``\\white``.\n- Pegs support the new built-in ``\\skip`` operation.\n- Pegs support the ``$`` and ``^`` anchors.\n- Additional operations were added to the ``complex`` module.\n- Added ``strutils.formatFloat``,  ``strutils.formatBiggestFloat``.\n- Added unary ``<`` for nice looking excluding upper bounds in ranges.\n- Added ``math.floor``.\n- Added ``system.reset`` and a version of ``system.open`` that\n  returns a ``TFile`` and raises an exception in case of an error.\n- Added a wrapper for ``redis``.\n- Added a wrapper for ``0mq`` via the ``zmq`` module.\n- Added a wrapper for ``sphinx``.\n- Added ``system.newStringOfCap``.\n- Added ``system.raiseHook`` and ``system.outOfMemHook``.\n- Added ``system.writeFile``.\n- Added ``system.shallowCopy``.\n- ``system.echo`` is guaranteed to be thread-safe.\n- Added ``prelude`` include file for scripting convenience.\n- Added ``typeinfo`` core module for access to runtime type information.\n- Added ``marshal`` module for JSON serialization.\n", "tags": ["nim", "python"], "published_at": "", "id": 9}, {"title": "Version 0.8.14 released", "slug": "version-released", "content": "Version 0.8.14 has been released!Bugfixes--------- Fixed a serious memory corruption concerning message passing.- Fixed a serious bug concerning different instantiations of a generic proc.- Fixed a newly introduced bug where a wrong ``EIO`` exception was raised for  the end of file for text files that do not end with a newline.- Bugfix c2nim, c2pas: the ``--out`` option has never worked properly.- Bugfix: forwarding of generic procs never worked.- Some more bugfixes for macros and compile-time evaluation.- The GC now takes into account interior pointers on the stack which may be  introduced by aggressive C optimizers.- Nimrod's native allocator/GC now works on PowerPC.- Lots of other bugfixes: Too many to list them all.Changes affecting backwards compatibility------------------------------------------ Removed deprecated ``os.AppendFileExt``, ``os.executeShellCommand``,  ``os.iterOverEnvironment``, ``os.pcDirectory``, ``os.pcLinkToDirectory``,  ``os.SplitPath``, ``os.extractDir``, ``os.SplitFilename``,  ``os.extractFileTrunk``, ``os.extractFileExt``, ``osproc.executeProcess``,  ``osproc.executeCommand``.- Removed deprecated ``parseopt.init``, ``parseopt.getRestOfCommandLine``.- Moved ``strutils.validEmailAddress`` to ``matchers.validEmailAddress``.- The pointer dereference operator ``^`` has been removed, so that ``^``  can now be a user-defined operator.- ``implies`` is no keyword anymore.- The ``is`` operator is now the ``of`` operator.- The ``is`` operator is now used to check type equivalence in generic code.- The ``pure`` pragma for procs has been renamed to ``noStackFrame``.- The threading API has been completely redesigned.- The ``unidecode`` module is now thread-safe and its interface has changed.- The ``bind`` expression is deprecated, use a ``bind`` declaration instead.- ``system.raiseHook`` is now split into ``system.localRaiseHook`` and  ``system.globalRaiseHook`` to distinguish between thread local and global  raise hooks.- Changed exception handling/error reporting for ``os.removeFile`` and  ``os.removeDir``.- The algorithm for searching and loading configuration files has been changed.- Operators now have diffent precedence rules: Assignment-like operators  (like ``*=``) are now special-cased.- The fields in ``TStream`` have been renamed to have an ``Impl`` suffix  because they should not be used directly anymore.  Wrapper procs have been created that should be used instead.- ``export`` is now a keyword.- ``assert`` is now implemented in pure Nimrod as a template; it's easy  to implement your own assertion templates with ``system.astToStr``.Language Additions------------------- Added new ``is`` and ``of`` operators.- The built-in type ``void`` can be used to denote the absence of any type.  This is useful in generic code.- Return types may be of the type ``var T`` to return an l-value.- The error pragma can now be used to mark symbols whose *usage* should trigger  a compile-time error.- There is a new ``discardable`` pragma that can be used to mark a routine  so that its result can be discarded implicitly.- Added a new ``noinit`` pragma to prevent automatic initialization to zero  of variables.- Constants can now have the type ``seq``.- There is a new user-definable syntactic construct ``a{i, ...}``  that has no semantics yet for built-in types and so can be overloaded to your  heart's content.- ``bind`` (used for symbol binding in templates and generics) is now a  declarative statement.- Nimrod now supports single assignment variables via the ``let`` statement.- Iterators named ``items`` and ``pairs`` are implicitly invoked when  an explicit iterator is missing.- The slice assignment ``a[i..j] = b`` where ``a`` is a sequence or string  now supports *splicing*.Compiler Additions------------------- The compiler can generate C++ code for easier interfacing with C++.- The compiler can generate Objective C code for easier interfacing with  Objective C.- The new pragmas ``importcpp`` and ``importobjc`` make interfacing with C++  and Objective C somewhat easier.- Added a new pragma ``incompleteStruct`` to deal with incomplete C struct  definitions.- Added a ``--nimcache:PATH`` configuration option for control over the output  directory for generated code.- The ``--genScript`` option now produces different compilation scripts  which do not contain absolute paths.- Added ``--cincludes:dir``, ``--clibdir:lib`` configuration options for  modifying the C compiler's header/library search path in cross-platform way.- Added ``--clib:lib`` configuration option for specifying additional  C libraries to be linked.- Added ``--mainmodule:file`` configuration options for specifying the main  project file. This is intended to be used in project configuration files to  allow commands like ``nimrod c`` or ``nimrod check`` to be executed anywhere  within the project's directory structure.- Added a ``--app:staticlib`` option for creating static libraries.- Added a ``--tlsEmulation:on|off`` switch for control over thread local  storage emulation.- The compiler and standard library now support a *taint mode*. Input strings  are declared with the ``TaintedString`` string type. If the taint  mode is turned on it is a distinct string type which helps to detect input  validation errors.- The compiler now supports the compilation cache via ``--symbolFiles:on``.  This potentially speeds up compilations by an order of magnitude, but is  still highly experimental!- Added ``--import:file`` and ``--include:file`` configuration options  for specifying modules that will be automatically imported/incluced.- ``nimrod i`` can now optionally be given a module to execute.- The compiler now performs a simple alias analysis to generate better code.- The compiler and ENDB now support *watchpoints*.- The compiler now supports proper compile time expressions of type ``bool``  for ``on|off`` switches in pragmas. In order to not break existing code,  ``on`` and ``off`` are now aliases for ``true`` and ``false`` and declared  in the system module.- The compiler finally supports **closures**. This is a preliminary  implementation, which does not yet support nestings deeper than 1 level  and still has many known bugs.Library Additions------------------ Added ``system.allocShared``, ``system.allocShared0``,  ``system.deallocShared``, ``system.reallocShared``.- Slicing as implemented by the system module now supports *splicing*.- Added explicit channels for thread communication.- Added ``matchers`` module for email address etc. matching.- Added ``strutils.unindent``, ``strutils.countLines``,  ``strutils.replaceWord``.- Added ``system.slurp`` for easy resource embedding.- Added ``system.running`` for threads.- Added ``system.programResult``.- Added ``xmltree.innerText``.- Added ``os.isAbsolute``, ``os.dynLibFormat``, ``os.isRootDir``,  ``os.parentDirs``.- Added ``parseutils.interpolatedFragments``.- Added ``macros.treeRepr``, ``macros.lispRepr``, ``macros.dumpTree``,  ``macros.dumpLisp``, ``macros.parseExpr``, ``macros.parseStmt``,  ``macros.getAst``.- Added ``locks`` core module for more flexible locking support.- Added ``irc`` module.- Added ``ftpclient`` module.- Added ``memfiles`` module.- Added ``subexes`` module.- Added ``critbits`` module.- Added ``asyncio`` module.- Added ``actors`` module.- Added ``algorithm`` module for generic ``sort``, ``reverse`` etc. operations.- Added ``osproc.startCmd``, ``osproc.execCmdEx``.- The ``osproc`` module now uses ``posix_spawn`` instead of ``fork``  and ``exec`` on Posix systems. Define the symbol ``useFork`` to revert to  the old implementation.- Added ``intsets.assign``.- Added ``system.astToStr`` and ``system.rand``, ``system.doAssert``.- Added ``system.pairs`` for built-in types like arrays and strings.", "content_with_meta": "---\ntitle: \"Version 0.8.14 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\nVersion 0.8.14 has been released!\n\nBugfixes\n--------\n\n- Fixed a serious memory corruption concerning message passing.\n- Fixed a serious bug concerning different instantiations of a generic proc.\n- Fixed a newly introduced bug where a wrong ``EIO`` exception was raised for\n  the end of file for text files that do not end with a newline.\n- Bugfix c2nim, c2pas: the ``--out`` option has never worked properly.\n- Bugfix: forwarding of generic procs never worked.\n- Some more bugfixes for macros and compile-time evaluation.\n- The GC now takes into account interior pointers on the stack which may be\n  introduced by aggressive C optimizers.\n- Nimrod's native allocator/GC now works on PowerPC.\n- Lots of other bugfixes: Too many to list them all.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- Removed deprecated ``os.AppendFileExt``, ``os.executeShellCommand``,\n  ``os.iterOverEnvironment``, ``os.pcDirectory``, ``os.pcLinkToDirectory``,\n  ``os.SplitPath``, ``os.extractDir``, ``os.SplitFilename``,\n  ``os.extractFileTrunk``, ``os.extractFileExt``, ``osproc.executeProcess``,\n  ``osproc.executeCommand``.\n- Removed deprecated ``parseopt.init``, ``parseopt.getRestOfCommandLine``.\n- Moved ``strutils.validEmailAddress`` to ``matchers.validEmailAddress``.\n- The pointer dereference operator ``^`` has been removed, so that ``^``\n  can now be a user-defined operator.\n- ``implies`` is no keyword anymore.\n- The ``is`` operator is now the ``of`` operator.\n- The ``is`` operator is now used to check type equivalence in generic code.\n- The ``pure`` pragma for procs has been renamed to ``noStackFrame``.\n- The threading API has been completely redesigned.\n- The ``unidecode`` module is now thread-safe and its interface has changed.\n- The ``bind`` expression is deprecated, use a ``bind`` declaration instead.\n- ``system.raiseHook`` is now split into ``system.localRaiseHook`` and\n  ``system.globalRaiseHook`` to distinguish between thread local and global\n  raise hooks.\n- Changed exception handling/error reporting for ``os.removeFile`` and\n  ``os.removeDir``.\n- The algorithm for searching and loading configuration files has been changed.\n- Operators now have diffent precedence rules: Assignment-like operators\n  (like ``*=``) are now special-cased.\n- The fields in ``TStream`` have been renamed to have an ``Impl`` suffix\n  because they should not be used directly anymore.\n  Wrapper procs have been created that should be used instead.\n- ``export`` is now a keyword.\n- ``assert`` is now implemented in pure Nimrod as a template; it's easy\n  to implement your own assertion templates with ``system.astToStr``.\n\n\nLanguage Additions\n------------------\n\n- Added new ``is`` and ``of`` operators.\n- The built-in type ``void`` can be used to denote the absence of any type.\n  This is useful in generic code.\n- Return types may be of the type ``var T`` to return an l-value.\n- The error pragma can now be used to mark symbols whose *usage* should trigger\n  a compile-time error.\n- There is a new ``discardable`` pragma that can be used to mark a routine\n  so that its result can be discarded implicitly.\n- Added a new ``noinit`` pragma to prevent automatic initialization to zero\n  of variables.\n- Constants can now have the type ``seq``.\n- There is a new user-definable syntactic construct ``a{i, ...}``\n  that has no semantics yet for built-in types and so can be overloaded to your\n  heart's content.\n- ``bind`` (used for symbol binding in templates and generics) is now a\n  declarative statement.\n- Nimrod now supports single assignment variables via the ``let`` statement.\n- Iterators named ``items`` and ``pairs`` are implicitly invoked when\n  an explicit iterator is missing.\n- The slice assignment ``a[i..j] = b`` where ``a`` is a sequence or string\n  now supports *splicing*.\n\n\nCompiler Additions\n------------------\n\n- The compiler can generate C++ code for easier interfacing with C++.\n- The compiler can generate Objective C code for easier interfacing with\n  Objective C.\n- The new pragmas ``importcpp`` and ``importobjc`` make interfacing with C++\n  and Objective C somewhat easier.\n- Added a new pragma ``incompleteStruct`` to deal with incomplete C struct\n  definitions.\n- Added a ``--nimcache:PATH`` configuration option for control over the output\n  directory for generated code.\n- The ``--genScript`` option now produces different compilation scripts\n  which do not contain absolute paths.\n- Added ``--cincludes:dir``, ``--clibdir:lib`` configuration options for\n  modifying the C compiler's header/library search path in cross-platform way.\n- Added ``--clib:lib`` configuration option for specifying additional\n  C libraries to be linked.\n- Added ``--mainmodule:file`` configuration options for specifying the main\n  project file. This is intended to be used in project configuration files to\n  allow commands like ``nimrod c`` or ``nimrod check`` to be executed anywhere\n  within the project's directory structure.\n- Added a ``--app:staticlib`` option for creating static libraries.\n- Added a ``--tlsEmulation:on|off`` switch for control over thread local\n  storage emulation.\n- The compiler and standard library now support a *taint mode*. Input strings\n  are declared with the ``TaintedString`` string type. If the taint\n  mode is turned on it is a distinct string type which helps to detect input\n  validation errors.\n- The compiler now supports the compilation cache via ``--symbolFiles:on``.\n  This potentially speeds up compilations by an order of magnitude, but is\n  still highly experimental!\n- Added ``--import:file`` and ``--include:file`` configuration options\n  for specifying modules that will be automatically imported/incluced.\n- ``nimrod i`` can now optionally be given a module to execute.\n- The compiler now performs a simple alias analysis to generate better code.\n- The compiler and ENDB now support *watchpoints*.\n- The compiler now supports proper compile time expressions of type ``bool``\n  for ``on|off`` switches in pragmas. In order to not break existing code,\n  ``on`` and ``off`` are now aliases for ``true`` and ``false`` and declared\n  in the system module.\n- The compiler finally supports **closures**. This is a preliminary\n  implementation, which does not yet support nestings deeper than 1 level\n  and still has many known bugs.\n\n\nLibrary Additions\n-----------------\n\n- Added ``system.allocShared``, ``system.allocShared0``,\n  ``system.deallocShared``, ``system.reallocShared``.\n- Slicing as implemented by the system module now supports *splicing*.\n- Added explicit channels for thread communication.\n- Added ``matchers`` module for email address etc. matching.\n- Added ``strutils.unindent``, ``strutils.countLines``,\n  ``strutils.replaceWord``.\n- Added ``system.slurp`` for easy resource embedding.\n- Added ``system.running`` for threads.\n- Added ``system.programResult``.\n- Added ``xmltree.innerText``.\n- Added ``os.isAbsolute``, ``os.dynLibFormat``, ``os.isRootDir``,\n  ``os.parentDirs``.\n- Added ``parseutils.interpolatedFragments``.\n- Added ``macros.treeRepr``, ``macros.lispRepr``, ``macros.dumpTree``,\n  ``macros.dumpLisp``, ``macros.parseExpr``, ``macros.parseStmt``,\n  ``macros.getAst``.\n- Added ``locks`` core module for more flexible locking support.\n- Added ``irc`` module.\n- Added ``ftpclient`` module.\n- Added ``memfiles`` module.\n- Added ``subexes`` module.\n- Added ``critbits`` module.\n- Added ``asyncio`` module.\n- Added ``actors`` module.\n- Added ``algorithm`` module for generic ``sort``, ``reverse`` etc. operations.\n- Added ``osproc.startCmd``, ``osproc.execCmdEx``.\n- The ``osproc`` module now uses ``posix_spawn`` instead of ``fork``\n  and ``exec`` on Posix systems. Define the symbol ``useFork`` to revert to\n  the old implementation.\n- Added ``intsets.assign``.\n- Added ``system.astToStr`` and ``system.rand``, ``system.doAssert``.\n- Added ``system.pairs`` for built-in types like arrays and strings.\n", "tags": ["nim", "python"], "published_at": "", "id": 10}, {"title": "Version 0.9.0 released", "slug": "version-released", "content": "Summary-------* Unsigned integers have been added.* The integer type promotion rules changed.* The template and macro system evolved.* Closures have been implemented.* Term rewriting macros have been implemented.* First steps to unify expressions and statements have been taken.* Symbol lookup rules in generics have become stricter to catch more errors.Bugfixes--------- Fixed a bug where the compiler would \"optimize away\" valid constant parts of  a string concatenation.- Fixed a bug concerning implicit type conversions in ``case`` statements.- Fixed a serious code generation bug that caused ``algorithm.sort`` to  produce segmentation faults.- Fixed ambiguity in recvLine which meant that receiving ``\\r\\L`` was  indistinguishable from disconnections.- Many more bugfixes, too many to list them all.Library Additions------------------ Added the (already existing) module ``htmlgen`` to the documentation.- Added the (already existing) module ``cookies`` to the documentation.- Added ``system.shallow`` that can be used to speed up string and sequence  assignments.- Added ``system.eval`` that can execute an anonymous block of code at  compile time as if was a macro.- Added ``system.staticExec`` and ``system.gorge`` for compile-time execution  of external programs.- Added ``system.staticRead`` as a synonym for ``system.slurp``.- Added ``macros.emit`` that can emit an arbitrary computed string as nimrod  code during compilation.- Added ``strutils.parseEnum``.- Added ``json.%`` constructor operator.- The stdlib can now be avoided to a point where C code generation for 16bit  micro controllers is feasible.- Added module ``oids``.- Added module ``endians``.- Added a new OpenGL wrapper that supports OpenGL up to version 4.2.- Added a wrapper for ``libsvm``.- Added a wrapper for ``mongodb``.- Added ``terminal.isatty``.- Added an overload for ``system.items`` that can be used to iterate over the  values of an enum.- Added ``system.TInteger`` and ``system.TNumber`` type classes matching  any of the corresponding types available in Nimrod.- Added ``system.clamp`` to limit a value within an interval ``[a, b]``.- Added ``strutils.continuesWith``.- Added ``system.getStackTrace``.- Added ``system.||`` for parallel ``for`` loop support.- The GC supports (soft) realtime systems via ``GC_setMaxPause``  and ``GC_step`` procs.- The sockets module now supports ssl through the OpenSSL library, ``recvLine``  is now much more efficient thanks to the newly implemented sockets buffering.- The httpclient module now supports ssl/tls.- Added ``times.format`` as well as many other utility functions  for managing time.- Added ``system.@`` for converting an ``openarray`` to a ``seq`` (it used to  only support fixed length arrays).- Added ``system.compiles`` which can be used to check whether a type supports  some operation.- Added ``strutils.format``, ``subexes.format`` which use the  new ``varargs`` type.- Added module ``fsmonitor``.Changes affecting backwards compatibility------------------------------------------ On Windows filenames and paths are supposed to be in UTF-8.  The ``system``, ``os``, ``osproc`` and ``memfiles`` modules use the wide  string versions of the WinAPI. Use the ``-d:useWinAnsi`` switch to revert  back to the old behaviour which uses the Ansi string versions.- ``static``, ``do``, ``interface`` and ``mixin`` are now keywords.- Templates now participate in overloading resolution which can break code that  uses templates in subtle ways. Use the new ``immediate`` pragma for templates  to get a template of old behaviour.- There is now a proper distinction in the type system between ``expr`` and  ``PNimrodNode`` which unfortunately breaks the old macro system.- ``pegs.@`` has been renamed to ``pegs.!*`` and ``pegs.@@`` has been renamed  to ``pegs.!*\\`` as ``@`` operators now have different precedence.- The type ``proc`` (without any params or return type) is now considered a  type class matching all proc types. Use ``proc ()`` to get the old meaning  denoting a proc expecing no arguments and returning no value.- Deprecated ``system.GC_setStrategy``.- ``re.findAll`` and ``pegs.findAll`` don't return *captures* anymore but  matching *substrings*.- RTTI and thus the ``marshall`` module don't contain the proper field names  of tuples anymore. This had to be changed as the old behaviour never  produced consistent results.- Deprecated the ``ssl`` module.- Deprecated ``nimrod pretty`` as it never worked good enough and has some  inherent problems.- The integer promotion rules changed; the compiler is now less picky in some  situations and more picky in other situations: In particular implicit  conversions from ``int`` to ``int32`` are now forbidden.- ``system.byte`` is now an alias for ``uint8``; it used to be an alias  to ``int8``.- ``bind`` expressions in templates are not properly supported anymore. Use  the declarative ``bind`` statement instead.- The default calling convention for a procedural **type** is now ``closure``,  for procs it remains ``nimcall`` (which is compatible to ``closure``).  Activate the warning ``ImplicitClosure`` to make the compiler list the  occurrences of proc types which are affected.- The Nimrod type system now distinguishes ``openarray`` from ``varargs``.- Templates are now ``hygienic``. Use the ``dirty`` pragma to get the old  behaviour.- Objects that have no ancestor are now implicitly ``final``. Use  the ``inheritable`` pragma to introduce new object roots apart  from ``TObject``.- Macros now receive parameters like templates do; use the ``callsite`` builtin  to gain access to the invocation AST.- Symbol lookup rules in generics have become stricter to catch more errors.Compiler Additions------------------- Win64 is now an officially supported target.- The Nimrod compiler works on BSD again, but has some issues  as ``os.getAppFilename`` and ``os.getAppDir`` cannot work reliably on BSD.- The compiler can detect and evaluate calls that can be evaluated at compile  time for optimization purposes with the ``--implicitStatic`` command line  option or pragma.- The compiler now generates marker procs that the GC can use instead of RTTI.  This speeds up the GC quite a bit.- The compiler now includes a new advanced documentation generator  via the ``doc2`` command. This new generator uses all of the semantic passes  of the compiler and can thus generate documentation for symbols hiding in  macros.- The compiler now supports the ``dynlib`` pragma for variables.- The compiler now supports ``bycopy`` and ``byref`` pragmas that affect how  objects/tuples are passed.- The embedded profiler became a stack trace profiler and has been documented.Language Additions------------------- Added explicit ``static`` sections for enforced compile time evaluation.- Added an alternative notation for lambdas with ``do``.- ``addr`` is now treated like a prefix operator syntactically.- Added ``global`` pragma that can be used to introduce new global variables  from within procs.- ``when`` expressions are now allowed just like ``if`` expressions.- The precedence for operators starting with ``@`` is different now  allowing for *sigil-like* operators.- Stand-alone ``finally`` and ``except`` blocks are now supported.- Macros and templates can now be invoked as pragmas.- The apostrophe in type suffixes for numerical literals is now optional.- Unsigned integer types have been added.- The integer promotion rules changed.- Nimrod now tracks proper intervals for ``range`` over some built-in operators.- In parameter lists a semicolon instead of a comma can be used to improve  readability: ``proc divmod(a, b: int; resA, resB: var int)``.- A semicolon can now be used to have multiple simple statements on a single  line: ``inc i; inc j``.- ``bind`` supports overloaded symbols and operators.- A ``distinct`` type can now borrow from generic procs.- Added the pragmas ``gensym``, ``inject`` and ``dirty`` for hygiene  in templates.- Comments can be continued with a backslash continuation character so that  comment pieces don't have to align on the same column.- Enums can be annotated with ``pure`` so that their field names do not pollute  the current scope.- A proc body can consist of an expression that has a type. This is rewritten  to ``result = expression`` then.- Term rewriting macros (see  [trmacros](https://nim-lang.org/docs/manual.html#term-rewriting-macros))  have been implemented but are still in alpha.", "content_with_meta": "---\ntitle: \"Version 0.9.0 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nSummary\n-------\n* Unsigned integers have been added.\n* The integer type promotion rules changed.\n* The template and macro system evolved.\n* Closures have been implemented.\n* Term rewriting macros have been implemented.\n* First steps to unify expressions and statements have been taken.\n* Symbol lookup rules in generics have become stricter to catch more errors.\n\n\nBugfixes\n--------\n\n- Fixed a bug where the compiler would \"optimize away\" valid constant parts of\n  a string concatenation.\n- Fixed a bug concerning implicit type conversions in ``case`` statements.\n- Fixed a serious code generation bug that caused ``algorithm.sort`` to\n  produce segmentation faults.\n- Fixed ambiguity in recvLine which meant that receiving ``\\r\\L`` was\n  indistinguishable from disconnections.\n- Many more bugfixes, too many to list them all.\n\n\nLibrary Additions\n-----------------\n\n- Added the (already existing) module ``htmlgen`` to the documentation.\n- Added the (already existing) module ``cookies`` to the documentation.\n- Added ``system.shallow`` that can be used to speed up string and sequence\n  assignments.\n- Added ``system.eval`` that can execute an anonymous block of code at\n  compile time as if was a macro.\n- Added ``system.staticExec`` and ``system.gorge`` for compile-time execution\n  of external programs.\n- Added ``system.staticRead`` as a synonym for ``system.slurp``.\n- Added ``macros.emit`` that can emit an arbitrary computed string as nimrod\n  code during compilation.\n- Added ``strutils.parseEnum``.\n- Added ``json.%`` constructor operator.\n- The stdlib can now be avoided to a point where C code generation for 16bit\n  micro controllers is feasible.\n- Added module ``oids``.\n- Added module ``endians``.\n- Added a new OpenGL wrapper that supports OpenGL up to version 4.2.\n- Added a wrapper for ``libsvm``.\n- Added a wrapper for ``mongodb``.\n- Added ``terminal.isatty``.\n- Added an overload for ``system.items`` that can be used to iterate over the\n  values of an enum.\n- Added ``system.TInteger`` and ``system.TNumber`` type classes matching\n  any of the corresponding types available in Nimrod.\n- Added ``system.clamp`` to limit a value within an interval ``[a, b]``.\n- Added ``strutils.continuesWith``.\n- Added ``system.getStackTrace``.\n- Added ``system.||`` for parallel ``for`` loop support.\n- The GC supports (soft) realtime systems via ``GC_setMaxPause``\n  and ``GC_step`` procs.\n- The sockets module now supports ssl through the OpenSSL library, ``recvLine``\n  is now much more efficient thanks to the newly implemented sockets buffering.\n- The httpclient module now supports ssl/tls.\n- Added ``times.format`` as well as many other utility functions\n  for managing time.\n- Added ``system.@`` for converting an ``openarray`` to a ``seq`` (it used to\n  only support fixed length arrays).\n- Added ``system.compiles`` which can be used to check whether a type supports\n  some operation.\n- Added ``strutils.format``, ``subexes.format`` which use the\n  new ``varargs`` type.\n- Added module ``fsmonitor``.\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- On Windows filenames and paths are supposed to be in UTF-8.\n  The ``system``, ``os``, ``osproc`` and ``memfiles`` modules use the wide\n  string versions of the WinAPI. Use the ``-d:useWinAnsi`` switch to revert\n  back to the old behaviour which uses the Ansi string versions.\n- ``static``, ``do``, ``interface`` and ``mixin`` are now keywords.\n- Templates now participate in overloading resolution which can break code that\n  uses templates in subtle ways. Use the new ``immediate`` pragma for templates\n  to get a template of old behaviour.\n- There is now a proper distinction in the type system between ``expr`` and\n  ``PNimrodNode`` which unfortunately breaks the old macro system.\n- ``pegs.@`` has been renamed to ``pegs.!*`` and ``pegs.@@`` has been renamed\n  to ``pegs.!*\\`` as ``@`` operators now have different precedence.\n- The type ``proc`` (without any params or return type) is now considered a\n  type class matching all proc types. Use ``proc ()`` to get the old meaning\n  denoting a proc expecing no arguments and returning no value.\n- Deprecated ``system.GC_setStrategy``.\n- ``re.findAll`` and ``pegs.findAll`` don't return *captures* anymore but\n  matching *substrings*.\n- RTTI and thus the ``marshall`` module don't contain the proper field names\n  of tuples anymore. This had to be changed as the old behaviour never\n  produced consistent results.\n- Deprecated the ``ssl`` module.\n- Deprecated ``nimrod pretty`` as it never worked good enough and has some\n  inherent problems.\n- The integer promotion rules changed; the compiler is now less picky in some\n  situations and more picky in other situations: In particular implicit\n  conversions from ``int`` to ``int32`` are now forbidden.\n- ``system.byte`` is now an alias for ``uint8``; it used to be an alias\n  to ``int8``.\n- ``bind`` expressions in templates are not properly supported anymore. Use\n  the declarative ``bind`` statement instead.\n- The default calling convention for a procedural **type** is now ``closure``,\n  for procs it remains ``nimcall`` (which is compatible to ``closure``).\n  Activate the warning ``ImplicitClosure`` to make the compiler list the\n  occurrences of proc types which are affected.\n- The Nimrod type system now distinguishes ``openarray`` from ``varargs``.\n- Templates are now ``hygienic``. Use the ``dirty`` pragma to get the old\n  behaviour.\n- Objects that have no ancestor are now implicitly ``final``. Use\n  the ``inheritable`` pragma to introduce new object roots apart\n  from ``TObject``.\n- Macros now receive parameters like templates do; use the ``callsite`` builtin\n  to gain access to the invocation AST.\n- Symbol lookup rules in generics have become stricter to catch more errors.\n\n\nCompiler Additions\n------------------\n\n- Win64 is now an officially supported target.\n- The Nimrod compiler works on BSD again, but has some issues\n  as ``os.getAppFilename`` and ``os.getAppDir`` cannot work reliably on BSD.\n- The compiler can detect and evaluate calls that can be evaluated at compile\n  time for optimization purposes with the ``--implicitStatic`` command line\n  option or pragma.\n- The compiler now generates marker procs that the GC can use instead of RTTI.\n  This speeds up the GC quite a bit.\n- The compiler now includes a new advanced documentation generator\n  via the ``doc2`` command. This new generator uses all of the semantic passes\n  of the compiler and can thus generate documentation for symbols hiding in\n  macros.\n- The compiler now supports the ``dynlib`` pragma for variables.\n- The compiler now supports ``bycopy`` and ``byref`` pragmas that affect how\n  objects/tuples are passed.\n- The embedded profiler became a stack trace profiler and has been documented.\n\n\nLanguage Additions\n------------------\n\n- Added explicit ``static`` sections for enforced compile time evaluation.\n- Added an alternative notation for lambdas with ``do``.\n- ``addr`` is now treated like a prefix operator syntactically.\n- Added ``global`` pragma that can be used to introduce new global variables\n  from within procs.\n- ``when`` expressions are now allowed just like ``if`` expressions.\n- The precedence for operators starting with ``@`` is different now\n  allowing for *sigil-like* operators.\n- Stand-alone ``finally`` and ``except`` blocks are now supported.\n- Macros and templates can now be invoked as pragmas.\n- The apostrophe in type suffixes for numerical literals is now optional.\n- Unsigned integer types have been added.\n- The integer promotion rules changed.\n- Nimrod now tracks proper intervals for ``range`` over some built-in operators.\n- In parameter lists a semicolon instead of a comma can be used to improve\n  readability: ``proc divmod(a, b: int; resA, resB: var int)``.\n- A semicolon can now be used to have multiple simple statements on a single\n  line: ``inc i; inc j``.\n- ``bind`` supports overloaded symbols and operators.\n- A ``distinct`` type can now borrow from generic procs.\n- Added the pragmas ``gensym``, ``inject`` and ``dirty`` for hygiene\n  in templates.\n- Comments can be continued with a backslash continuation character so that\n  comment pieces don't have to align on the same column.\n- Enums can be annotated with ``pure`` so that their field names do not pollute\n  the current scope.\n- A proc body can consist of an expression that has a type. This is rewritten\n  to ``result = expression`` then.\n- Term rewriting macros (see\n  [trmacros](https://nim-lang.org/docs/manual.html#term-rewriting-macros))\n  have been implemented but are still in alpha.\n", "tags": ["nim", "python"], "published_at": "", "id": 11}, {"title": "Version 0.9.2 released", "slug": "version-released", "content": "We are pleased to announce that version 0.9.2 of the Nimrod compiler has beenreleased. This release has attracted by far the most contributions in comparisonto any other release.This release brings with it many new features and bug fixes, a list of whichcan be seen later. One of the major new features is the effect system togetherwith exception tracking which allows for checked exceptions and more,for further details check out the [manual ](manual.html#effect-system).Another major new feature is the introduction of statement list expressions,more details on these can be found [here](manual.html#statement-list-expression).The ability to exclude symbols from modules has also beenimplemented, this feature can be used like so: ``import module except symbol``.Thanks to all [contributors](https://github.com/Araq/Nimrod/contributors)!Bugfixes--------- The old GC never collected cycles correctly. Fixed but it can cause  performance regressions. However you can deactivate the cycle collector  with ``GC_disableMarkAndSweep`` and run it explicitly at an appropriate time  or not at all. There is also a new GC you can activate  with ``--gc:markAndSweep`` which does not have this problem but is slower in  general and has no realtime guarantees.- ``cast`` for floating point types now does the bitcast as specified in the  manual. This breaks code that erroneously uses ``cast`` to convert different  floating point values.- SCGI module's performance has been improved greatly, it will no longer block  on many concurrent requests.- In total fixed over 70 github issues and merged over 60 pull requests.Library Additions------------------ There is a new experimental mark&sweep GC which can be faster (or much  slower) than the default GC. Enable with ``--gc:markAndSweep``.- Added ``system.onRaise`` to support a condition system.- Added ``system.locals`` that provides access to a proc's locals.- Added ``macros.quote`` for AST quasi-quoting.- Added ``system.unsafeNew`` to support hacky variable length objects.- ``system.fields`` and ``system.fieldPairs`` support ``object`` too; they  used to only support tuples.- Added ``system.CurrentSourcePath`` returning the full file-system path of  the current source file.- The ``macros`` module now contains lots of useful helpers for building up  abstract syntax trees.Changes affecting backwards compatibility------------------------------------------ ``shared`` is a keyword now.- Deprecated ``sockets.recvLine`` and ``asyncio.recvLine``, added  ``readLine`` instead.- The way indentation is handled in the parser changed significantly. However,  this affects very little (if any) real world code.- The expression/statement unification has been implemented. Again this  only affects edge cases and no known real world code.- Changed the async interface of the ``scgi`` module.- WideStrings are now garbage collected like other string types.Compiler Additions------------------- The ``doc2`` command does not generate output for the whole project anymore.  Use the new ``--project`` switch to enable this behaviour.- The compiler can now warn about shadowed local variables. However, this needs  to be turned on explicitly via ``--warning[ShadowIdent]:on``.- The compiler now supports almost every pragma in a ``push`` pragma.- Generic converters have been implemented.- Added a **highly experimental** ``noforward`` pragma enabling a special  compilation mode that largely eliminates the need for forward declarations.Language Additions------------------- ``case expressions`` are now supported.- Table constructors now mimic more closely the syntax of the ``case``  statement.- Nimrod can now infer the return type of a proc from its body.- Added a ``mixin`` declaration to affect symbol binding rules in generics.- Exception tracking has been added and the ``doc2`` command annotates possible  exceptions for you.- User defined effects (\"tags\") tracking has been added and the ``doc2``  command annotates possible tags for you.- Types can be annotated with the new syntax ``not nil`` to explicitly state  that ``nil`` is not allowed. However currently the compiler performs no  advanced static checking for this; for now it's merely for documentation  purposes.- An ``export`` statement has been added to the language: It can be used for  symbol forwarding so client modules don't have to import a module's  dependencies explicitly.- Overloading based on ASTs has been implemented.- Generics are now supported for multi methods.- Objects can be initialized via an *object constructor expression*.- There is a new syntactic construct ``(;)`` unifying expressions and  statements.- You can now use ``from module import nil`` if you want to import the module  but want to enforce fully qualified access to every symbol in ``module``.Notes for the future--------------------- The scope rules of ``if`` statements will change in 0.9.4. This affects the  ``=~`` pegs/re templates.- The ``sockets`` module will become a low-level wrapper of OS-specific socket  functions. All the high-level features of the current ``sockets`` module  will be moved to a ``network`` module.", "content_with_meta": "---\ntitle: \"Version 0.9.2 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe are pleased to announce that version 0.9.2 of the Nimrod compiler has been\nreleased. This release has attracted by far the most contributions in comparison\nto any other release.\n\nThis release brings with it many new features and bug fixes, a list of which\ncan be seen later. One of the major new features is the effect system together\nwith exception tracking which allows for checked exceptions and more,\nfor further details check out the [manual ](manual.html#effect-system).\nAnother major new feature is the introduction of statement list expressions,\nmore details on these can be found [here](manual.html#statement-list-expression).\nThe ability to exclude symbols from modules has also been\nimplemented, this feature can be used like so: ``import module except symbol``.\n\nThanks to all [contributors](https://github.com/Araq/Nimrod/contributors)!\n\nBugfixes\n--------\n\n- The old GC never collected cycles correctly. Fixed but it can cause\n  performance regressions. However you can deactivate the cycle collector\n  with ``GC_disableMarkAndSweep`` and run it explicitly at an appropriate time\n  or not at all. There is also a new GC you can activate\n  with ``--gc:markAndSweep`` which does not have this problem but is slower in\n  general and has no realtime guarantees.\n- ``cast`` for floating point types now does the bitcast as specified in the\n  manual. This breaks code that erroneously uses ``cast`` to convert different\n  floating point values.\n- SCGI module's performance has been improved greatly, it will no longer block\n  on many concurrent requests.\n- In total fixed over 70 github issues and merged over 60 pull requests.\n\n\nLibrary Additions\n-----------------\n\n- There is a new experimental mark&sweep GC which can be faster (or much\n  slower) than the default GC. Enable with ``--gc:markAndSweep``.\n- Added ``system.onRaise`` to support a condition system.\n- Added ``system.locals`` that provides access to a proc's locals.\n- Added ``macros.quote`` for AST quasi-quoting.\n- Added ``system.unsafeNew`` to support hacky variable length objects.\n- ``system.fields`` and ``system.fieldPairs`` support ``object`` too; they\n  used to only support tuples.\n- Added ``system.CurrentSourcePath`` returning the full file-system path of\n  the current source file.\n- The ``macros`` module now contains lots of useful helpers for building up\n  abstract syntax trees.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- ``shared`` is a keyword now.\n- Deprecated ``sockets.recvLine`` and ``asyncio.recvLine``, added\n  ``readLine`` instead.\n- The way indentation is handled in the parser changed significantly. However,\n  this affects very little (if any) real world code.\n- The expression/statement unification has been implemented. Again this\n  only affects edge cases and no known real world code.\n- Changed the async interface of the ``scgi`` module.\n- WideStrings are now garbage collected like other string types.\n\n\nCompiler Additions\n------------------\n\n- The ``doc2`` command does not generate output for the whole project anymore.\n  Use the new ``--project`` switch to enable this behaviour.\n- The compiler can now warn about shadowed local variables. However, this needs\n  to be turned on explicitly via ``--warning[ShadowIdent]:on``.\n- The compiler now supports almost every pragma in a ``push`` pragma.\n- Generic converters have been implemented.\n- Added a **highly experimental** ``noforward`` pragma enabling a special\n  compilation mode that largely eliminates the need for forward declarations.\n\nLanguage Additions\n------------------\n\n- ``case expressions`` are now supported.\n- Table constructors now mimic more closely the syntax of the ``case``\n  statement.\n- Nimrod can now infer the return type of a proc from its body.\n- Added a ``mixin`` declaration to affect symbol binding rules in generics.\n- Exception tracking has been added and the ``doc2`` command annotates possible\n  exceptions for you.\n- User defined effects (\"tags\") tracking has been added and the ``doc2``\n  command annotates possible tags for you.\n- Types can be annotated with the new syntax ``not nil`` to explicitly state\n  that ``nil`` is not allowed. However currently the compiler performs no\n  advanced static checking for this; for now it's merely for documentation\n  purposes.\n- An ``export`` statement has been added to the language: It can be used for\n  symbol forwarding so client modules don't have to import a module's\n  dependencies explicitly.\n- Overloading based on ASTs has been implemented.\n- Generics are now supported for multi methods.\n- Objects can be initialized via an *object constructor expression*.\n- There is a new syntactic construct ``(;)`` unifying expressions and\n  statements.\n- You can now use ``from module import nil`` if you want to import the module\n  but want to enforce fully qualified access to every symbol in ``module``.\n\n\nNotes for the future\n--------------------\n\n- The scope rules of ``if`` statements will change in 0.9.4. This affects the\n  ``=~`` pegs/re templates.\n- The ``sockets`` module will become a low-level wrapper of OS-specific socket\n  functions. All the high-level features of the current ``sockets`` module\n  will be moved to a ``network`` module.\n", "tags": ["nim", "python"], "published_at": "", "id": 12}, {"title": "Andreas Rumpf's talk on Nimrod at Strange Loop 2013 is now online", "slug": "andreas-rumpfs-talk", "content": "Andreas Rumpf presented *Nimrod: A New Approach to Metaprogramming* at[Strange Loop 2013](https://thestrangeloop.com/sessions/nimrod-a-new-approach-to-meta-programming).The [video and slides](http://www.infoq.com/presentations/nimrod)of the talk are now available.", "content_with_meta": "---\ntitle: \"Andreas Rumpf's talk on Nimrod at Strange Loop 2013 is now online\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nAndreas Rumpf presented *Nimrod: A New Approach to Metaprogramming* at\n[Strange Loop 2013](https://thestrangeloop.com/sessions/nimrod-a-new-approach-to-meta-programming).\nThe [video and slides](http://www.infoq.com/presentations/nimrod)\nof the talk are now available.\n", "tags": ["nim", "python"], "published_at": "", "id": 13}, {"title": "Nimrod Featured in Dr. Dobb's Journal", "slug": "nimrod-features-in-dr-dobbs-journal", "content": "Nimrod has been [featured](http://www.drdobbs.com/open-source/nimrod-a-new-systems-programming-languag/240165321)as the cover story in the February 2014 issue of Dr. Dobb's Journal.", "content_with_meta": "---\ntitle: \"Nimrod Featured in Dr. Dobb's Journal\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\n\nNimrod has been [featured](http://www.drdobbs.com/open-source/nimrod-a-new-systems-programming-languag/240165321)\nas the cover story in the February 2014 issue of Dr. Dobb's Journal.\n", "tags": ["nim", "python"], "published_at": "", "id": 14}, {"title": "Version 0.9.4 released", "slug": "version-released", "content": "The Nimrod development community is proud to announce the release of version0.9.4 of the Nimrod compiler and tools. **Note: This release has to beconsidered beta quality! Lots of new features have been implemented butunfortunately some do not fulfill our quality standards yet.**Prebuilt binaries and instructions for building from source are availableon the [download page]({{ site.baseurl }}/install.html).This release includes about[1400 changes](https://github.com/Araq/Nimrod/compare/v0.9.2...v0.9.4)in total including various bugfixes, new languages features and standard library additions and improvements.This release brings with it support for user-defined type classes, a brandnew VM for executing Nimrod code at compile-time and new symbol bindingrules for clean templates.It also introduces support for the brand new[Babel package manager](https://github.com/nimrod-code/babel) whichhas itself seen its first release recently. Many of the wrappers that werepresent in the standard library have been moved to separate repositoriesand should now be installed using Babel.Apart from that a new **experimental** Asynchronous IO API has been added viathe ``asyncdispatch`` and ``asyncnet`` modules. The ``net`` and ``rawsockets``modules have also been added and they will likely replace the socketsmodule in the next release. The Asynchronous IO API has been designed totake advantage of Linux's epoll and Windows' IOCP APIs, support for BSD'skqueue has not been implemented yet but will be in the future.The Asynchronous IO API provides botha callback interface and an interface which allows you to write code as youwould if you were writing synchronous code. The latter is done throughthe use of an ``await`` macro which behaves similar to C#'s await. Thefollowing is a very simple chat server demonstrating Nimrod's new asynccapabilities.```nimimport asyncnet, asyncdispatchvar clients: seq[PAsyncSocket] = @[]proc processClient(client: PAsyncSocket) {.async.} =  while true:    let line = await client.recvLine()    for c in clients:      await c.send(line & \"\\c\\L\")proc serve() {.async.} =  var server = newAsyncSocket()  server.bindAddr(TPort(12345))  server.listen()  while true:    let client = await server.accept()    clients.add client    processClient(client)serve()runForever()```Note that this feature has been implemented with Nimrod's macro system and so``await`` and ``async`` are no keywords.Syntactic sugar for anonymous procedures has also been introduced. It too hasbeen implemented as a macro. The following shows some simple usage of the newsyntax:```nimimport futurevar s = @[1, 2, 3, 4, 5]echo(s.map((x: int) => x * 5))```A list of changes follows, for a comprehensive list of changes take a look[here](https://github.com/Araq/Nimrod/compare/v0.9.2...v0.9.4).Library Additions------------------ Added ``macros.genSym`` builtin for AST generation.- Added ``macros.newLit`` procs for easier AST generation.- Added module ``logging``.- Added module ``asyncdispatch``.- Added module ``asyncnet``.- Added module ``net``.- Added module ``rawsockets``.- Added module ``selectors``.- Added module ``asynchttpserver``.- Added support for the new asynchronous IO in the ``httpclient`` module.- Added a Python-inspired ``future`` module that features upcoming additions  to the ``system`` module.Changes affecting backwards compatibility------------------------------------------ The scoping rules for the ``if`` statement changed for better interaction  with the new syntactic construct ``(;)``.- ``OSError`` family of procedures has been deprecated. Procedures with the same  name but which take different parameters have been introduced. These procs now  require an error code to be passed to them. This error code can be retrieved  using the new ``OSLastError`` proc.- ``os.parentDir`` now returns \"\" if there is no parent dir.- In CGI scripts stacktraces are shown to the user only  if ``cgi.setStackTraceStdout`` is used.- The symbol binding rules for clean templates changed: ``bind`` for any  symbol that's not a parameter is now the default. ``mixin`` can be used  to require instantiation scope for a symbol.- ``quoteIfContainsWhite`` now escapes argument in such way that it can be safely  passed to shell, instead of just adding double quotes.- ``macros.dumpTree`` and ``macros.dumpLisp`` have been made ``immediate``,  ``dumpTreeImm`` and ``dumpLispImm`` are now deprecated.- The ``nil`` statement has been deprecated, use an empty ``discard`` instead.- ``sockets.select`` now prunes sockets that are **not** ready from the list  of sockets given to it.- The ``noStackFrame`` pragma has been renamed to ``asmNoStackFrame`` to  ensure you only use it when you know what you're doing.- Many of the wrappers that were present in the standard library have been  moved to separate repositories and should now be installed using Babel.Compiler Additions------------------- The compiler can now warn about \"uninitialized\" variables. (There are no  real uninitialized variables in Nimrod as they are initialized to binary  zero). Activate via ``{.warning[Uninit]:on.}``.- The compiler now enforces the ``not nil`` constraint.- The compiler now supports a ``codegenDecl`` pragma for even more control  over the generated code.- The compiler now supports a ``computedGoto`` pragma to support very fast  dispatching for interpreters and the like.- The old evaluation engine has been replaced by a proper register based  virtual machine. This fixes numerous bugs for ``nimrod i`` and for macro  evaluation.- ``--gc:none`` produces warnings when code uses the GC.- A ``union`` pragma for better C interoperability is now supported.- A ``packed`` pragma to control the memory packing/alignment of fields in  an object.- Arrays can be annotated to be ``unchecked`` for easier low level  manipulations of memory.- Support for the new Babel package manager.Language Additions------------------- Arrays can now be declared with a single integer literal ``N`` instead of a  range; the range is then ``0..N-1``.- Added ``requiresInit`` pragma to enforce explicit initialization.- Exported templates are allowed to access hidden fields.- The ``using statement`` enables you to more easily author domain-specific  languages and libraries providing OOP-like syntactic sugar.- Added the possibility to override various dot operators in order to handle  calls to missing procs and reads from undeclared fields at compile-time.- The overload resolution now supports ``static[T]`` params that must be  evaluable at compile-time.- Support for user-defined type classes has been added.- The *command syntax* is supported in a lot more contexts.- Anonymous iterators are now supported and iterators can capture variables  of an outer proc.- The experimental ``strongSpaces`` parsing mode has been implemented.- You can annotate pointer types with regions for increased type safety.- Added support for the builtin ``spawn`` for easy thread pool usage.Tools improvements------------------- c2nim can deal with a subset of C++. Use the ``--cpp`` command line option  to activate.", "content_with_meta": "---\ntitle: \"Version 0.9.4 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nThe Nimrod development community is proud to announce the release of version\n0.9.4 of the Nimrod compiler and tools. **Note: This release has to be\nconsidered beta quality! Lots of new features have been implemented but\nunfortunately some do not fulfill our quality standards yet.**\n\nPrebuilt binaries and instructions for building from source are available\non the [download page]({{ site.baseurl }}/install.html).\n\nThis release includes about\n[1400 changes](https://github.com/Araq/Nimrod/compare/v0.9.2...v0.9.4)\nin total including various bug\nfixes, new languages features and standard library additions and improvements.\nThis release brings with it support for user-defined type classes, a brand\nnew VM for executing Nimrod code at compile-time and new symbol binding\nrules for clean templates.\n\nIt also introduces support for the brand new\n[Babel package manager](https://github.com/nimrod-code/babel) which\nhas itself seen its first release recently. Many of the wrappers that were\npresent in the standard library have been moved to separate repositories\nand should now be installed using Babel.\n\nApart from that a new **experimental** Asynchronous IO API has been added via\nthe ``asyncdispatch`` and ``asyncnet`` modules. The ``net`` and ``rawsockets``\nmodules have also been added and they will likely replace the sockets\nmodule in the next release. The Asynchronous IO API has been designed to\ntake advantage of Linux's epoll and Windows' IOCP APIs, support for BSD's\nkqueue has not been implemented yet but will be in the future.\nThe Asynchronous IO API provides both\na callback interface and an interface which allows you to write code as you\nwould if you were writing synchronous code. The latter is done through\nthe use of an ``await`` macro which behaves similar to C#'s await. The\nfollowing is a very simple chat server demonstrating Nimrod's new async\ncapabilities.\n\n```nim\nimport asyncnet, asyncdispatch\n\nvar clients: seq[PAsyncSocket] = @[]\n\nproc processClient(client: PAsyncSocket) {.async.} =\n  while true:\n    let line = await client.recvLine()\n    for c in clients:\n      await c.send(line & \"\\c\\L\")\n\nproc serve() {.async.} =\n  var server = newAsyncSocket()\n  server.bindAddr(TPort(12345))\n  server.listen()\n\n  while true:\n    let client = await server.accept()\n    clients.add client\n\n    processClient(client)\n\nserve()\nrunForever()\n```\n\nNote that this feature has been implemented with Nimrod's macro system and so\n``await`` and ``async`` are no keywords.\n\nSyntactic sugar for anonymous procedures has also been introduced. It too has\nbeen implemented as a macro. The following shows some simple usage of the new\nsyntax:\n\n```nim\nimport future\n\nvar s = @[1, 2, 3, 4, 5]\necho(s.map((x: int) => x * 5))\n```\n\nA list of changes follows, for a comprehensive list of changes take a look\n[here](https://github.com/Araq/Nimrod/compare/v0.9.2...v0.9.4).\n\nLibrary Additions\n-----------------\n\n- Added ``macros.genSym`` builtin for AST generation.\n- Added ``macros.newLit`` procs for easier AST generation.\n- Added module ``logging``.\n- Added module ``asyncdispatch``.\n- Added module ``asyncnet``.\n- Added module ``net``.\n- Added module ``rawsockets``.\n- Added module ``selectors``.\n- Added module ``asynchttpserver``.\n- Added support for the new asynchronous IO in the ``httpclient`` module.\n- Added a Python-inspired ``future`` module that features upcoming additions\n  to the ``system`` module.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- The scoping rules for the ``if`` statement changed for better interaction\n  with the new syntactic construct ``(;)``.\n- ``OSError`` family of procedures has been deprecated. Procedures with the same\n  name but which take different parameters have been introduced. These procs now\n  require an error code to be passed to them. This error code can be retrieved\n  using the new ``OSLastError`` proc.\n- ``os.parentDir`` now returns \"\" if there is no parent dir.\n- In CGI scripts stacktraces are shown to the user only\n  if ``cgi.setStackTraceStdout`` is used.\n- The symbol binding rules for clean templates changed: ``bind`` for any\n  symbol that's not a parameter is now the default. ``mixin`` can be used\n  to require instantiation scope for a symbol.\n- ``quoteIfContainsWhite`` now escapes argument in such way that it can be safely\n  passed to shell, instead of just adding double quotes.\n- ``macros.dumpTree`` and ``macros.dumpLisp`` have been made ``immediate``,\n  ``dumpTreeImm`` and ``dumpLispImm`` are now deprecated.\n- The ``nil`` statement has been deprecated, use an empty ``discard`` instead.\n- ``sockets.select`` now prunes sockets that are **not** ready from the list\n  of sockets given to it.\n- The ``noStackFrame`` pragma has been renamed to ``asmNoStackFrame`` to\n  ensure you only use it when you know what you're doing.\n- Many of the wrappers that were present in the standard library have been\n  moved to separate repositories and should now be installed using Babel.\n\n\nCompiler Additions\n------------------\n\n- The compiler can now warn about \"uninitialized\" variables. (There are no\n  real uninitialized variables in Nimrod as they are initialized to binary\n  zero). Activate via ``{.warning[Uninit]:on.}``.\n- The compiler now enforces the ``not nil`` constraint.\n- The compiler now supports a ``codegenDecl`` pragma for even more control\n  over the generated code.\n- The compiler now supports a ``computedGoto`` pragma to support very fast\n  dispatching for interpreters and the like.\n- The old evaluation engine has been replaced by a proper register based\n  virtual machine. This fixes numerous bugs for ``nimrod i`` and for macro\n  evaluation.\n- ``--gc:none`` produces warnings when code uses the GC.\n- A ``union`` pragma for better C interoperability is now supported.\n- A ``packed`` pragma to control the memory packing/alignment of fields in\n  an object.\n- Arrays can be annotated to be ``unchecked`` for easier low level\n  manipulations of memory.\n- Support for the new Babel package manager.\n\n\nLanguage Additions\n------------------\n\n- Arrays can now be declared with a single integer literal ``N`` instead of a\n  range; the range is then ``0..N-1``.\n- Added ``requiresInit`` pragma to enforce explicit initialization.\n- Exported templates are allowed to access hidden fields.\n- The ``using statement`` enables you to more easily author domain-specific\n  languages and libraries providing OOP-like syntactic sugar.\n- Added the possibility to override various dot operators in order to handle\n  calls to missing procs and reads from undeclared fields at compile-time.\n- The overload resolution now supports ``static[T]`` params that must be\n  evaluable at compile-time.\n- Support for user-defined type classes has been added.\n- The *command syntax* is supported in a lot more contexts.\n- Anonymous iterators are now supported and iterators can capture variables\n  of an outer proc.\n- The experimental ``strongSpaces`` parsing mode has been implemented.\n- You can annotate pointer types with regions for increased type safety.\n- Added support for the builtin ``spawn`` for easy thread pool usage.\n\n\nTools improvements\n------------------\n\n- c2nim can deal with a subset of C++. Use the ``--cpp`` command line option\n  to activate.\n", "tags": ["nim", "python"], "published_at": "", "id": 15}, {"title": "Version 0.9.6 released", "slug": "version-released", "content": "**Note: 0.9.6 is the last release of Nimrod. The language is being renamed toNim. Nim slightly breaks compatibility.**This is a maintenance release. The upcoming 0.10.0 release hasthe new features and exciting developments.Changes affecting backwards compatibility------------------------------------------ ``spawn`` now uses an elaborate self-adapting thread pool and as such  has been moved into its own module. So to use it, you now have to import  ``threadpool``.- The symbol binding rules in generics changed: ``bar`` in ``foo.bar`` is  now considered for implicit early binding.- ``c2nim`` moved into its own repository and is now a Babel package.- ``pas2nim`` moved into its own repository and is now a Babel package.- ``system.$`` for floating point types now produces a human friendly string  representation.- ``uri.TUrl`` as well as the ``parseurl`` module are now deprecated in favour  of the new ``TUri`` type in the ``uri`` module.- The ``destructor`` pragma has been deprecated. Use the ``override`` pragma  instead. The destructor's name has to be ``destroy`` now.- ``lambda`` is not a keyword anymore.- **system.defined has been split into system.defined and system.declared**.  You have to use ``--symbol`` to declare new conditional symbols that can be  set via ``--define``.- ``--threadanalysis:on`` is now the default. To make your program compile  you can disable it but this is only a temporary solution as this option  will disappear soon!Compiler improvements---------------------- Multi method dispatching performance has been improved by a factor of 10x for  pathological cases.Language Additions------------------- This version introduces the ``deprecated`` pragma statement that is used  to handle the upcoming massive amount of symbol renames.- ``spawn`` can now wrap proc that has a return value. It then returns a data  flow variable of the wrapped return type.Library Additions------------------ Added module ``cpuinfo``.- Added module ``threadpool``.- ``sequtils.distnct`` has been renamed to ``sequtils.deduplicate``.- Added ``algorithm.reversed``- Added ``uri.combine`` and ``uri.parseUri``.- Some sockets procedures now support a ``SafeDisconn`` flag which causes  them to handle disconnection errors and not raise them.", "content_with_meta": "---\ntitle: \"Version 0.9.6 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\n**Note: 0.9.6 is the last release of Nimrod. The language is being renamed to\nNim. Nim slightly breaks compatibility.**\n\nThis is a maintenance release. The upcoming 0.10.0 release has\nthe new features and exciting developments.\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- ``spawn`` now uses an elaborate self-adapting thread pool and as such\n  has been moved into its own module. So to use it, you now have to import\n  ``threadpool``.\n- The symbol binding rules in generics changed: ``bar`` in ``foo.bar`` is\n  now considered for implicit early binding.\n- ``c2nim`` moved into its own repository and is now a Babel package.\n- ``pas2nim`` moved into its own repository and is now a Babel package.\n- ``system.$`` for floating point types now produces a human friendly string\n  representation.\n- ``uri.TUrl`` as well as the ``parseurl`` module are now deprecated in favour\n  of the new ``TUri`` type in the ``uri`` module.\n- The ``destructor`` pragma has been deprecated. Use the ``override`` pragma\n  instead. The destructor's name has to be ``destroy`` now.\n- ``lambda`` is not a keyword anymore.\n- **system.defined has been split into system.defined and system.declared**.\n  You have to use ``--symbol`` to declare new conditional symbols that can be\n  set via ``--define``.\n- ``--threadanalysis:on`` is now the default. To make your program compile\n  you can disable it but this is only a temporary solution as this option\n  will disappear soon!\n\n\nCompiler improvements\n---------------------\n\n- Multi method dispatching performance has been improved by a factor of 10x for\n  pathological cases.\n\n\nLanguage Additions\n------------------\n\n- This version introduces the ``deprecated`` pragma statement that is used\n  to handle the upcoming massive amount of symbol renames.\n- ``spawn`` can now wrap proc that has a return value. It then returns a data\n  flow variable of the wrapped return type.\n\n\nLibrary Additions\n-----------------\n\n- Added module ``cpuinfo``.\n- Added module ``threadpool``.\n- ``sequtils.distnct`` has been renamed to ``sequtils.deduplicate``.\n- Added ``algorithm.reversed``\n- Added ``uri.combine`` and ``uri.parseUri``.\n- Some sockets procedures now support a ``SafeDisconn`` flag which causes\n  them to handle disconnection errors and not raise them.\n", "tags": ["nim", "python"], "published_at": "", "id": 16}, {"title": "New website design!", "slug": "new-website", "content": "A brand new website including an improved forum is now live.All thanks go to Philip Witte andDominik Picheta, Philip Witte for the design of the website (together withthe logo) as well as the HTML and CSS code for his template, and Dominik Pichetafor integrating Philip's design with Nim's forum. We're sure you willagree that Philip's design is beautiful.", "content_with_meta": "---\ntitle: \"New website design!\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nA brand new website including an improved forum is now live.\nAll thanks go to Philip Witte and\nDominik Picheta, Philip Witte for the design of the website (together with\nthe logo) as well as the HTML and CSS code for his template, and Dominik Picheta\nfor integrating Philip's design with Nim's forum. We're sure you will\nagree that Philip's design is beautiful.\n", "tags": ["nim", "python"], "published_at": "", "id": 17}, {"title": "Version 0.10.2 released", "slug": "version-released", "content": "This release marks the completion of a very important change to the project:the official renaming from Nimrod to Nim. Version 0.10.2 contains many languagechanges, some of which may break your existing code. For your convenience, weadded a new tool called [nimfix]({{site.baseurl}}/docs/nimfix.html) that will help you convert yourexisting projects so that it works with the latest version of the compiler.## Progress towards version 1.0Although Nim is still pre-1.0, we were able to keep the number of breakingchanges to a minimum so far. Starting with version 1.0, we will not introduceany breaking changes between major release versions.One of Nim's goals is to ensure that the compiler is as efficient as possible.Take a look at the[latest benchmarks](https://github.com/logicchains/LPATHBench/blob/master/writeup.md),which show that Nim is consistently nearthe top and already nearly as fast as C and C++. Recent developments, such asthe new ``asyncdispatch`` module will allow you to write efficient web serverapplications using non-blocking code. Nim now also has a built-in thread poolfor lightweight threading through the use of ``spawn``.The unpopular \"T\" and \"P\" prefixes on types have been deprecated. Nim alsobecame more expressive by weakening the distinction between statements andexpressions. We also added a new and searchable forum, a new website, and ourdocumentation generator ``docgen`` has seen major improvements. Many thanks toNick Greenfield for the much more beautiful documentation!## What's left to be doneThe 1.0 release is actually very close. Apart from bug fixes, there aretwo major features missing or incomplete:* ``static[T]`` needs to be defined precisely and the bugs in the  implementation need to be fixed.* Overloading of the assignment operator is required for some generic  containers and needs to be implemented.This means that fancy matrix libraries will finally start to work, which usedto be a major point of pain in the language.## Nimble and other Nim toolsOutside of the language and the compiler itself many Nim tools have seenconsiderable improvements.Babel the Nim package manager has been renamed to Nimble. Nimble's purposeis the installation of packages containing libraries and/or applicationswritten in Nim.Even though Nimble is still very young it already is veryfunctional. It can install packages by name, it does so by accessing apackages repository which is hosted on a GitHub repo. Packages can also beinstalled via a Git repo URL or Mercurial repo URL. The package repositoryis searchable through Nimble. Anyone is free to add their own packages tothe package repository by forking the[nim-lang/packages](https://github.com/nim-lang/packages) repo and creatinga pull request. Nimble is fully cross-platform and should be fully functionalon all major operating systems.It is of course completely written in Nim.## ChangelogChanges affecting backwards compatibility------------------------------------------ **The language has been renamed from Nimrod to Nim.** The name of the  compiler changed from ``nimrod`` to ``nim`` too.- ``system.fileHandle`` has been renamed to ``system.getFileHandle`` to  prevent name conflicts with the new type ``FileHandle``.- Comments are now not part of the AST anymore, as such you cannot use them  in place of ``discard``.- Large parts of the stdlib got rid of the T/P type prefixes. Instead most  types now simply start with an uppercased letter. The  so called \"partial case sensitivity\" rule is now active allowing for code  like ``var foo: Foo`` in more contexts.- String case (or any non-ordinal case) statements  without 'else' are deprecated.- Recursive tuple types are not allowed anymore. Use ``object`` instead.- The PEGS module returns ``nil`` instead of ``\"\"`` when an optional capture  fails to match.- The re module returns ``nil`` instead of ``\"\"`` when an optional capture  fails to match.- The \"symmetric set difference\" operator (``-+-``) never worked and has been  removed.- ``defer`` is a keyword now.- ``func`` is a keyword now.- The ``using`` language feature now needs to be activated via the new  ``{.experimental.}`` pragma that enables experimental language features.- Destructors are now officially *experimental*.- Standalone ``except`` and ``finally`` statements are deprecated now.  The standalone ``finally`` can be replaced with ``defer``,  standalone ``except`` requires an explicit ``try``.- Operators ending in ``>`` are considered as \"arrow like\" and have their  own priority level and are right associative. This means that  the ``=>`` and ``->`` operators from the  [future](https://nim-lang.org/docs/future.html) module  work better.- Field names in tuples are now ignored for type comparisons. This allows  for greater interoperability between different modules.- Statement lists are not converted to an implicit ``do`` block anymore. This  means the confusing ``nnkDo`` nodes when working with macros are gone for  good.Language Additions------------------- The new concurrency model has been implemented including ``locks`` sections,  lock levels and object field ``guards``.- The ``parallel`` statement has been implemented.- ``deepCopy`` has been added to the language.- The builtin ``procCall`` can be used to get ``super``-like functionality  for multi methods.- There is a new pragma ``{.experimental.}`` that enables experimental  language features per module, or you can enable these features on a global  level with the ``--experimental`` command line option.Compiler Additions------------------- The compiler now supports *mixed* Objective C / C++ / C code generation:  The modules that use ``importCpp`` or ``importObjc`` are compiled to C++  or Objective C code, any other module is compiled to C code. This  improves interoperability.- There is a new ``parallel`` statement for safe fork&join parallel computing.- ``guard`` and ``lock`` pragmas have been implemented to support safer  concurrent programming.- The following procs are now available at compile-time::    math.sqrt, math.ln, math.log10, math.log2, math.exp, math.round,    math.arccos, math.arcsin, math.arctan, math.arctan2, math.cos,    math.cosh, math.hypot, math.sinh, math.sin, math.tan, math.tanh,    math.pow, math.trunc, math.floor, math.ceil, math.fmod,    os.getEnv, os.existsEnv, os.dirExists, os.fileExists,    system.writeFile- Two backticks now produce a single backtick within an ``emit`` or ``asm``  statement.- There is a new tool, [nimfix](nimfix.html) to help you in updating your  code from Nimrod to Nim.- The compiler's output has been prettified.Library Additions------------------ Added module ``fenv`` to control the handling of floating-point rounding and  exceptions (overflow, division by zero, etc.).- ``system.setupForeignThreadGc`` can be used for better interaction with  foreign libraries that create threads and run a Nim callback from these  foreign threads.- List comprehensions have been implemented as a macro in the ``future``  module.- The new Async module (``asyncnet``) now supports SSL.- The ``smtp`` module now has an async implementation.- Added module ``asyncfile`` which implements asynchronous file reading  and writing.- ``osproc.kill`` has been added.- ``asyncnet`` and ``asynchttpserver`` now support ``SO_REUSEADDR``.Bugfixes--------- ``nil`` and ``NULL`` are now preserved between Nim and databases in the  ``db_*`` modules.- Fixed issue with OS module in non-unicode mode on Windows.- Fixed issue with ``x.low``  ([#1366](https://github.com/Araq/Nim/issues/1366)).- Fixed tuple unpacking issue inside closure iterators  ([#1067](https://github.com/Araq/Nim/issues/1067)).- Fixed ENDB compilation issues.- Many ``asynchttpserver`` fixes.- Macros can now keep global state across macro calls  ([#903](https://github.com/Araq/Nim/issues/903)).- ``osproc`` fixes on Windows.- ``osproc.terminate`` fixed.- Improvements to exception handling in async procedures.  ([#1487](https://github.com/Araq/Nim/issues/1487)).- ``try`` now works at compile-time.- Fixes ``T = ref T`` to be an illegal recursive type.- Self imports are now disallowed.- Improved effect inference.- Fixes for the ``math`` module on Windows.- User defined pragmas will now work for generics that have  been instantiated in different modules.- Fixed queue exhaustion bug.- Many, many more.", "content_with_meta": "---\ntitle: \"Version 0.10.2 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nThis release marks the completion of a very important change to the project:\nthe official renaming from Nimrod to Nim. Version 0.10.2 contains many language\nchanges, some of which may break your existing code. For your convenience, we\nadded a new tool called [nimfix]({{site.baseurl}}/docs/nimfix.html) that will help you convert your\nexisting projects so that it works with the latest version of the compiler.\n\n## Progress towards version 1.0\n\n\nAlthough Nim is still pre-1.0, we were able to keep the number of breaking\nchanges to a minimum so far. Starting with version 1.0, we will not introduce\nany breaking changes between major release versions.\nOne of Nim's goals is to ensure that the compiler is as efficient as possible.\nTake a look at the\n[latest benchmarks](https://github.com/logicchains/LPATHBench/blob/master/writeup.md),\nwhich show that Nim is consistently near\nthe top and already nearly as fast as C and C++. Recent developments, such as\nthe new ``asyncdispatch`` module will allow you to write efficient web server\napplications using non-blocking code. Nim now also has a built-in thread pool\nfor lightweight threading through the use of ``spawn``.\n\nThe unpopular \"T\" and \"P\" prefixes on types have been deprecated. Nim also\nbecame more expressive by weakening the distinction between statements and\nexpressions. We also added a new and searchable forum, a new website, and our\ndocumentation generator ``docgen`` has seen major improvements. Many thanks to\nNick Greenfield for the much more beautiful documentation!\n\n\n\n## What's left to be done\n\nThe 1.0 release is actually very close. Apart from bug fixes, there are\ntwo major features missing or incomplete:\n\n* ``static[T]`` needs to be defined precisely and the bugs in the\n  implementation need to be fixed.\n* Overloading of the assignment operator is required for some generic\n  containers and needs to be implemented.\n\nThis means that fancy matrix libraries will finally start to work, which used\nto be a major point of pain in the language.\n\n\n## Nimble and other Nim tools\n\nOutside of the language and the compiler itself many Nim tools have seen\nconsiderable improvements.\n\nBabel the Nim package manager has been renamed to Nimble. Nimble's purpose\nis the installation of packages containing libraries and/or applications\nwritten in Nim.\nEven though Nimble is still very young it already is very\nfunctional. It can install packages by name, it does so by accessing a\npackages repository which is hosted on a GitHub repo. Packages can also be\ninstalled via a Git repo URL or Mercurial repo URL. The package repository\nis searchable through Nimble. Anyone is free to add their own packages to\nthe package repository by forking the\n[nim-lang/packages](https://github.com/nim-lang/packages) repo and creating\na pull request. Nimble is fully cross-platform and should be fully functional\non all major operating systems.\nIt is of course completely written in Nim.\n\n## Changelog\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- **The language has been renamed from Nimrod to Nim.** The name of the\n  compiler changed from ``nimrod`` to ``nim`` too.\n- ``system.fileHandle`` has been renamed to ``system.getFileHandle`` to\n  prevent name conflicts with the new type ``FileHandle``.\n- Comments are now not part of the AST anymore, as such you cannot use them\n  in place of ``discard``.\n- Large parts of the stdlib got rid of the T/P type prefixes. Instead most\n  types now simply start with an uppercased letter. The\n  so called \"partial case sensitivity\" rule is now active allowing for code\n  like ``var foo: Foo`` in more contexts.\n- String case (or any non-ordinal case) statements\n  without 'else' are deprecated.\n- Recursive tuple types are not allowed anymore. Use ``object`` instead.\n- The PEGS module returns ``nil`` instead of ``\"\"`` when an optional capture\n  fails to match.\n- The re module returns ``nil`` instead of ``\"\"`` when an optional capture\n  fails to match.\n- The \"symmetric set difference\" operator (``-+-``) never worked and has been\n  removed.\n- ``defer`` is a keyword now.\n- ``func`` is a keyword now.\n- The ``using`` language feature now needs to be activated via the new\n  ``{.experimental.}`` pragma that enables experimental language features.\n- Destructors are now officially *experimental*.\n- Standalone ``except`` and ``finally`` statements are deprecated now.\n  The standalone ``finally`` can be replaced with ``defer``,\n  standalone ``except`` requires an explicit ``try``.\n- Operators ending in ``>`` are considered as \"arrow like\" and have their\n  own priority level and are right associative. This means that\n  the ``=>`` and ``->`` operators from the\n  [future](https://nim-lang.org/docs/future.html) module\n  work better.\n- Field names in tuples are now ignored for type comparisons. This allows\n  for greater interoperability between different modules.\n- Statement lists are not converted to an implicit ``do`` block anymore. This\n  means the confusing ``nnkDo`` nodes when working with macros are gone for\n  good.\n\n\nLanguage Additions\n------------------\n\n- The new concurrency model has been implemented including ``locks`` sections,\n  lock levels and object field ``guards``.\n- The ``parallel`` statement has been implemented.\n- ``deepCopy`` has been added to the language.\n- The builtin ``procCall`` can be used to get ``super``-like functionality\n  for multi methods.\n- There is a new pragma ``{.experimental.}`` that enables experimental\n  language features per module, or you can enable these features on a global\n  level with the ``--experimental`` command line option.\n\n\nCompiler Additions\n------------------\n\n- The compiler now supports *mixed* Objective C / C++ / C code generation:\n  The modules that use ``importCpp`` or ``importObjc`` are compiled to C++\n  or Objective C code, any other module is compiled to C code. This\n  improves interoperability.\n- There is a new ``parallel`` statement for safe fork&join parallel computing.\n- ``guard`` and ``lock`` pragmas have been implemented to support safer\n  concurrent programming.\n- The following procs are now available at compile-time::\n\n    math.sqrt, math.ln, math.log10, math.log2, math.exp, math.round,\n    math.arccos, math.arcsin, math.arctan, math.arctan2, math.cos,\n    math.cosh, math.hypot, math.sinh, math.sin, math.tan, math.tanh,\n    math.pow, math.trunc, math.floor, math.ceil, math.fmod,\n    os.getEnv, os.existsEnv, os.dirExists, os.fileExists,\n    system.writeFile\n\n- Two backticks now produce a single backtick within an ``emit`` or ``asm``\n  statement.\n- There is a new tool, [nimfix](nimfix.html) to help you in updating your\n  code from Nimrod to Nim.\n- The compiler's output has been prettified.\n\nLibrary Additions\n-----------------\n\n- Added module ``fenv`` to control the handling of floating-point rounding and\n  exceptions (overflow, division by zero, etc.).\n- ``system.setupForeignThreadGc`` can be used for better interaction with\n  foreign libraries that create threads and run a Nim callback from these\n  foreign threads.\n- List comprehensions have been implemented as a macro in the ``future``\n  module.\n- The new Async module (``asyncnet``) now supports SSL.\n- The ``smtp`` module now has an async implementation.\n- Added module ``asyncfile`` which implements asynchronous file reading\n  and writing.\n- ``osproc.kill`` has been added.\n- ``asyncnet`` and ``asynchttpserver`` now support ``SO_REUSEADDR``.\n\nBugfixes\n--------\n\n- ``nil`` and ``NULL`` are now preserved between Nim and databases in the\n  ``db_*`` modules.\n- Fixed issue with OS module in non-unicode mode on Windows.\n- Fixed issue with ``x.low``\n  ([#1366](https://github.com/Araq/Nim/issues/1366)).\n- Fixed tuple unpacking issue inside closure iterators\n  ([#1067](https://github.com/Araq/Nim/issues/1067)).\n- Fixed ENDB compilation issues.\n- Many ``asynchttpserver`` fixes.\n- Macros can now keep global state across macro calls\n  ([#903](https://github.com/Araq/Nim/issues/903)).\n- ``osproc`` fixes on Windows.\n- ``osproc.terminate`` fixed.\n- Improvements to exception handling in async procedures.\n  ([#1487](https://github.com/Araq/Nim/issues/1487)).\n- ``try`` now works at compile-time.\n- Fixes ``T = ref T`` to be an illegal recursive type.\n- Self imports are now disallowed.\n- Improved effect inference.\n- Fixes for the ``math`` module on Windows.\n- User defined pragmas will now work for generics that have\n  been instantiated in different modules.\n- Fixed queue exhaustion bug.\n- Many, many more.\n", "tags": ["nim", "python"], "published_at": "", "id": 18}, {"title": "Version 0.11.0 released", "slug": "version-released", "content": "With this release we are one step closer to reaching version 1.0 and byextension the persistence of the Nim specification. As mentioned in theprevious release notes, starting with version 1.0, we will not be introducingany more breaking changes to Nim.The *language* itself is very close to 1.0, the primary area that requiresmore work is the standard library.Take a look at the [download]({{site.baseurl}}/install.html) page for binaries (Windows-only)and 0.11.0 snapshots of the source code. The Windows installer now alsoincludes [Aporia](https://github.com/nim-lang/aporia),[Nimble](https://github.com/nim-lang/nimble) and other useful tools to getyou started with Nim.## What's left to be doneThe 1.0 release is expected by the end of this year. Rumors say it will be insummer 2015. What's left:* Bug fixes, bug fixes, bug fixes, in particular:  - The remaining bugs of the lambda lifting pass that is responsible to enable    closures and closure iterators need to be fixed.  - ``concept`` needs to be refined, a nice name for the feature is not enough.  - Destructors need to be refined.  - ``static[T]`` needs to be fixed.  - Finish the implementation of the 'parallel' statement.* ``immediate`` templates and macros will be deprecated as these will soon be  completely unnecessary, instead the ``typed`` or ``untyped`` metatypes can  be used.* More of the standard library should be moved to Nimble packages and what's  left should use the features we have for concurrency and parallelism.Changes affecting backwards compatibility------------------------------------------ Parameter names are finally properly ``gensym``'ed. This can break  templates though that used to rely on the fact that they are not.  (Bug #1915.) This means this doesn't compile anymore:    ```nim    template doIt(body: stmt) {.immediate.} =      # this used to inject the 'str' parameter:      proc res(str: string) =        body    doIt:      echo str # Error: undeclared identifier: 'str'    ```  This used to inject the ``str`` parameter into the scope of the body.  Declare the ``doIt`` template as ``immediate, dirty`` to get the old  behaviour.- Tuple field names are not ignored anymore, this caused too many problems  in practice so now the behaviour is as it was for version 0.9.6: If field  names exist for the tuple type, they are checked.- ``logging.level`` and ``logging.handlers`` are no longer exported.  ``addHandler``, ``getHandlers``, ``setLogFilter`` and ``getLogFilter``  should be used instead.- ``nim idetools`` has been replaced by a separate  tool [nimsuggest](0.11.0/nimsuggest.html).- *arrow like* operators are not right associative anymore and are required  to end with either ``->``, ``~>`` or  ``=>``, not just ``>``. Examples of operators still considered arrow like:  ``->``, ``==>``, ``+=>``. On the other hand, the following operators are now  considered regular operators again: ``|>``, ``-+>``, etc.- Typeless parameters are now only allowed in templates and macros. The old  way turned out to be too error-prone.- The 'addr' and 'type' operators are now parsed as unary function  application. This means ``type(x).name`` is now parsed as ``(type(x)).name``  and not as ``type((x).name)``. Note that this also affects the AST  structure; for immediate macro parameters ``nkCall('addr', 'x')`` is  produced instead of ``nkAddr('x')``.- ``concept`` is now a keyword and is used instead of ``generic``.- The ``inc``, ``dec``, ``+=``, ``-=`` builtins now produce OverflowError  exceptions. This means code like the following:    ```nim    var x = low(T)    while x <= high(T):      echo x      inc x    ```    Needs to be replaced by something like this:    ```nim    var x = low(T).int    while x <= high(T).int:      echo x.T      inc x    ```- **Negative indexing for slicing does not work anymore!** Instead  of ``a[0.. -1]`` you can  use ``a[0.. ^1]``. This also works with accessing a single  element ``a[^1]``. Note that we cannot detect this reliably as it is  determined at **runtime** whether negative indexing is used!  ``a[0.. -1]`` now produces the empty string/sequence.- The compiler now warns about code like ``foo +=1`` which uses inconsistent  spacing around binary operators. Later versions of the language will parse  these as unary operators instead so that ``echo $foo`` finally can do what  people expect it to do.- ``system.untyped`` and ``system.typed`` have been introduced as aliases  for ``expr`` and ``stmt``. The new names capture the semantics much better  and most likely  ``expr`` and ``stmt`` will be deprecated in favor of the  new names.- The ``split`` method in module ``re`` has changed. It now handles the case  of matches having a length of 0, and empty strings being yielded from the  iterator. A notable change might be that a pattern being matched at the  beginning and end of a string, will result in an empty string being produced  at the start and the end of the iterator.- The compiler and nimsuggest now count columns starting with 1, not 0 for  consistency with the rest of the world.Language Additions------------------- For empty ``case object`` branches ``discard`` can finally be used instead  of ``nil``.- Automatic dereferencing is now done for the first argument of a routine  call if overloading resolution produces no match otherwise. This feature  has to be enabled with  the [experimental](0.11.0/manual.html#pragmas-experimental-pragma) pragma.- Objects that do not use inheritance nor ``case`` can be put into ``const``  sections. This means that finally this is possible and produces rather  nice code:    ```nim    import tables    const      foo = {\"ah\": \"finally\", \"this\": \"is\", \"possible.\": \"nice!\"}.toTable()    ```- Ordinary parameters can follow after a varargs parameter. This means the  following is finally accepted by the compiler:    ```nim    template takesBlock(a, b: int, x: varargs[expr]; blck: stmt) =      blck      echo a, b    takesBlock 1, 2, \"some\", 0.90, \"random stuff\":      echo \"yay\"    ```- Overloading by 'var T' is now finally possible:    ```nim    proc varOrConst(x: var int) = echo \"var\"    proc varOrConst(x: int) = echo \"const\"    var x: int    varOrConst(x) # \"var\"    varOrConst(45) # \"const\"    ```- Array and seq indexing can now use the builtin ``^`` operator to access  things from backwards: ``a[^1]`` is like Python's ``a[-1]``.- A first version of the specification and implementation of the overloading  of the assignment operator has arrived!- ``system.len`` for strings and sequences now returns 0 for nil.- A single underscore can now be used to discard values when unpacking tuples:    ```nim    let (path, _, _) = os.splitFile(\"path/file.ext\")    ```- ``marshal.$$`` and ``marshal.to`` can be executed at compile-time.- Interoperability with C++ improved tremendously; C++'s templates and  operators can be wrapped directly. See  [this](0.11.0/nimc.html#additional-features-importcpp-pragma)  for more information.- ``macros.getType`` can be used to query an AST's type at compile-time. This  enables more powerful macros, for instance *currying* can now be done with  a macro.Library additions------------------ ``reversed`` proc added to the ``unicode`` module.- Added multipart param to httpclient's ``post`` and ``postContent`` together  with a ``newMultipartData`` proc.- Added `%*` operator for JSON.- The compiler is now available as Nimble package for c2nim.- Added ``..^`` and ``..<`` templates to system so that the rather annoying  space between ``.. <`` and ``.. ^`` is not necessary anymore.- Added ``system.xlen`` for strings and sequences to get back the old ``len``  operation that doesn't check for ``nil`` for efficiency.- Added sexp.nim to parse and generate sexp.Bugfixes--------- Fixed internal compiler error when using ``char()`` in an echo call  ([#1788](https://github.com/Araq/Nim/issues/1788)).- Fixed Windows cross-compilation on Linux.- Overload resolution now works for types distinguished only by a  ``static[int]`` param  ([#1056](https://github.com/Araq/Nim/issues/1056)).- Other fixes relating to generic types and static params.- Fixed some compiler crashes with unnamed tuples  ([#1774](https://github.com/Araq/Nim/issues/1774)).- Fixed ``channels.tryRecv`` blocking  ([#1816](https://github.com/Araq/Nim/issues/1816)).- Fixed generic instantiation errors with ``typedesc``  ([#419](https://github.com/Araq/Nim/issues/419)).- Fixed generic regression where the compiler no longer detected constant  expressions properly ([#544](https://github.com/Araq/Nim/issues/544)).- Fixed internal error with generic proc using ``static[T]`` in a specific  way ([#1049](https://github.com/Araq/Nim/issues/1049)).- More fixes relating to generics ([#1820](https://github.com/Araq/Nim/issues/1820),  [#1050](https://github.com/Araq/Nim/issues/1050),  [#1859](https://github.com/Araq/Nim/issues/1859),  [#1858](https://github.com/Araq/Nim/issues/1858)).- Fixed httpclient to properly encode queries.- Many fixes to the ``uri`` module.- Async sockets are now closed on error.- Fixes to httpclient's handling of multipart data.- Fixed GC segfaults with asynchronous sockets  ([#1796](https://github.com/Araq/Nim/issues/1796)).- Added more versions to openssl's DLL version list  ([076f993](https://github.com/Araq/Nim/commit/076f993)).- Fixed shallow copy in iterators being broken  ([#1803](https://github.com/Araq/Nim/issues/1803)).- ``nil`` can now be inserted into tables with the ``db_sqlite`` module  ([#1866](https://github.com/Araq/Nim/issues/1866)).- Fixed \"Incorrect assembler generated\"  ([#1907](https://github.com/Araq/Nim/issues/1907))- Fixed \"Expression templates that define macros are unusable in some contexts\"  ([#1903](https://github.com/Araq/Nim/issues/1903))- Fixed \"a second level generic subclass causes the compiler to crash\"  ([#1919](https://github.com/Araq/Nim/issues/1919))- Fixed \"nim 0.10.2 generates invalid AsyncHttpClient C code for MSVC \"  ([#1901](https://github.com/Araq/Nim/issues/1901))- Fixed \"1 shl n produces wrong C code\"  ([#1928](https://github.com/Araq/Nim/issues/1928))- Fixed \"Internal error on tuple yield\"  ([#1838](https://github.com/Araq/Nim/issues/1838))- Fixed \"ICE with template\"  ([#1915](https://github.com/Araq/Nim/issues/1915))- Fixed \"include the tool directory in the installer as it is required by koch\"  ([#1947](https://github.com/Araq/Nim/issues/1947))- Fixed \"Can't compile if file location contains spaces on Windows\"  ([#1955](https://github.com/Araq/Nim/issues/1955))- Fixed \"List comprehension macro only supports infix checks as guards\"  ([#1920](https://github.com/Araq/Nim/issues/1920))- Fixed \"wrong field names of compatible tuples in generic types\"  ([#1910](https://github.com/Araq/Nim/issues/1910))- Fixed \"Macros within templates no longer work as expected\"  ([#1944](https://github.com/Araq/Nim/issues/1944))- Fixed \"Compiling for Standalone AVR broken in 0.10.2\"  ([#1964](https://github.com/Araq/Nim/issues/1964))- Fixed \"Compiling for Standalone AVR broken in 0.10.2\"  ([#1964](https://github.com/Araq/Nim/issues/1964))- Fixed \"Code generation for mitems with tuple elements\"  ([#1833](https://github.com/Araq/Nim/issues/1833))- Fixed \"httpclient.HttpMethod should not be an enum\"  ([#1962](https://github.com/Araq/Nim/issues/1962))- Fixed \"terminal / eraseScreen() throws an OverflowError\"  ([#1906](https://github.com/Araq/Nim/issues/1906))- Fixed \"setControlCHook(nil) disables registered quit procs\"  ([#1546](https://github.com/Araq/Nim/issues/1546))- Fixed \"Unexpected idetools behaviour\"  ([#325](https://github.com/Araq/Nim/issues/325))- Fixed \"Unused lifted lambda does not compile\"  ([#1642](https://github.com/Araq/Nim/issues/1642))- Fixed \"'low' and 'high' don't work with cstring asguments\"  ([#2030](https://github.com/Araq/Nim/issues/2030))- Fixed \"Converting to int does not round in JS backend\"  ([#1959](https://github.com/Araq/Nim/issues/1959))- Fixed \"Internal error genRecordField 2 when adding region to pointer.\"  ([#2039](https://github.com/Araq/Nim/issues/2039))- Fixed \"Macros fail to compile when compiled with --os:standalone\"  ([#2041](https://github.com/Araq/Nim/issues/2041))- Fixed \"Reading from {.compileTime.} variables can cause code generation to fail\"  ([#2022](https://github.com/Araq/Nim/issues/2022))- Fixed \"Passing overloaded symbols to templates fails inside generic procedures\"  ([#1988](https://github.com/Araq/Nim/issues/1988))- Fixed \"Compiling iterator with object assignment in release mode causes \"var not init\"\"  ([#2023](https://github.com/Araq/Nim/issues/2023))- Fixed \"calling a large number of macros doing some computation fails\"  ([#1989](https://github.com/Araq/Nim/issues/1989))- Fixed \"Can't get Koch to install nim under Windows\"  ([#2061](https://github.com/Araq/Nim/issues/2061))- Fixed \"Template with two stmt parameters segfaults compiler\"  ([#2057](https://github.com/Araq/Nim/issues/2057))- Fixed \"`noSideEffect` not affected by `echo`\"  ([#2011](https://github.com/Araq/Nim/issues/2011))- Fixed \"Compiling with the cpp backend ignores --passc\"  ([#1601](https://github.com/Araq/Nim/issues/1601))- Fixed \"Put untyped procedure parameters behind the experimental pragma\"  ([#1956](https://github.com/Araq/Nim/issues/1956))- Fixed \"generic regression\"  ([#2073](https://github.com/Araq/Nim/issues/2073))- Fixed \"generic regression\"  ([#2073](https://github.com/Araq/Nim/issues/2073))- Fixed \"Regression in template lookup with generics\"  ([#2004](https://github.com/Araq/Nim/issues/2004))- Fixed \"GC's growObj is wrong for edge cases\"  ([#2070](https://github.com/Araq/Nim/issues/2070))- Fixed \"Compiler internal error when creating an array out of a typeclass\"  ([#1131](https://github.com/Araq/Nim/issues/1131))- Fixed \"GC's growObj is wrong for edge cases\"  ([#2070](https://github.com/Araq/Nim/issues/2070))- Fixed \"Invalid Objective-C code generated when calling class method\"  ([#2068](https://github.com/Araq/Nim/issues/2068))- Fixed \"walkDirRec Error\"  ([#2116](https://github.com/Araq/Nim/issues/2116))- Fixed \"Typo in code causes compiler SIGSEGV in evalAtCompileTime\"  ([#2113](https://github.com/Araq/Nim/issues/2113))- Fixed \"Regression on exportc\"  ([#2118](https://github.com/Araq/Nim/issues/2118))- Fixed \"Error message\"  ([#2102](https://github.com/Araq/Nim/issues/2102))- Fixed \"hint[path] = off not working in nim.cfg\"  ([#2103](https://github.com/Araq/Nim/issues/2103))- Fixed \"compiler crashes when getting a tuple from a sequence of generic tuples\"  ([#2121](https://github.com/Araq/Nim/issues/2121))- Fixed \"nim check hangs with when\"  ([#2123](https://github.com/Araq/Nim/issues/2123))- Fixed \"static[T] param in nested type resolve/caching issue\"  ([#2125](https://github.com/Araq/Nim/issues/2125))- Fixed \"repr should display ``\\0``\"  ([#2124](https://github.com/Araq/Nim/issues/2124))- Fixed \"'nim check' never ends in case of recursive dependency \"  ([#2051](https://github.com/Araq/Nim/issues/2051))- Fixed \"From macros: Error: unhandled exception: sons is not accessible\"  ([#2167](https://github.com/Araq/Nim/issues/2167))- Fixed \"`fieldPairs` doesn't work inside templates\"  ([#1902](https://github.com/Araq/Nim/issues/1902))- Fixed \"fields iterator misbehavior on break statement\"  ([#2134](https://github.com/Araq/Nim/issues/2134))- Fixed \"Fix for compiler not building anymore since #c3244ef1ff\"  ([#2193](https://github.com/Araq/Nim/issues/2193))- Fixed \"JSON parser fails in cpp output mode\"  ([#2199](https://github.com/Araq/Nim/issues/2199))- Fixed \"macros.getType mishandles void return\"  ([#2211](https://github.com/Araq/Nim/issues/2211))- Fixed \"Regression involving templates instantiated within generics\"  ([#2215](https://github.com/Araq/Nim/issues/2215))- Fixed \"\"Error: invalid type\" for 'not nil' on generic type.\"  ([#2216](https://github.com/Araq/Nim/issues/2216))- Fixed \"--threads:on breaks async\"  ([#2074](https://github.com/Araq/Nim/issues/2074))- Fixed \"Type mismatch not always caught, can generate bad code for C backend.\"  ([#2169](https://github.com/Araq/Nim/issues/2169))- Fixed \"Failed C compilation when storing proc to own type in object\"  ([#2233](https://github.com/Araq/Nim/issues/2233))- Fixed \"Unknown line/column number in constant declaration type conversion error\"  ([#2252](https://github.com/Araq/Nim/issues/2252))- Fixed \"Adding {.compile.} fails if nimcache already exists.\"  ([#2247](https://github.com/Araq/Nim/issues/2247))- Fixed \"Two different type names generated for a single type (C backend)\"  ([#2250](https://github.com/Araq/Nim/issues/2250))- Fixed \"Ambiguous call when it should not be\"  ([#2229](https://github.com/Araq/Nim/issues/2229))- Fixed \"Make sure we can load root urls\"  ([#2227](https://github.com/Araq/Nim/issues/2227))- Fixed \"Failure to slice a string with an int subrange type\"  ([#794](https://github.com/Araq/Nim/issues/794))- Fixed \"documentation error\"  ([#2205](https://github.com/Araq/Nim/issues/2205))- Fixed \"Code growth when using `const`\"  ([#1940](https://github.com/Araq/Nim/issues/1940))- Fixed \"Instances of generic types confuse overload resolution\"  ([#2220](https://github.com/Araq/Nim/issues/2220))- Fixed \"Compiler error when initializing sdl2's EventType\"  ([#2316](https://github.com/Araq/Nim/issues/2316))- Fixed \"Parallel disjoint checking can't handle `<`, `items`, or arrays\"  ([#2287](https://github.com/Araq/Nim/issues/2287))- Fixed \"Strings aren't copied in parallel loop\"  ([#2286](https://github.com/Araq/Nim/issues/2286))- Fixed \"JavaScript compiler crash with tables\"  ([#2298](https://github.com/Araq/Nim/issues/2298))- Fixed \"Range checker too restrictive\"  ([#1845](https://github.com/Araq/Nim/issues/1845))- Fixed \"Failure to slice a string with an int subrange type\"  ([#794](https://github.com/Araq/Nim/issues/794))- Fixed \"Remind user when compiling in debug mode\"  ([#1868](https://github.com/Araq/Nim/issues/1868))- Fixed \"Compiler user guide has jumbled options/commands.\"  ([#1819](https://github.com/Araq/Nim/issues/1819))- Fixed \"using `method`: 1 in a objects constructor fails when compiling\"  ([#1791](https://github.com/Araq/Nim/issues/1791))", "content_with_meta": "---\ntitle: \"Version 0.11.0 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWith this release we are one step closer to reaching version 1.0 and by\nextension the persistence of the Nim specification. As mentioned in the\nprevious release notes, starting with version 1.0, we will not be introducing\nany more breaking changes to Nim.\n\nThe *language* itself is very close to 1.0, the primary area that requires\nmore work is the standard library.\n\nTake a look at the [download]({{site.baseurl}}/install.html) page for binaries (Windows-only)\nand 0.11.0 snapshots of the source code. The Windows installer now also\nincludes [Aporia](https://github.com/nim-lang/aporia),\n[Nimble](https://github.com/nim-lang/nimble) and other useful tools to get\nyou started with Nim.\n\n## What's left to be done\n\nThe 1.0 release is expected by the end of this year. Rumors say it will be in\nsummer 2015. What's left:\n\n* Bug fixes, bug fixes, bug fixes, in particular:\n  - The remaining bugs of the lambda lifting pass that is responsible to enable\n    closures and closure iterators need to be fixed.\n  - ``concept`` needs to be refined, a nice name for the feature is not enough.\n  - Destructors need to be refined.\n  - ``static[T]`` needs to be fixed.\n  - Finish the implementation of the 'parallel' statement.\n* ``immediate`` templates and macros will be deprecated as these will soon be\n  completely unnecessary, instead the ``typed`` or ``untyped`` metatypes can\n  be used.\n* More of the standard library should be moved to Nimble packages and what's\n  left should use the features we have for concurrency and parallelism.\n\n\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- Parameter names are finally properly ``gensym``'ed. This can break\n  templates though that used to rely on the fact that they are not.\n  (Bug #1915.) This means this doesn't compile anymore:\n\n    ```nim\n\n    template doIt(body: stmt) {.immediate.} =\n      # this used to inject the 'str' parameter:\n      proc res(str: string) =\n        body\n\n    doIt:\n      echo str # Error: undeclared identifier: 'str'\n    ```\n\n  This used to inject the ``str`` parameter into the scope of the body.\n  Declare the ``doIt`` template as ``immediate, dirty`` to get the old\n  behaviour.\n- Tuple field names are not ignored anymore, this caused too many problems\n  in practice so now the behaviour is as it was for version 0.9.6: If field\n  names exist for the tuple type, they are checked.\n- ``logging.level`` and ``logging.handlers`` are no longer exported.\n  ``addHandler``, ``getHandlers``, ``setLogFilter`` and ``getLogFilter``\n  should be used instead.\n- ``nim idetools`` has been replaced by a separate\n  tool [nimsuggest](0.11.0/nimsuggest.html).\n- *arrow like* operators are not right associative anymore and are required\n  to end with either ``->``, ``~>`` or\n  ``=>``, not just ``>``. Examples of operators still considered arrow like:\n  ``->``, ``==>``, ``+=>``. On the other hand, the following operators are now\n  considered regular operators again: ``|>``, ``-+>``, etc.\n- Typeless parameters are now only allowed in templates and macros. The old\n  way turned out to be too error-prone.\n- The 'addr' and 'type' operators are now parsed as unary function\n  application. This means ``type(x).name`` is now parsed as ``(type(x)).name``\n  and not as ``type((x).name)``. Note that this also affects the AST\n  structure; for immediate macro parameters ``nkCall('addr', 'x')`` is\n  produced instead of ``nkAddr('x')``.\n- ``concept`` is now a keyword and is used instead of ``generic``.\n- The ``inc``, ``dec``, ``+=``, ``-=`` builtins now produce OverflowError\n  exceptions. This means code like the following:\n\n    ```nim\n    var x = low(T)\n    while x <= high(T):\n      echo x\n      inc x\n    ```\n\n    Needs to be replaced by something like this:\n\n    ```nim\n    var x = low(T).int\n    while x <= high(T).int:\n      echo x.T\n      inc x\n    ```\n\n- **Negative indexing for slicing does not work anymore!** Instead\n  of ``a[0.. -1]`` you can\n  use ``a[0.. ^1]``. This also works with accessing a single\n  element ``a[^1]``. Note that we cannot detect this reliably as it is\n  determined at **runtime** whether negative indexing is used!\n  ``a[0.. -1]`` now produces the empty string/sequence.\n- The compiler now warns about code like ``foo +=1`` which uses inconsistent\n  spacing around binary operators. Later versions of the language will parse\n  these as unary operators instead so that ``echo $foo`` finally can do what\n  people expect it to do.\n- ``system.untyped`` and ``system.typed`` have been introduced as aliases\n  for ``expr`` and ``stmt``. The new names capture the semantics much better\n  and most likely  ``expr`` and ``stmt`` will be deprecated in favor of the\n  new names.\n- The ``split`` method in module ``re`` has changed. It now handles the case\n  of matches having a length of 0, and empty strings being yielded from the\n  iterator. A notable change might be that a pattern being matched at the\n  beginning and end of a string, will result in an empty string being produced\n  at the start and the end of the iterator.\n- The compiler and nimsuggest now count columns starting with 1, not 0 for\n  consistency with the rest of the world.\n\n\nLanguage Additions\n------------------\n\n- For empty ``case object`` branches ``discard`` can finally be used instead\n  of ``nil``.\n- Automatic dereferencing is now done for the first argument of a routine\n  call if overloading resolution produces no match otherwise. This feature\n  has to be enabled with\n  the [experimental](0.11.0/manual.html#pragmas-experimental-pragma) pragma.\n- Objects that do not use inheritance nor ``case`` can be put into ``const``\n  sections. This means that finally this is possible and produces rather\n  nice code:\n\n    ```nim\n    import tables\n\n    const\n      foo = {\"ah\": \"finally\", \"this\": \"is\", \"possible.\": \"nice!\"}.toTable()\n    ```\n\n- Ordinary parameters can follow after a varargs parameter. This means the\n  following is finally accepted by the compiler:\n\n    ```nim\n    template takesBlock(a, b: int, x: varargs[expr]; blck: stmt) =\n      blck\n      echo a, b\n\n    takesBlock 1, 2, \"some\", 0.90, \"random stuff\":\n      echo \"yay\"\n    ```\n\n- Overloading by 'var T' is now finally possible:\n\n    ```nim\n    proc varOrConst(x: var int) = echo \"var\"\n    proc varOrConst(x: int) = echo \"const\"\n\n    var x: int\n    varOrConst(x) # \"var\"\n    varOrConst(45) # \"const\"\n    ```\n\n- Array and seq indexing can now use the builtin ``^`` operator to access\n  things from backwards: ``a[^1]`` is like Python's ``a[-1]``.\n- A first version of the specification and implementation of the overloading\n  of the assignment operator has arrived!\n- ``system.len`` for strings and sequences now returns 0 for nil.\n\n- A single underscore can now be used to discard values when unpacking tuples:\n\n    ```nim\n    let (path, _, _) = os.splitFile(\"path/file.ext\")\n    ```\n\n- ``marshal.$$`` and ``marshal.to`` can be executed at compile-time.\n- Interoperability with C++ improved tremendously; C++'s templates and\n  operators can be wrapped directly. See\n  [this](0.11.0/nimc.html#additional-features-importcpp-pragma)\n  for more information.\n- ``macros.getType`` can be used to query an AST's type at compile-time. This\n  enables more powerful macros, for instance *currying* can now be done with\n  a macro.\n\n\nLibrary additions\n-----------------\n\n- ``reversed`` proc added to the ``unicode`` module.\n- Added multipart param to httpclient's ``post`` and ``postContent`` together\n  with a ``newMultipartData`` proc.\n- Added `%*` operator for JSON.\n- The compiler is now available as Nimble package for c2nim.\n- Added ``..^`` and ``..<`` templates to system so that the rather annoying\n  space between ``.. <`` and ``.. ^`` is not necessary anymore.\n- Added ``system.xlen`` for strings and sequences to get back the old ``len``\n  operation that doesn't check for ``nil`` for efficiency.\n- Added sexp.nim to parse and generate sexp.\n\n\nBugfixes\n--------\n\n- Fixed internal compiler error when using ``char()`` in an echo call\n  ([#1788](https://github.com/Araq/Nim/issues/1788)).\n- Fixed Windows cross-compilation on Linux.\n- Overload resolution now works for types distinguished only by a\n  ``static[int]`` param\n  ([#1056](https://github.com/Araq/Nim/issues/1056)).\n- Other fixes relating to generic types and static params.\n- Fixed some compiler crashes with unnamed tuples\n  ([#1774](https://github.com/Araq/Nim/issues/1774)).\n- Fixed ``channels.tryRecv`` blocking\n  ([#1816](https://github.com/Araq/Nim/issues/1816)).\n- Fixed generic instantiation errors with ``typedesc``\n  ([#419](https://github.com/Araq/Nim/issues/419)).\n- Fixed generic regression where the compiler no longer detected constant\n  expressions properly ([#544](https://github.com/Araq/Nim/issues/544)).\n- Fixed internal error with generic proc using ``static[T]`` in a specific\n  way ([#1049](https://github.com/Araq/Nim/issues/1049)).\n- More fixes relating to generics ([#1820](https://github.com/Araq/Nim/issues/1820),\n  [#1050](https://github.com/Araq/Nim/issues/1050),\n  [#1859](https://github.com/Araq/Nim/issues/1859),\n  [#1858](https://github.com/Araq/Nim/issues/1858)).\n- Fixed httpclient to properly encode queries.\n- Many fixes to the ``uri`` module.\n- Async sockets are now closed on error.\n- Fixes to httpclient's handling of multipart data.\n- Fixed GC segfaults with asynchronous sockets\n  ([#1796](https://github.com/Araq/Nim/issues/1796)).\n- Added more versions to openssl's DLL version list\n  ([076f993](https://github.com/Araq/Nim/commit/076f993)).\n- Fixed shallow copy in iterators being broken\n  ([#1803](https://github.com/Araq/Nim/issues/1803)).\n- ``nil`` can now be inserted into tables with the ``db_sqlite`` module\n  ([#1866](https://github.com/Araq/Nim/issues/1866)).\n- Fixed \"Incorrect assembler generated\"\n  ([#1907](https://github.com/Araq/Nim/issues/1907))\n- Fixed \"Expression templates that define macros are unusable in some contexts\"\n  ([#1903](https://github.com/Araq/Nim/issues/1903))\n- Fixed \"a second level generic subclass causes the compiler to crash\"\n  ([#1919](https://github.com/Araq/Nim/issues/1919))\n- Fixed \"nim 0.10.2 generates invalid AsyncHttpClient C code for MSVC \"\n  ([#1901](https://github.com/Araq/Nim/issues/1901))\n- Fixed \"1 shl n produces wrong C code\"\n  ([#1928](https://github.com/Araq/Nim/issues/1928))\n- Fixed \"Internal error on tuple yield\"\n  ([#1838](https://github.com/Araq/Nim/issues/1838))\n- Fixed \"ICE with template\"\n  ([#1915](https://github.com/Araq/Nim/issues/1915))\n- Fixed \"include the tool directory in the installer as it is required by koch\"\n  ([#1947](https://github.com/Araq/Nim/issues/1947))\n- Fixed \"Can't compile if file location contains spaces on Windows\"\n  ([#1955](https://github.com/Araq/Nim/issues/1955))\n- Fixed \"List comprehension macro only supports infix checks as guards\"\n  ([#1920](https://github.com/Araq/Nim/issues/1920))\n- Fixed \"wrong field names of compatible tuples in generic types\"\n  ([#1910](https://github.com/Araq/Nim/issues/1910))\n- Fixed \"Macros within templates no longer work as expected\"\n  ([#1944](https://github.com/Araq/Nim/issues/1944))\n- Fixed \"Compiling for Standalone AVR broken in 0.10.2\"\n  ([#1964](https://github.com/Araq/Nim/issues/1964))\n- Fixed \"Compiling for Standalone AVR broken in 0.10.2\"\n  ([#1964](https://github.com/Araq/Nim/issues/1964))\n- Fixed \"Code generation for mitems with tuple elements\"\n  ([#1833](https://github.com/Araq/Nim/issues/1833))\n- Fixed \"httpclient.HttpMethod should not be an enum\"\n  ([#1962](https://github.com/Araq/Nim/issues/1962))\n- Fixed \"terminal / eraseScreen() throws an OverflowError\"\n  ([#1906](https://github.com/Araq/Nim/issues/1906))\n- Fixed \"setControlCHook(nil) disables registered quit procs\"\n  ([#1546](https://github.com/Araq/Nim/issues/1546))\n- Fixed \"Unexpected idetools behaviour\"\n  ([#325](https://github.com/Araq/Nim/issues/325))\n- Fixed \"Unused lifted lambda does not compile\"\n  ([#1642](https://github.com/Araq/Nim/issues/1642))\n- Fixed \"'low' and 'high' don't work with cstring asguments\"\n  ([#2030](https://github.com/Araq/Nim/issues/2030))\n- Fixed \"Converting to int does not round in JS backend\"\n  ([#1959](https://github.com/Araq/Nim/issues/1959))\n- Fixed \"Internal error genRecordField 2 when adding region to pointer.\"\n  ([#2039](https://github.com/Araq/Nim/issues/2039))\n- Fixed \"Macros fail to compile when compiled with --os:standalone\"\n  ([#2041](https://github.com/Araq/Nim/issues/2041))\n- Fixed \"Reading from {.compileTime.} variables can cause code generation to fail\"\n  ([#2022](https://github.com/Araq/Nim/issues/2022))\n- Fixed \"Passing overloaded symbols to templates fails inside generic procedures\"\n  ([#1988](https://github.com/Araq/Nim/issues/1988))\n- Fixed \"Compiling iterator with object assignment in release mode causes \"var not init\"\"\n  ([#2023](https://github.com/Araq/Nim/issues/2023))\n- Fixed \"calling a large number of macros doing some computation fails\"\n  ([#1989](https://github.com/Araq/Nim/issues/1989))\n- Fixed \"Can't get Koch to install nim under Windows\"\n  ([#2061](https://github.com/Araq/Nim/issues/2061))\n- Fixed \"Template with two stmt parameters segfaults compiler\"\n  ([#2057](https://github.com/Araq/Nim/issues/2057))\n- Fixed \"`noSideEffect` not affected by `echo`\"\n  ([#2011](https://github.com/Araq/Nim/issues/2011))\n- Fixed \"Compiling with the cpp backend ignores --passc\"\n  ([#1601](https://github.com/Araq/Nim/issues/1601))\n- Fixed \"Put untyped procedure parameters behind the experimental pragma\"\n  ([#1956](https://github.com/Araq/Nim/issues/1956))\n- Fixed \"generic regression\"\n  ([#2073](https://github.com/Araq/Nim/issues/2073))\n- Fixed \"generic regression\"\n  ([#2073](https://github.com/Araq/Nim/issues/2073))\n- Fixed \"Regression in template lookup with generics\"\n  ([#2004](https://github.com/Araq/Nim/issues/2004))\n- Fixed \"GC's growObj is wrong for edge cases\"\n  ([#2070](https://github.com/Araq/Nim/issues/2070))\n- Fixed \"Compiler internal error when creating an array out of a typeclass\"\n  ([#1131](https://github.com/Araq/Nim/issues/1131))\n- Fixed \"GC's growObj is wrong for edge cases\"\n  ([#2070](https://github.com/Araq/Nim/issues/2070))\n- Fixed \"Invalid Objective-C code generated when calling class method\"\n  ([#2068](https://github.com/Araq/Nim/issues/2068))\n- Fixed \"walkDirRec Error\"\n  ([#2116](https://github.com/Araq/Nim/issues/2116))\n- Fixed \"Typo in code causes compiler SIGSEGV in evalAtCompileTime\"\n  ([#2113](https://github.com/Araq/Nim/issues/2113))\n- Fixed \"Regression on exportc\"\n  ([#2118](https://github.com/Araq/Nim/issues/2118))\n- Fixed \"Error message\"\n  ([#2102](https://github.com/Araq/Nim/issues/2102))\n- Fixed \"hint[path] = off not working in nim.cfg\"\n  ([#2103](https://github.com/Araq/Nim/issues/2103))\n- Fixed \"compiler crashes when getting a tuple from a sequence of generic tuples\"\n  ([#2121](https://github.com/Araq/Nim/issues/2121))\n- Fixed \"nim check hangs with when\"\n  ([#2123](https://github.com/Araq/Nim/issues/2123))\n- Fixed \"static[T] param in nested type resolve/caching issue\"\n  ([#2125](https://github.com/Araq/Nim/issues/2125))\n- Fixed \"repr should display ``\\0``\"\n  ([#2124](https://github.com/Araq/Nim/issues/2124))\n- Fixed \"'nim check' never ends in case of recursive dependency \"\n  ([#2051](https://github.com/Araq/Nim/issues/2051))\n- Fixed \"From macros: Error: unhandled exception: sons is not accessible\"\n  ([#2167](https://github.com/Araq/Nim/issues/2167))\n- Fixed \"`fieldPairs` doesn't work inside templates\"\n  ([#1902](https://github.com/Araq/Nim/issues/1902))\n- Fixed \"fields iterator misbehavior on break statement\"\n  ([#2134](https://github.com/Araq/Nim/issues/2134))\n- Fixed \"Fix for compiler not building anymore since #c3244ef1ff\"\n  ([#2193](https://github.com/Araq/Nim/issues/2193))\n- Fixed \"JSON parser fails in cpp output mode\"\n  ([#2199](https://github.com/Araq/Nim/issues/2199))\n- Fixed \"macros.getType mishandles void return\"\n  ([#2211](https://github.com/Araq/Nim/issues/2211))\n- Fixed \"Regression involving templates instantiated within generics\"\n  ([#2215](https://github.com/Araq/Nim/issues/2215))\n- Fixed \"\"Error: invalid type\" for 'not nil' on generic type.\"\n  ([#2216](https://github.com/Araq/Nim/issues/2216))\n- Fixed \"--threads:on breaks async\"\n  ([#2074](https://github.com/Araq/Nim/issues/2074))\n- Fixed \"Type mismatch not always caught, can generate bad code for C backend.\"\n  ([#2169](https://github.com/Araq/Nim/issues/2169))\n- Fixed \"Failed C compilation when storing proc to own type in object\"\n  ([#2233](https://github.com/Araq/Nim/issues/2233))\n- Fixed \"Unknown line/column number in constant declaration type conversion error\"\n  ([#2252](https://github.com/Araq/Nim/issues/2252))\n- Fixed \"Adding {.compile.} fails if nimcache already exists.\"\n  ([#2247](https://github.com/Araq/Nim/issues/2247))\n- Fixed \"Two different type names generated for a single type (C backend)\"\n  ([#2250](https://github.com/Araq/Nim/issues/2250))\n- Fixed \"Ambiguous call when it should not be\"\n  ([#2229](https://github.com/Araq/Nim/issues/2229))\n- Fixed \"Make sure we can load root urls\"\n  ([#2227](https://github.com/Araq/Nim/issues/2227))\n- Fixed \"Failure to slice a string with an int subrange type\"\n  ([#794](https://github.com/Araq/Nim/issues/794))\n- Fixed \"documentation error\"\n  ([#2205](https://github.com/Araq/Nim/issues/2205))\n- Fixed \"Code growth when using `const`\"\n  ([#1940](https://github.com/Araq/Nim/issues/1940))\n- Fixed \"Instances of generic types confuse overload resolution\"\n  ([#2220](https://github.com/Araq/Nim/issues/2220))\n- Fixed \"Compiler error when initializing sdl2's EventType\"\n  ([#2316](https://github.com/Araq/Nim/issues/2316))\n- Fixed \"Parallel disjoint checking can't handle `<`, `items`, or arrays\"\n  ([#2287](https://github.com/Araq/Nim/issues/2287))\n- Fixed \"Strings aren't copied in parallel loop\"\n  ([#2286](https://github.com/Araq/Nim/issues/2286))\n- Fixed \"JavaScript compiler crash with tables\"\n  ([#2298](https://github.com/Araq/Nim/issues/2298))\n- Fixed \"Range checker too restrictive\"\n  ([#1845](https://github.com/Araq/Nim/issues/1845))\n- Fixed \"Failure to slice a string with an int subrange type\"\n  ([#794](https://github.com/Araq/Nim/issues/794))\n- Fixed \"Remind user when compiling in debug mode\"\n  ([#1868](https://github.com/Araq/Nim/issues/1868))\n- Fixed \"Compiler user guide has jumbled options/commands.\"\n  ([#1819](https://github.com/Araq/Nim/issues/1819))\n- Fixed \"using `method`: 1 in a objects constructor fails when compiling\"\n  ([#1791](https://github.com/Araq/Nim/issues/1791))\n", "tags": ["nim", "python"], "published_at": "", "id": 19}, {"title": "Version 0.11.2 released", "slug": "version-released", "content": "This is just a bugfix release that fixes the most pressing regressions weintroduced with version 0.11.0. The way types are computed waschanged significantly causing all sort of problems. Sorry for theinconvenience; we grew overconfident our large test suite would prevent thesethings.", "content_with_meta": "---\ntitle: \"Version 0.11.2 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nThis is just a bugfix release that fixes the most pressing regressions we\nintroduced with version 0.11.0. The way types are computed was\nchanged significantly causing all sort of problems. Sorry for the\ninconvenience; we grew overconfident our large test suite would prevent these\nthings.\n", "tags": ["nim", "python"], "published_at": "", "id": 20}, {"title": "First Nim conference", "slug": "first-nim-conference", "content": "<div class=\"center\">  <img src=\"{{site.baseurl}}/assets/zeo/banner.jpg\" alt=\"First Nim conference in Ukraine!\" width=\"500\"/></div>This Autumn you have the unique opportunity to take part in the first Nim eventheld in Kyiv and to meet the creator of the Nim programming language -Andreas Rumpf. The event is hosted by Zeo Alliance and is taking place between14-15 November 2015 in Kyiv, Ukraine.During the workshop you will learn:- The basics of the language including its safe and unsafe subsets.- How to use Nim to develop web applications.- How Nim's meta programming capabilities make Nim the ultimate glue language,  excellent at interoperability with C++, JavaScript, Java and others.- Games in Nim and the ability to rapidly prototype without sacrificing speed.Registration is free, but the number of places is limited. More detailscan be found [here](https://nimworkshop.splashthat.com/).", "content_with_meta": "---\ntitle: \"First Nim conference\"\nexcerpt: \"Learn about the first Nim workshop in Kyiv.\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\n<div class=\"center\">\n  <img src=\"{{site.baseurl}}/assets/zeo/banner.jpg\" alt=\"First Nim conference in Ukraine!\" width=\"500\"/>\n</div>\n\nThis Autumn you have the unique opportunity to take part in the first Nim event\nheld in Kyiv and to meet the creator of the Nim programming language -\nAndreas Rumpf. The event is hosted by Zeo Alliance and is taking place between\n14-15 November 2015 in Kyiv, Ukraine.\n\nDuring the workshop you will learn:\n\n- The basics of the language including its safe and unsafe subsets.\n- How to use Nim to develop web applications.\n- How Nim's meta programming capabilities make Nim the ultimate glue language,\n  excellent at interoperability with C++, JavaScript, Java and others.\n- Games in Nim and the ability to rapidly prototype without sacrificing speed.\n\nRegistration is free, but the number of places is limited. More details\ncan be found [here](https://nimworkshop.splashthat.com/).\n", "tags": ["nim", "python"], "published_at": "", "id": 21}, {"title": "Version 0.12.0 released", "slug": "version-released", "content": "The Nim community of developers is proud to announce the new version of theNim compiler. This has been a long time coming as the last release has beenmade over 5 months ago!This release includes some changes which affect backwards compatibility,one major change is that now the hash table ``[]`` operators now raise a``KeyError`` exception when the key does not exist.Some of the more exciting new features include: the ability to unpack tuplesin any assignment context, the introduction of[NimScript]({{site.baseurl}}/docs/nims.html),and improvements to the type inference of lambdas.There are of course many many many bug fixes included with this release.We are getting closer and closer to a 1.0 release and are hoping that onlya few 0.x releases will be necessary before we are happy to release version 1.0.As always you can download the latest version of Nim from the[download]({{site.baseurl}}/install.html) page.For a more detailed list of changes look below. Some of the upcoming breakingchanges are also documented in this forum[thread](http://forum.nim-lang.org/t/1708).Changes affecting backwards compatibility------------------------------------------ The regular expression modules, ``re`` and ``nre`` now depend on version  8.36 of PCRE. If you have an older version you may see a message similar  to ``could not import: pcre_free_study`` output when you start your  program. See [this issue](https://github.com/docopt/docopt.nim/issues/13)  for more information.- ``tables.[]``, ``strtabs.[]``, ``critbits.[]`` **now raise**  the ``KeyError`` **exception when the key does not exist**! Use the  new ``getOrDefault`` instead to get the old behaviour. Compile all your  code with ``-d:nimTableGet`` to get a listing of where your code  uses ``[]``!- The ``rawsockets`` module has been renamed to ``nativesockets`` to avoid  confusion with TCP/IP raw sockets, so ``newNativeSocket`` should be used  instead of ``newRawSocket``.- The ``miliseconds`` property of ``times.TimeInterval`` is now ``milliseconds``.  Code accessing that property is deprecated and code using ``miliseconds``  during object initialization or as a named parameter of ``initInterval()``  will need to be updated.- ``std.logging`` functions no longer do formatting and semantically treat  their arguments just like ``echo`` does. Affected functions: ``log``,  ``debug``, ``info``, ``warn``, ``error``, ``fatal``. Custom subtypes of  ``Logger`` also need to be adjusted accordingly.- Floating point numbers can now look like ``2d`` (float64)  and ``2f`` (float32) which means imports like ``import scene/2d/sprite``  do not work anymore. Instead quotes have to be  used: ``import \"scene/2d/sprite\"``. The former code never was valid Nim.- The Windows API wrapper (``windows.nim``) is now not part of the official  distribution anymore. Instead use the ``oldwinapi`` Nimble package.- There is now a clear distinction between ``--os:standalone``  and ``--gc:none``. So if you use ``--os:standalone`` ensure you also use  ``--gc:none``. ``--os:standalone`` without ``--gc:none`` is now a version  that doesn't depend on any OS but includes the GC. However this version  is currently untested!- All procedures which construct a ``Socket``/``AsyncSocket`` now need to  specify the socket domain, type and protocol. The param name  ``typ: SockType`` (in ``newSocket``/``newAsyncSocket`` procs) was also  renamed to ``sockType``. The param ``af`` in the ``connect`` procs was  removed. This affects ``asyncnet``, ``asyncdispatch``, ``net``, and  ``rawsockets``.- ``varargs[typed]`` and ``varargs[untyped]`` have been refined and now work  as expected. However ``varargs[untyped]`` is not an alias anymore for  ``varargs[expr]``. So if your code breaks for ``varargs[untyped]``, use  ``varargs[expr]`` instead. The same applies to ``varargs[typed]`` vs  ``varargs[stmt]``.- ``sequtils.delete`` doesn't take confusing default arguments anymore.- ``system.free`` was an error-prone alias to ``system.dealloc`` and has  been removed.- ``macros.high`` never worked and the manual says ``high`` cannot be  overloaded, so we removed it with no deprecation cycle.- To use the ``parallel`` statement you now have to  use the ``--experimental`` mode.- Toplevel procs of calling convention ``closure`` never worked reliably  and are now deprecated and will be removed from the language. Instead you  have to insert type conversions  like ``(proc (a, b: int) {.closure.})(myToplevelProc)`` if necessary.- The modules ``libffi``, ``sdl``, ``windows``, ``zipfiles``, ``libzip``,  ``zlib``, ``zzip``, ``dialogs``, ``expat``, ``graphics``, ``libcurl``,  ``sphinx`` have been moved out of the stdlib and are Nimble packages now.- The constant fights between 32 and 64 bit DLLs on Windows have been put to  an end: The standard distribution now ships with 32 and 64 bit versions  of all the DLLs the standard library needs. This means that the following  DLLs are now split into 32 and 64 versions:  * ``pcre.dll``: Split into ``pcre32.dll`` and ``pcre64.dll``.  * ``pdcurses.dll``: Split into ``pdcurses32.dll`` and ``pdcurses64.dll``.  * ``sqlite3.dll``: Split into ``sqlite3_32.dll`` and ``sqlite3_64.dll``.  * ``ssleay32.dll``: Split into ``ssleay32.dll`` and ``ssleay64.dll``.  * ``libeay32.dll``: Split into ``libeay32.dll`` and ``libeay64.dll``.  Compile with ``-d:nimOldDLLs`` to make the stdlib use the old DLL names.- Nim VM now treats objects as ``nkObjConstr`` nodes, and not ``nkPar`` nodes  as it was previously. Macros that generate ``nkPar`` nodes when object is  expected are likely to break. Macros that expect ``nkPar`` nodes to which  objects are passed are likely to break as well.- Base methods now need to be annotated with the ``base`` pragma. This makes  multi methods less error-prone to use with the effect system.- Nim's parser directive ``#!`` is now ``#?`` in order to produce no conflicts  with Unix's ``#!``.- An implicit return type for an iterator is now deprecated. Use ``auto`` if  you want more type inference.- The type ``auto`` is now a \"multi-bind\" metatype, so the following compiles:    ```nim    proc f(x, y: auto): auto =      result = $x & y    echo f(0, \"abc\")    ```- The ``ftpclient`` module is now deprecated in favour of the  ``asyncftpclient`` module.- In sequtils.nim renamed ``repeat`` function to ``cycle`` (concatenating  a sequence by itself the given times), and also introduced ``repeat``,  which repeats an element the given times.- The function ``map`` is moved to sequtils.nim. The inplace ``map`` version  is renamed to ``apply``.- The template ``mapIt`` now doesn't require the result's type parameter.  Also the inplace ``mapIt`` is renamed to ``apply``.- The compiler is now stricter with what is allowed as a case object  discriminator. The following code used to compile but was not supported  completely and so now fails:    ```nim    type        DataType* {.pure.} = enum            Char = 1,            Int8 = 2,            Int16 = 3,            Int32 = 4,            Int64 = 5,            Float32 = 6,            Float64 = 7        DataSeq* = object            case kind* : DataType            of DataType.Char: charSeq* : seq[char]            of DataType.Int8: int8Seq* : seq[int8]            of DataType.Int16: int16Seq* : seq[int16]            of DataType.Int32: int32Seq* : seq[int32]            of DataType.Int64: int64Seq* : seq[int64]            of DataType.Float32: float32Seq* : seq[float32]            of DataType.Float64: float64Seq* : seq[float64]            length* : int    ```Library Additions------------------ The nre module has been added, providing a better interface to PCRE than re.- The ``expandSymlink`` proc has been added to the ``os`` module.- The ``tailDir`` proc has been added to the ``os`` module.- Define ``nimPinToCpu`` to make the ``threadpool`` use explicit thread  affinities. This can speed up or slow down the thread pool; it's up to you  to benchmark it.- ``strutils.formatFloat`` and ``formatBiggestFloat`` do not depend on the C  locale anymore and now take an optional ``decimalSep = '.'`` parameter.- Added ``unicode.lastRune``, ``unicode.graphemeLen``.Compiler Additions------------------- The compiler now supports a new configuration system based on  [NimScript](docs/nims.html).- The compiler finally considers symbol binding rules in templates and  generics for overloaded ``[]``, ``[]=``, ``{}``, ``{}=`` operators  (issue [#2599](https://github.com/nim-lang/Nim/issues/2599)).- The compiler now supports a [bitsize pragma](docs/manual.html#pragmas-bitsize-pragma)  for constructing bitfields.- Added a new ``--reportConceptFailures`` switch for better debugging of  concept related type mismatches. This can also be used to debug  ``system.compiles`` failures.Language Additions------------------- ``system.unsafeAddr`` can be used to access the address of a ``let``  variable or parameter for C interoperability. Since technically this  makes parameters and ``let`` variables mutable, it is considered even more  unsafe than the ordinary ``addr`` builtin.- Added ``macros.getImpl`` that can be used to access the implementation of  a routine or a constant. This allows for example for user-defined inlining  of function calls.- Tuple unpacking finally works in a non-var/let context: ``(x, y) = f()``  is allowed. Note that this doesn't declare ``x`` and ``y`` variables, for  this ``let (x, y) = f()`` still needs to be used.- ``when nimvm`` can now be used for compiletime versions of some code  sections. Click [here](docs/manual.html#when-nimvm-statement) for details.- Usage of the type ``NimNode`` in a proc now implicitly annotates the proc  with ``.compileTime``. This means generics work much better for ``NimNode``.Bugfixes--------- Fixed \"Compiler internal error on iterator it(T: typedesc[Base]) called with it(Child), where Child = object of Base\"  ([#2662](https://github.com/Araq/Nim/issues/2662))- Fixed \"repr() misses base object field in 2nd level derived object\"  ([#2749](https://github.com/Araq/Nim/issues/2749))- Fixed \"nimsuggest doesn't work more than once on the non-main file\"  ([#2694](https://github.com/Araq/Nim/issues/2694))- Fixed \"JS Codegen. Passing arguments by var in certain cases leads to invalid JS.\"  ([#2798](https://github.com/Araq/Nim/issues/2798))- Fixed \"\"check\" proc in unittest.nim prevents the propagation of changes to var parameters.\"  ([#964](https://github.com/Araq/Nim/issues/964))- Fixed \"Excessive letters in integer literals are not an error\"  ([#2523](https://github.com/Araq/Nim/issues/2523))- Fixed \"Unicode dashes as \"lisp'ish\" alternative to hump and snake notation\"  ([#2811](https://github.com/Araq/Nim/issues/2811))- Fixed \"Bad error message when trying to construct an object incorrectly\"  ([#2584](https://github.com/Araq/Nim/issues/2584))- Fixed \"Determination of GC safety of globals is broken \"  ([#2854](https://github.com/Araq/Nim/issues/2854))- Fixed \"v2 gc crashes compiler\"  ([#2687](https://github.com/Araq/Nim/issues/2687))- Fixed \"Compile error using object in const array\"  ([#2774](https://github.com/Araq/Nim/issues/2774))- Fixed \"httpclient async requests with method httpPOST isn't sending Content-Length header\"  ([#2884](https://github.com/Araq/Nim/issues/2884))- Fixed \"Streams module not working with JS backend\"  ([#2148](https://github.com/Araq/Nim/issues/2148))- Fixed \"Sign of certain short constants is wrong\"  ([#1179](https://github.com/Araq/Nim/issues/1179))- Fixed \"Symlinks to directories reported as symlinks to files\"  ([#1985](https://github.com/Araq/Nim/issues/1985))- Fixed \"64-bit literals broken on x86\"  ([#2909](https://github.com/Araq/Nim/issues/2909))- Fixed \"import broken for certain names\"  ([#2904](https://github.com/Araq/Nim/issues/2904))- Fixed \"Invalid UTF-8 strings in JavaScript\"  ([#2917](https://github.com/Araq/Nim/issues/2917))- Fixed \"[JS][Codegen] Initialising object doesn't create unmentioned fields.\"  ([#2617](https://github.com/Araq/Nim/issues/2617))- Fixed \"Table returned from proc computed at compile time is missing keys:\"  ([#2297](https://github.com/Araq/Nim/issues/2297))- Fixed \"Clarify copyright status for some files\"  ([#2949](https://github.com/Araq/Nim/issues/2949))- Fixed \"math.nim: trigonometry: radians to degrees conversion\"  ([#2881](https://github.com/Araq/Nim/issues/2881))- Fixed \"xoring unsigned integers yields RangeError in certain conditions\"  ([#2979](https://github.com/Araq/Nim/issues/2979))- Fixed \"Directly checking equality between procs\"  ([#2985](https://github.com/Araq/Nim/issues/2985))- Fixed \"Compiler crashed, but there have to be meaningful error message\"  ([#2974](https://github.com/Araq/Nim/issues/2974))- Fixed \"repr is broken\"  ([#2992](https://github.com/Araq/Nim/issues/2992))- Fixed \"Ipv6 devel - add IPv6 support for asyncsockets, make AF_INET6 a default\"  ([#2976](https://github.com/Araq/Nim/issues/2976))- Fixed \"Compilation broken on windows\"  ([#2996](https://github.com/Araq/Nim/issues/2996))- Fixed \"'u64 literal conversion compiler error\"  ([#2731](https://github.com/Araq/Nim/issues/2731))- Fixed \"Importing 'impure' libraries while using threads causes segfaults\"  ([#2672](https://github.com/Araq/Nim/issues/2672))- Fixed \"Uncatched exception in async procedure on raise statement\"  ([#3014](https://github.com/Araq/Nim/issues/3014))- Fixed \"nim doc2 fails in Mac OS X due to system.nim (possibly related to #1898)\"  ([#3005](https://github.com/Araq/Nim/issues/3005))- Fixed \"IndexError when rebuilding Nim on iteration 2\"  ([#3018](https://github.com/Araq/Nim/issues/3018))- Fixed \"Assigning large const set to variable looses some information\"  ([#2880](https://github.com/Araq/Nim/issues/2880))- Fixed \"Inconsistent generics behavior\"  ([#3022](https://github.com/Araq/Nim/issues/3022))- Fixed \"Compiler breaks on float64 division\"  ([#3028](https://github.com/Araq/Nim/issues/3028))- Fixed \"Confusing error message comparing string to nil \"  ([#2935](https://github.com/Araq/Nim/issues/2935))- Fixed \"convert 64bit number to float on 32bit\"  ([#1463](https://github.com/Araq/Nim/issues/1463))- Fixed \"Type redefinition and construction will break nim check\"  ([#3032](https://github.com/Araq/Nim/issues/3032))- Fixed \"XmlParser fails on very large XML files without new lines\"  ([#2429](https://github.com/Araq/Nim/issues/2429))- Fixed \"Error parsing arguments with whitespaces\"  ([#2874](https://github.com/Araq/Nim/issues/2874))- Fixed \"Crash when missing one arg and used a named arg\"  ([#2993](https://github.com/Araq/Nim/issues/2993))- Fixed \"Wrong number of arguments in assert will break nim check\"  ([#3044](https://github.com/Araq/Nim/issues/3044))- Fixed \"Wrong const definition will break nim check\"  ([#3041](https://github.com/Araq/Nim/issues/3041))- Fixed \"Wrong set declaration will break nim check\"  ([#3040](https://github.com/Araq/Nim/issues/3040))- Fixed \"Compiler segfault (type section)\"  ([#2540](https://github.com/Araq/Nim/issues/2540))- Fixed \"Segmentation fault when compiling this code\"  ([#3038](https://github.com/Araq/Nim/issues/3038))- Fixed \"Kill nim i\"  ([#2633](https://github.com/Araq/Nim/issues/2633))- Fixed \"Nim check will break on wrong array declaration\"  ([#3048](https://github.com/Araq/Nim/issues/3048))- Fixed \"boolVal seems to be broken\"  ([#3046](https://github.com/Araq/Nim/issues/3046))- Fixed \"Nim check crashes on wrong set/array declaration inside ref object\"  ([#3062](https://github.com/Araq/Nim/issues/3062))- Fixed \"Nim check crashes on incorrect generic arg definition\"  ([#3051](https://github.com/Araq/Nim/issues/3051))- Fixed \"Nim check crashes on iterating nonexistent var\"  ([#3053](https://github.com/Araq/Nim/issues/3053))- Fixed \"Nim check crashes on wrong param set declaration + iteration\"  ([#3054](https://github.com/Araq/Nim/issues/3054))- Fixed \"Wrong sharing of static_t instantations\"  ([#3112](https://github.com/Araq/Nim/issues/3112))- Fixed \"Automatically generated proc conflicts with user-defined proc when .exportc.'ed\"  ([#3134](https://github.com/Araq/Nim/issues/3134))- Fixed \"getTypeInfo call crashes nim\"  ([#3099](https://github.com/Araq/Nim/issues/3099))- Fixed \"Array ptr dereference\"  ([#2963](https://github.com/Araq/Nim/issues/2963))- Fixed \"Internal error when `repr`-ing a type directly\"  ([#3079](https://github.com/Araq/Nim/issues/3079))- Fixed \"unknown type name 'TNimType' after importing typeinfo module\"  ([#2841](https://github.com/Araq/Nim/issues/2841))- Fixed \"Can export a template twice and from inside a block\"  ([#1738](https://github.com/Araq/Nim/issues/1738))- Fixed \"C Codegen: C Types are defined after their usage in certain cases\"  ([#2823](https://github.com/Araq/Nim/issues/2823))- Fixed \"s.high refers to the current seq instead of the old one\"  ([#1832](https://github.com/Araq/Nim/issues/1832))- Fixed \"Error while unmarshaling null values\"  ([#3149](https://github.com/Araq/Nim/issues/3149))- Fixed \"Inference of `static[T]` in sequences\"  ([#3144](https://github.com/Araq/Nim/issues/3144))- Fixed \"Argument named \"closure\" to proc inside template interfere with closure pragma\"  ([#3171](https://github.com/Araq/Nim/issues/3171))- Fixed \"Internal error with aliasing inside template\"  ([#3158](https://github.com/Araq/Nim/issues/3158))- Fixed \"Cardinality of sets prints unexpected value\"  ([#3135](https://github.com/Araq/Nim/issues/3135))- Fixed \"Nim crashes on const assignment from function returning var ref object\"  ([#3103](https://github.com/Araq/Nim/issues/3103))- Fixed \"`repr` cstring\"  ([#3080](https://github.com/Araq/Nim/issues/3080))- Fixed \"Nim check crashes on wrong enum declaration\"  ([#3052](https://github.com/Araq/Nim/issues/3052))- Fixed \"Compiler assertion when evaluating template with static[T]\"  ([#1858](https://github.com/Araq/Nim/issues/1858))- Fixed \"Erroneous overflow in iterators when compiler built with overflowChecks enabled\"  ([#3140](https://github.com/Araq/Nim/issues/3140))- Fixed \"Unicode dashes as \"lisp'ish\" alternative to hump and snake notation\"  ([#2811](https://github.com/Araq/Nim/issues/2811))- Fixed \"Calling discardable proc from a defer is an error.\"  ([#3185](https://github.com/Araq/Nim/issues/3185))- Fixed \"Defer statement at the end of a block produces ICE\"  ([#3186](https://github.com/Araq/Nim/issues/3186))- Fixed \"Call to `createU` fails to compile\"  ([#3193](https://github.com/Araq/Nim/issues/3193))- Fixed \"VM crash when accessing array's element\"  ([#3192](https://github.com/Araq/Nim/issues/3192))- Fixed \"Unexpected proc invoked when different modules add procs to a type from a 3rd module\"  ([#2664](https://github.com/Araq/Nim/issues/2664))- Fixed \"Nim crashes on conditional declaration inside a template\"  ([#2670](https://github.com/Araq/Nim/issues/2670))- Fixed \"Iterator names conflict within different scopes\"  ([#2752](https://github.com/Araq/Nim/issues/2752))- Fixed \"VM: Cannot assign int value to ref variable\"  ([#1329](https://github.com/Araq/Nim/issues/1329))- Fixed \"Incorrect code generated for tagged unions with enums not starting at zero\"  ([#3096](https://github.com/Araq/Nim/issues/3096))- Fixed \"Compile time procs using forward declarations are silently ignored\"  ([#3066](https://github.com/Araq/Nim/issues/3066))- Fixed \"re binding error in generic\"  ([#1965](https://github.com/Araq/Nim/issues/1965))- Fixed \"os.getCreationTime is incorrect/impossible on Posix systems\"  ([#1058](https://github.com/Araq/Nim/issues/1058))- Fixed \"Improve error message for osproc.startProcess when command does not exist\"  ([#2183](https://github.com/Araq/Nim/issues/2183))- Fixed \"gctest segfaults with --gc:markandsweep on x86_64\"  ([#2305](https://github.com/Araq/Nim/issues/2305))- Fixed \"Coroutine changes break compilation on unsupported architectures\"  ([#3245](https://github.com/Araq/Nim/issues/3245))- Fixed \"Bugfix: Windows 32bit  TinyCC support issue fixed\"  ([#3237](https://github.com/Araq/Nim/issues/3237))- Fixed \"db_mysql getValue() followed by exec() causing error\"  ([#3220](https://github.com/Araq/Nim/issues/3220))- Fixed \"xmltree.newEntity creates xnCData instead of xnEntity\"  ([#3282](https://github.com/Araq/Nim/issues/3282))- Fixed \"Methods and modules don't work together\"  ([#2590](https://github.com/Araq/Nim/issues/2590))- Fixed \"String slicing not working in the vm\"  ([#3300](https://github.com/Araq/Nim/issues/3300))- Fixed \"internal error: evalOp(mTypeOf)\"  ([#3230](https://github.com/Araq/Nim/issues/3230))- Fixed \"#! source code prefix collides with Unix Shebang\"  ([#2559](https://github.com/Araq/Nim/issues/2559))- Fixed \"wrong codegen for constant object\"  ([#3195](https://github.com/Araq/Nim/issues/3195))- Fixed \"Doc comments inside procs with implicit returns don't work\"  ([#1528](https://github.com/Araq/Nim/issues/1528))", "content_with_meta": "---\ntitle: \"Version 0.12.0 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\n\nThe Nim community of developers is proud to announce the new version of the\nNim compiler. This has been a long time coming as the last release has been\nmade over 5 months ago!\n\nThis release includes some changes which affect backwards compatibility,\none major change is that now the hash table ``[]`` operators now raise a\n``KeyError`` exception when the key does not exist.\n\nSome of the more exciting new features include: the ability to unpack tuples\nin any assignment context, the introduction of\n[NimScript]({{site.baseurl}}/docs/nims.html),\nand improvements to the type inference of lambdas.\n\nThere are of course many many many bug fixes included with this release.\nWe are getting closer and closer to a 1.0 release and are hoping that only\na few 0.x releases will be necessary before we are happy to release version 1.0.\n\nAs always you can download the latest version of Nim from the\n[download]({{site.baseurl}}/install.html) page.\n\nFor a more detailed list of changes look below. Some of the upcoming breaking\nchanges are also documented in this forum\n[thread](http://forum.nim-lang.org/t/1708).\n\nChanges affecting backwards compatibility\n-----------------------------------------\n- The regular expression modules, ``re`` and ``nre`` now depend on version\n  8.36 of PCRE. If you have an older version you may see a message similar\n  to ``could not import: pcre_free_study`` output when you start your\n  program. See [this issue](https://github.com/docopt/docopt.nim/issues/13)\n  for more information.\n- ``tables.[]``, ``strtabs.[]``, ``critbits.[]`` **now raise**\n  the ``KeyError`` **exception when the key does not exist**! Use the\n  new ``getOrDefault`` instead to get the old behaviour. Compile all your\n  code with ``-d:nimTableGet`` to get a listing of where your code\n  uses ``[]``!\n- The ``rawsockets`` module has been renamed to ``nativesockets`` to avoid\n  confusion with TCP/IP raw sockets, so ``newNativeSocket`` should be used\n  instead of ``newRawSocket``.\n- The ``miliseconds`` property of ``times.TimeInterval`` is now ``milliseconds``.\n  Code accessing that property is deprecated and code using ``miliseconds``\n  during object initialization or as a named parameter of ``initInterval()``\n  will need to be updated.\n- ``std.logging`` functions no longer do formatting and semantically treat\n  their arguments just like ``echo`` does. Affected functions: ``log``,\n  ``debug``, ``info``, ``warn``, ``error``, ``fatal``. Custom subtypes of\n  ``Logger`` also need to be adjusted accordingly.\n- Floating point numbers can now look like ``2d`` (float64)\n  and ``2f`` (float32) which means imports like ``import scene/2d/sprite``\n  do not work anymore. Instead quotes have to be\n  used: ``import \"scene/2d/sprite\"``. The former code never was valid Nim.\n- The Windows API wrapper (``windows.nim``) is now not part of the official\n  distribution anymore. Instead use the ``oldwinapi`` Nimble package.\n- There is now a clear distinction between ``--os:standalone``\n  and ``--gc:none``. So if you use ``--os:standalone`` ensure you also use\n  ``--gc:none``. ``--os:standalone`` without ``--gc:none`` is now a version\n  that doesn't depend on any OS but includes the GC. However this version\n  is currently untested!\n- All procedures which construct a ``Socket``/``AsyncSocket`` now need to\n  specify the socket domain, type and protocol. The param name\n  ``typ: SockType`` (in ``newSocket``/``newAsyncSocket`` procs) was also\n  renamed to ``sockType``. The param ``af`` in the ``connect`` procs was\n  removed. This affects ``asyncnet``, ``asyncdispatch``, ``net``, and\n  ``rawsockets``.\n- ``varargs[typed]`` and ``varargs[untyped]`` have been refined and now work\n  as expected. However ``varargs[untyped]`` is not an alias anymore for\n  ``varargs[expr]``. So if your code breaks for ``varargs[untyped]``, use\n  ``varargs[expr]`` instead. The same applies to ``varargs[typed]`` vs\n  ``varargs[stmt]``.\n- ``sequtils.delete`` doesn't take confusing default arguments anymore.\n- ``system.free`` was an error-prone alias to ``system.dealloc`` and has\n  been removed.\n- ``macros.high`` never worked and the manual says ``high`` cannot be\n  overloaded, so we removed it with no deprecation cycle.\n- To use the ``parallel`` statement you now have to\n  use the ``--experimental`` mode.\n- Toplevel procs of calling convention ``closure`` never worked reliably\n  and are now deprecated and will be removed from the language. Instead you\n  have to insert type conversions\n  like ``(proc (a, b: int) {.closure.})(myToplevelProc)`` if necessary.\n- The modules ``libffi``, ``sdl``, ``windows``, ``zipfiles``, ``libzip``,\n  ``zlib``, ``zzip``, ``dialogs``, ``expat``, ``graphics``, ``libcurl``,\n  ``sphinx`` have been moved out of the stdlib and are Nimble packages now.\n- The constant fights between 32 and 64 bit DLLs on Windows have been put to\n  an end: The standard distribution now ships with 32 and 64 bit versions\n  of all the DLLs the standard library needs. This means that the following\n  DLLs are now split into 32 and 64 versions:\n\n  * ``pcre.dll``: Split into ``pcre32.dll`` and ``pcre64.dll``.\n  * ``pdcurses.dll``: Split into ``pdcurses32.dll`` and ``pdcurses64.dll``.\n  * ``sqlite3.dll``: Split into ``sqlite3_32.dll`` and ``sqlite3_64.dll``.\n  * ``ssleay32.dll``: Split into ``ssleay32.dll`` and ``ssleay64.dll``.\n  * ``libeay32.dll``: Split into ``libeay32.dll`` and ``libeay64.dll``.\n\n  Compile with ``-d:nimOldDLLs`` to make the stdlib use the old DLL names.\n- Nim VM now treats objects as ``nkObjConstr`` nodes, and not ``nkPar`` nodes\n  as it was previously. Macros that generate ``nkPar`` nodes when object is\n  expected are likely to break. Macros that expect ``nkPar`` nodes to which\n  objects are passed are likely to break as well.\n- Base methods now need to be annotated with the ``base`` pragma. This makes\n  multi methods less error-prone to use with the effect system.\n- Nim's parser directive ``#!`` is now ``#?`` in order to produce no conflicts\n  with Unix's ``#!``.\n- An implicit return type for an iterator is now deprecated. Use ``auto`` if\n  you want more type inference.\n- The type ``auto`` is now a \"multi-bind\" metatype, so the following compiles:\n\n    ```nim\n    proc f(x, y: auto): auto =\n      result = $x & y\n\n    echo f(0, \"abc\")\n    ```\n- The ``ftpclient`` module is now deprecated in favour of the\n  ``asyncftpclient`` module.\n- In sequtils.nim renamed ``repeat`` function to ``cycle`` (concatenating\n  a sequence by itself the given times), and also introduced ``repeat``,\n  which repeats an element the given times.\n- The function ``map`` is moved to sequtils.nim. The inplace ``map`` version\n  is renamed to ``apply``.\n- The template ``mapIt`` now doesn't require the result's type parameter.\n  Also the inplace ``mapIt`` is renamed to ``apply``.\n- The compiler is now stricter with what is allowed as a case object\n  discriminator. The following code used to compile but was not supported\n  completely and so now fails:\n\n    ```nim\n    type\n        DataType* {.pure.} = enum\n            Char = 1,\n            Int8 = 2,\n            Int16 = 3,\n            Int32 = 4,\n            Int64 = 5,\n            Float32 = 6,\n            Float64 = 7\n\n        DataSeq* = object\n            case kind* : DataType\n            of DataType.Char: charSeq* : seq[char]\n            of DataType.Int8: int8Seq* : seq[int8]\n            of DataType.Int16: int16Seq* : seq[int16]\n            of DataType.Int32: int32Seq* : seq[int32]\n            of DataType.Int64: int64Seq* : seq[int64]\n            of DataType.Float32: float32Seq* : seq[float32]\n            of DataType.Float64: float64Seq* : seq[float64]\n\n            length* : int\n    ```\n\n\nLibrary Additions\n-----------------\n\n- The nre module has been added, providing a better interface to PCRE than re.\n- The ``expandSymlink`` proc has been added to the ``os`` module.\n- The ``tailDir`` proc has been added to the ``os`` module.\n- Define ``nimPinToCpu`` to make the ``threadpool`` use explicit thread\n  affinities. This can speed up or slow down the thread pool; it's up to you\n  to benchmark it.\n- ``strutils.formatFloat`` and ``formatBiggestFloat`` do not depend on the C\n  locale anymore and now take an optional ``decimalSep = '.'`` parameter.\n- Added ``unicode.lastRune``, ``unicode.graphemeLen``.\n\n\nCompiler Additions\n------------------\n\n- The compiler now supports a new configuration system based on\n  [NimScript](docs/nims.html).\n- The compiler finally considers symbol binding rules in templates and\n  generics for overloaded ``[]``, ``[]=``, ``{}``, ``{}=`` operators\n  (issue [#2599](https://github.com/nim-lang/Nim/issues/2599)).\n- The compiler now supports a [bitsize pragma](docs/manual.html#pragmas-bitsize-pragma)\n  for constructing bitfields.\n- Added a new ``--reportConceptFailures`` switch for better debugging of\n  concept related type mismatches. This can also be used to debug\n  ``system.compiles`` failures.\n\n\nLanguage Additions\n------------------\n\n- ``system.unsafeAddr`` can be used to access the address of a ``let``\n  variable or parameter for C interoperability. Since technically this\n  makes parameters and ``let`` variables mutable, it is considered even more\n  unsafe than the ordinary ``addr`` builtin.\n- Added ``macros.getImpl`` that can be used to access the implementation of\n  a routine or a constant. This allows for example for user-defined inlining\n  of function calls.\n- Tuple unpacking finally works in a non-var/let context: ``(x, y) = f()``\n  is allowed. Note that this doesn't declare ``x`` and ``y`` variables, for\n  this ``let (x, y) = f()`` still needs to be used.\n- ``when nimvm`` can now be used for compiletime versions of some code\n  sections. Click [here](docs/manual.html#when-nimvm-statement) for details.\n- Usage of the type ``NimNode`` in a proc now implicitly annotates the proc\n  with ``.compileTime``. This means generics work much better for ``NimNode``.\n\n\nBugfixes\n--------\n- Fixed \"Compiler internal error on iterator it(T: typedesc[Base]) called with it(Child), where Child = object of Base\"\n  ([#2662](https://github.com/Araq/Nim/issues/2662))\n- Fixed \"repr() misses base object field in 2nd level derived object\"\n  ([#2749](https://github.com/Araq/Nim/issues/2749))\n- Fixed \"nimsuggest doesn't work more than once on the non-main file\"\n  ([#2694](https://github.com/Araq/Nim/issues/2694))\n- Fixed \"JS Codegen. Passing arguments by var in certain cases leads to invalid JS.\"\n  ([#2798](https://github.com/Araq/Nim/issues/2798))\n- Fixed \"\"check\" proc in unittest.nim prevents the propagation of changes to var parameters.\"\n  ([#964](https://github.com/Araq/Nim/issues/964))\n- Fixed \"Excessive letters in integer literals are not an error\"\n  ([#2523](https://github.com/Araq/Nim/issues/2523))\n- Fixed \"Unicode dashes as \"lisp'ish\" alternative to hump and snake notation\"\n  ([#2811](https://github.com/Araq/Nim/issues/2811))\n- Fixed \"Bad error message when trying to construct an object incorrectly\"\n  ([#2584](https://github.com/Araq/Nim/issues/2584))\n- Fixed \"Determination of GC safety of globals is broken \"\n  ([#2854](https://github.com/Araq/Nim/issues/2854))\n- Fixed \"v2 gc crashes compiler\"\n  ([#2687](https://github.com/Araq/Nim/issues/2687))\n- Fixed \"Compile error using object in const array\"\n  ([#2774](https://github.com/Araq/Nim/issues/2774))\n- Fixed \"httpclient async requests with method httpPOST isn't sending Content-Length header\"\n  ([#2884](https://github.com/Araq/Nim/issues/2884))\n- Fixed \"Streams module not working with JS backend\"\n  ([#2148](https://github.com/Araq/Nim/issues/2148))\n- Fixed \"Sign of certain short constants is wrong\"\n  ([#1179](https://github.com/Araq/Nim/issues/1179))\n- Fixed \"Symlinks to directories reported as symlinks to files\"\n  ([#1985](https://github.com/Araq/Nim/issues/1985))\n- Fixed \"64-bit literals broken on x86\"\n  ([#2909](https://github.com/Araq/Nim/issues/2909))\n- Fixed \"import broken for certain names\"\n  ([#2904](https://github.com/Araq/Nim/issues/2904))\n- Fixed \"Invalid UTF-8 strings in JavaScript\"\n  ([#2917](https://github.com/Araq/Nim/issues/2917))\n- Fixed \"[JS][Codegen] Initialising object doesn't create unmentioned fields.\"\n\n  ([#2617](https://github.com/Araq/Nim/issues/2617))\n- Fixed \"Table returned from proc computed at compile time is missing keys:\"\n  ([#2297](https://github.com/Araq/Nim/issues/2297))\n- Fixed \"Clarify copyright status for some files\"\n  ([#2949](https://github.com/Araq/Nim/issues/2949))\n- Fixed \"math.nim: trigonometry: radians to degrees conversion\"\n  ([#2881](https://github.com/Araq/Nim/issues/2881))\n- Fixed \"xoring unsigned integers yields RangeError in certain conditions\"\n  ([#2979](https://github.com/Araq/Nim/issues/2979))\n- Fixed \"Directly checking equality between procs\"\n  ([#2985](https://github.com/Araq/Nim/issues/2985))\n- Fixed \"Compiler crashed, but there have to be meaningful error message\"\n  ([#2974](https://github.com/Araq/Nim/issues/2974))\n- Fixed \"repr is broken\"\n  ([#2992](https://github.com/Araq/Nim/issues/2992))\n- Fixed \"Ipv6 devel - add IPv6 support for asyncsockets, make AF_INET6 a default\"\n  ([#2976](https://github.com/Araq/Nim/issues/2976))\n- Fixed \"Compilation broken on windows\"\n  ([#2996](https://github.com/Araq/Nim/issues/2996))\n- Fixed \"'u64 literal conversion compiler error\"\n  ([#2731](https://github.com/Araq/Nim/issues/2731))\n- Fixed \"Importing 'impure' libraries while using threads causes segfaults\"\n  ([#2672](https://github.com/Araq/Nim/issues/2672))\n- Fixed \"Uncatched exception in async procedure on raise statement\"\n  ([#3014](https://github.com/Araq/Nim/issues/3014))\n- Fixed \"nim doc2 fails in Mac OS X due to system.nim (possibly related to #1898)\"\n  ([#3005](https://github.com/Araq/Nim/issues/3005))\n- Fixed \"IndexError when rebuilding Nim on iteration 2\"\n  ([#3018](https://github.com/Araq/Nim/issues/3018))\n- Fixed \"Assigning large const set to variable looses some information\"\n  ([#2880](https://github.com/Araq/Nim/issues/2880))\n- Fixed \"Inconsistent generics behavior\"\n  ([#3022](https://github.com/Araq/Nim/issues/3022))\n- Fixed \"Compiler breaks on float64 division\"\n  ([#3028](https://github.com/Araq/Nim/issues/3028))\n- Fixed \"Confusing error message comparing string to nil \"\n  ([#2935](https://github.com/Araq/Nim/issues/2935))\n- Fixed \"convert 64bit number to float on 32bit\"\n  ([#1463](https://github.com/Araq/Nim/issues/1463))\n- Fixed \"Type redefinition and construction will break nim check\"\n  ([#3032](https://github.com/Araq/Nim/issues/3032))\n- Fixed \"XmlParser fails on very large XML files without new lines\"\n  ([#2429](https://github.com/Araq/Nim/issues/2429))\n- Fixed \"Error parsing arguments with whitespaces\"\n  ([#2874](https://github.com/Araq/Nim/issues/2874))\n- Fixed \"Crash when missing one arg and used a named arg\"\n  ([#2993](https://github.com/Araq/Nim/issues/2993))\n- Fixed \"Wrong number of arguments in assert will break nim check\"\n  ([#3044](https://github.com/Araq/Nim/issues/3044))\n- Fixed \"Wrong const definition will break nim check\"\n  ([#3041](https://github.com/Araq/Nim/issues/3041))\n- Fixed \"Wrong set declaration will break nim check\"\n  ([#3040](https://github.com/Araq/Nim/issues/3040))\n- Fixed \"Compiler segfault (type section)\"\n  ([#2540](https://github.com/Araq/Nim/issues/2540))\n- Fixed \"Segmentation fault when compiling this code\"\n  ([#3038](https://github.com/Araq/Nim/issues/3038))\n- Fixed \"Kill nim i\"\n  ([#2633](https://github.com/Araq/Nim/issues/2633))\n- Fixed \"Nim check will break on wrong array declaration\"\n  ([#3048](https://github.com/Araq/Nim/issues/3048))\n- Fixed \"boolVal seems to be broken\"\n  ([#3046](https://github.com/Araq/Nim/issues/3046))\n- Fixed \"Nim check crashes on wrong set/array declaration inside ref object\"\n  ([#3062](https://github.com/Araq/Nim/issues/3062))\n- Fixed \"Nim check crashes on incorrect generic arg definition\"\n  ([#3051](https://github.com/Araq/Nim/issues/3051))\n- Fixed \"Nim check crashes on iterating nonexistent var\"\n  ([#3053](https://github.com/Araq/Nim/issues/3053))\n- Fixed \"Nim check crashes on wrong param set declaration + iteration\"\n  ([#3054](https://github.com/Araq/Nim/issues/3054))\n- Fixed \"Wrong sharing of static_t instantations\"\n  ([#3112](https://github.com/Araq/Nim/issues/3112))\n- Fixed \"Automatically generated proc conflicts with user-defined proc when .exportc.'ed\"\n  ([#3134](https://github.com/Araq/Nim/issues/3134))\n- Fixed \"getTypeInfo call crashes nim\"\n  ([#3099](https://github.com/Araq/Nim/issues/3099))\n- Fixed \"Array ptr dereference\"\n  ([#2963](https://github.com/Araq/Nim/issues/2963))\n- Fixed \"Internal error when `repr`-ing a type directly\"\n  ([#3079](https://github.com/Araq/Nim/issues/3079))\n- Fixed \"unknown type name 'TNimType' after importing typeinfo module\"\n  ([#2841](https://github.com/Araq/Nim/issues/2841))\n- Fixed \"Can export a template twice and from inside a block\"\n  ([#1738](https://github.com/Araq/Nim/issues/1738))\n- Fixed \"C Codegen: C Types are defined after their usage in certain cases\"\n  ([#2823](https://github.com/Araq/Nim/issues/2823))\n- Fixed \"s.high refers to the current seq instead of the old one\"\n  ([#1832](https://github.com/Araq/Nim/issues/1832))\n- Fixed \"Error while unmarshaling null values\"\n  ([#3149](https://github.com/Araq/Nim/issues/3149))\n- Fixed \"Inference of `static[T]` in sequences\"\n  ([#3144](https://github.com/Araq/Nim/issues/3144))\n- Fixed \"Argument named \"closure\" to proc inside template interfere with closure pragma\"\n  ([#3171](https://github.com/Araq/Nim/issues/3171))\n- Fixed \"Internal error with aliasing inside template\"\n  ([#3158](https://github.com/Araq/Nim/issues/3158))\n- Fixed \"Cardinality of sets prints unexpected value\"\n  ([#3135](https://github.com/Araq/Nim/issues/3135))\n- Fixed \"Nim crashes on const assignment from function returning var ref object\"\n  ([#3103](https://github.com/Araq/Nim/issues/3103))\n- Fixed \"`repr` cstring\"\n  ([#3080](https://github.com/Araq/Nim/issues/3080))\n- Fixed \"Nim check crashes on wrong enum declaration\"\n  ([#3052](https://github.com/Araq/Nim/issues/3052))\n- Fixed \"Compiler assertion when evaluating template with static[T]\"\n  ([#1858](https://github.com/Araq/Nim/issues/1858))\n- Fixed \"Erroneous overflow in iterators when compiler built with overflowChecks enabled\"\n  ([#3140](https://github.com/Araq/Nim/issues/3140))\n- Fixed \"Unicode dashes as \"lisp'ish\" alternative to hump and snake notation\"\n  ([#2811](https://github.com/Araq/Nim/issues/2811))\n- Fixed \"Calling discardable proc from a defer is an error.\"\n  ([#3185](https://github.com/Araq/Nim/issues/3185))\n- Fixed \"Defer statement at the end of a block produces ICE\"\n  ([#3186](https://github.com/Araq/Nim/issues/3186))\n- Fixed \"Call to `createU` fails to compile\"\n  ([#3193](https://github.com/Araq/Nim/issues/3193))\n- Fixed \"VM crash when accessing array's element\"\n  ([#3192](https://github.com/Araq/Nim/issues/3192))\n- Fixed \"Unexpected proc invoked when different modules add procs to a type from a 3rd module\"\n  ([#2664](https://github.com/Araq/Nim/issues/2664))\n- Fixed \"Nim crashes on conditional declaration inside a template\"\n  ([#2670](https://github.com/Araq/Nim/issues/2670))\n- Fixed \"Iterator names conflict within different scopes\"\n  ([#2752](https://github.com/Araq/Nim/issues/2752))\n- Fixed \"VM: Cannot assign int value to ref variable\"\n  ([#1329](https://github.com/Araq/Nim/issues/1329))\n- Fixed \"Incorrect code generated for tagged unions with enums not starting at zero\"\n  ([#3096](https://github.com/Araq/Nim/issues/3096))\n- Fixed \"Compile time procs using forward declarations are silently ignored\"\n  ([#3066](https://github.com/Araq/Nim/issues/3066))\n- Fixed \"re binding error in generic\"\n  ([#1965](https://github.com/Araq/Nim/issues/1965))\n- Fixed \"os.getCreationTime is incorrect/impossible on Posix systems\"\n  ([#1058](https://github.com/Araq/Nim/issues/1058))\n- Fixed \"Improve error message for osproc.startProcess when command does not exist\"\n  ([#2183](https://github.com/Araq/Nim/issues/2183))\n- Fixed \"gctest segfaults with --gc:markandsweep on x86_64\"\n  ([#2305](https://github.com/Araq/Nim/issues/2305))\n- Fixed \"Coroutine changes break compilation on unsupported architectures\"\n  ([#3245](https://github.com/Araq/Nim/issues/3245))\n- Fixed \"Bugfix: Windows 32bit  TinyCC support issue fixed\"\n  ([#3237](https://github.com/Araq/Nim/issues/3237))\n- Fixed \"db_mysql getValue() followed by exec() causing error\"\n  ([#3220](https://github.com/Araq/Nim/issues/3220))\n- Fixed \"xmltree.newEntity creates xnCData instead of xnEntity\"\n  ([#3282](https://github.com/Araq/Nim/issues/3282))\n- Fixed \"Methods and modules don't work together\"\n  ([#2590](https://github.com/Araq/Nim/issues/2590))\n- Fixed \"String slicing not working in the vm\"\n  ([#3300](https://github.com/Araq/Nim/issues/3300))\n- Fixed \"internal error: evalOp(mTypeOf)\"\n  ([#3230](https://github.com/Araq/Nim/issues/3230))\n- Fixed \"#! source code prefix collides with Unix Shebang\"\n  ([#2559](https://github.com/Araq/Nim/issues/2559))\n- Fixed \"wrong codegen for constant object\"\n  ([#3195](https://github.com/Araq/Nim/issues/3195))\n- Fixed \"Doc comments inside procs with implicit returns don't work\"\n  ([#1528](https://github.com/Araq/Nim/issues/1528))\n", "tags": ["nim", "python"], "published_at": "", "id": 22}, {"title": "Andreas Rumpf's talk at OSCON Amsterdam", "slug": "oscon-conf-amsterdam", "content": "In case you have missed it, here is Andreas' Nim: An Overview talk atOSCON Amsterdam.<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4rJEBs_Nnaw\" frameborder=\"0\" allowfullscreen></iframe>", "content_with_meta": "---\ntitle: \"Andreas Rumpf's talk at OSCON Amsterdam\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nIn case you have missed it, here is Andreas' Nim: An Overview talk at\nOSCON Amsterdam.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4rJEBs_Nnaw\" frameborder=\"0\" allowfullscreen></iframe>\n", "tags": ["nim", "python"], "published_at": "", "id": 23}, {"title": "Version 0.13.0 released", "slug": "version-released", "content": "Once again we are proud to announce the latest release of the Nim compilerand related tools. This release comes just 3 months after the lastrelease!A new version of Nimble which depends on this release, has also beenreleased. See [this](http://forum.nim-lang.org/t/1912) forum thread formore information about the Nimble release.This release of Nim includes over 116 bug fixes, many of which are relatedto closures. The lambda lifting algorithm in the compiler has been completelyrewritten, and some changes have been made to the semantics of closures inNim as a result. These changes may affect backwards compatibility and are alldescribed in the section below.With this release, we are one step closer to Nim version 1.0.The 1.0 release will be a big milestone for Nim, because after that versionis released there will be no more breaking changes made to the languageor the standard library.That being said, the next release will likely be Nim 0.14. It will focus onimprovements to the GC and concurrency. We will in particular be looking atways to add multi-core support to async await. Standard library improvementsare also on our roadmap but may not make it for Nim 0.14.As always you can download the latest version of Nim from the[download]({{site.baseurl}}/install.html) page.Happy coding!Changes affecting backwards compatibility------------------------------------------ ``macros.newLit`` for ``bool`` now produces false/true symbols which  actually work with the bool datatype.- When compiling to JS: ``Node``, ``NodeType`` and ``Document`` are no longer  defined. Use the types defined in ``dom.nim`` instead.- The check ``x is iterator`` (used for instance in concepts) was always a  weird special case (you could not use ``x is proc``) and was removed from  the language.- Top level routines cannot have the calling convention ``closure``  anymore.- The ``redis`` module has been moved out of the standard library. It can  now be installed via Nimble and is located here:  https://github.com/nim-lang/redis- ``math.RunningStat`` and its associated procs have been moved from  the ``math`` module to a new ``stats`` module.## Syntax changesThe parser now considers leading whitespace in front of operatorsto determine if an operator is used in prefix or infix position.This means that finally ``echo $foo`` is parsed as people expect,which is as ``echo($foo)``. It used to be parsed as ``(echo) $ (foo)``.``echo $ foo`` continues to be parsed as ``(echo) $ (foo)``.This also means that ``-1`` is always parsed as prefix operator socode like ``0..kArraySize div 2 -1`` needs to be changed to``0..kArraySize div 2 - 1``.This release also adds multi-line comments to Nim. The syntax for them is:``#[ comment here ]#``. For more details read the section ofthe [manual](docs/manual.html#lexical-analysis-multiline-comments).## Iterator changesImplicit return type inference for iterators has been removed from the language. The following used to work:```nimiterator it =  yield 7```This was a strange special case and has been removed. Now you need to write it like so which is consistent with procs:```nimiterator it: auto =  yield 7```## Closure changesThe semantics of closures changed: Capturing variables that are in loops do not produce a new environment. Nim closures behave like JavaScript closures now.The following used to work as the environment creation used to be attached to the loop body:```nimproc outer =  var s: seq[proc(): int {.closure.}] = @[]  for i in 0 ..< 30:    let ii = i    s.add(proc(): int = return ii*ii)```This behaviour has changed in 0.13.0 and now needs to be written as:```nimproc outer =  var s: seq[proc(): int {.closure.}] = @[]  for i in 0 ..< 30:    (proc () =      let ii = i      s.add(proc(): int = return ii*ii))()```The reason is that environment creations are now only performed onceper proc call. This change is subtle and unfortunate, but:1. Affects almost no code out there.2. Is easier to implement and we are at a point in Nim's development process where simple+stable wins over perfect-in-theory+unstable-in-practice.3. Implies programmers are more in control of where memory is allocated which is beneficial for a systems programming language.Bugfixes--------The list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222015-10-27+..+2016-01-19%22+).- Fixed \"Generic arguments cannot be used in templates (raising undeclared identifier)\"  ([#3498](https://github.com/nim-lang/Nim/issues/3498))- Fixed \"multimethods: Error: internal error: cgmeth.genConv\"  ([#3550](https://github.com/nim-lang/Nim/issues/3550))- Fixed \"nimscript - SIGSEGV in except block\"  ([#3546](https://github.com/nim-lang/Nim/issues/3546))- Fixed \"Bool literals in macros do not work.\"  ([#3541](https://github.com/nim-lang/Nim/issues/3541))- Fixed \"Docs: nativesocket.html - 404\"  ([#3582](https://github.com/nim-lang/Nim/issues/3582))- Fixed \"\"not nil\" return types never trigger an error or warning\"  ([#2285](https://github.com/nim-lang/Nim/issues/2285))- Fixed \"No warning or error is raised even if not nil is specified \"  ([#3222](https://github.com/nim-lang/Nim/issues/3222))- Fixed \"Incorrect fsmonitor add() filter logic\"  ([#3611](https://github.com/nim-lang/Nim/issues/3611))- Fixed \"\"nimble install nimsuggest\" failed\"  ([#3622](https://github.com/nim-lang/Nim/issues/3622))- Fixed \"compile time `excl ` cause SIGSEGV\"  ([#3639](https://github.com/nim-lang/Nim/issues/3639))- Fixed \"Unable to echo unsigned ints at compile-time\"  ([#2514](https://github.com/nim-lang/Nim/issues/2514))- Fixed \"Nested closure iterator produces internal error\"  ([#1725](https://github.com/nim-lang/Nim/issues/1725))- Fixed \"C Error on walkDirRec closure\"  ([#3636](https://github.com/nim-lang/Nim/issues/3636))- Fixed \"Error in generated c code\"  ([#3201](https://github.com/nim-lang/Nim/issues/3201))- Fixed \"C Compile-time error with generic proc type.\"  ([#2659](https://github.com/nim-lang/Nim/issues/2659))- Fixed \"ICE dereferencing array pointer\"  ([#2240](https://github.com/nim-lang/Nim/issues/2240))- Fixed \"Lambda lifting crash\"  ([#2007](https://github.com/nim-lang/Nim/issues/2007))- Fixed \"Can't reference outer variables from a closure in an iterator\"  ([#2604](https://github.com/nim-lang/Nim/issues/2604))- Fixed \"M&S collector breaks with nested for loops.\"  ([#603](https://github.com/nim-lang/Nim/issues/603))- Fixed \"Regression: bad C codegen\"  ([#3723](https://github.com/nim-lang/Nim/issues/3723))- Fixed \"JS backend - handle bool type in case statement\"  ([#3722](https://github.com/nim-lang/Nim/issues/3722))- Fixed \"linenoise compilation with cpp\"  ([#3720](https://github.com/nim-lang/Nim/issues/3720))- Fixed \"(???,???) duplicate case label\"  ([#3665](https://github.com/nim-lang/Nim/issues/3665))- Fixed \"linenoise compilation with cpp\"  ([#3720](https://github.com/nim-lang/Nim/issues/3720))- Fixed \"Update list of backward incompatibilities for Nim 0.12.0 in the main site\"  ([#3689](https://github.com/nim-lang/Nim/issues/3689))- Fixed \"Can't compile nimble with latest devel - codegen bug\"  ([#3730](https://github.com/nim-lang/Nim/issues/3730))", "content_with_meta": "---\ntitle: \"Version 0.13.0 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nOnce again we are proud to announce the latest release of the Nim compiler\nand related tools. This release comes just 3 months after the last\nrelease!\n\nA new version of Nimble which depends on this release, has also been\nreleased. See [this](http://forum.nim-lang.org/t/1912) forum thread for\nmore information about the Nimble release.\n\nThis release of Nim includes over 116 bug fixes, many of which are related\nto closures. The lambda lifting algorithm in the compiler has been completely\nrewritten, and some changes have been made to the semantics of closures in\nNim as a result. These changes may affect backwards compatibility and are all\ndescribed in the section below.\n\nWith this release, we are one step closer to Nim version 1.0.\nThe 1.0 release will be a big milestone for Nim, because after that version\nis released there will be no more breaking changes made to the language\nor the standard library.\n\nThat being said, the next release will likely be Nim 0.14. It will focus on\nimprovements to the GC and concurrency. We will in particular be looking at\nways to add multi-core support to async await. Standard library improvements\nare also on our roadmap but may not make it for Nim 0.14.\n\nAs always you can download the latest version of Nim from the\n[download]({{site.baseurl}}/install.html) page.\n\nHappy coding!\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- ``macros.newLit`` for ``bool`` now produces false/true symbols which\n  actually work with the bool datatype.\n- When compiling to JS: ``Node``, ``NodeType`` and ``Document`` are no longer\n  defined. Use the types defined in ``dom.nim`` instead.\n- The check ``x is iterator`` (used for instance in concepts) was always a\n  weird special case (you could not use ``x is proc``) and was removed from\n  the language.\n- Top level routines cannot have the calling convention ``closure``\n  anymore.\n- The ``redis`` module has been moved out of the standard library. It can\n  now be installed via Nimble and is located here:\n  https://github.com/nim-lang/redis\n- ``math.RunningStat`` and its associated procs have been moved from\n  the ``math`` module to a new ``stats`` module.\n\n\n## Syntax changes\n\n\nThe parser now considers leading whitespace in front of operators\nto determine if an operator is used in prefix or infix position.\nThis means that finally ``echo $foo`` is parsed as people expect,\nwhich is as ``echo($foo)``. It used to be parsed as ``(echo) $ (foo)``.\n\n``echo $ foo`` continues to be parsed as ``(echo) $ (foo)``.\n\nThis also means that ``-1`` is always parsed as prefix operator so\ncode like ``0..kArraySize div 2 -1`` needs to be changed to\n``0..kArraySize div 2 - 1``.\n\nThis release also adds multi-line comments to Nim. The syntax for them is:\n``#[ comment here ]#``. For more details read the section of\nthe [manual](docs/manual.html#lexical-analysis-multiline-comments).\n\n## Iterator changes\n\nImplicit return type inference for iterators has been removed from the language. The following used to work:\n\n```nim\niterator it =\n  yield 7\n```\n\nThis was a strange special case and has been removed. Now you need to write it like so which is consistent with procs:\n\n```nim\niterator it: auto =\n  yield 7\n```\n\n## Closure changes\n\nThe semantics of closures changed: Capturing variables that are in loops do not produce a new environment. Nim closures behave like JavaScript closures now.\n\nThe following used to work as the environment creation used to be attached to the loop body:\n\n```nim\nproc outer =\n  var s: seq[proc(): int {.closure.}] = @[]\n  for i in 0 ..< 30:\n    let ii = i\n    s.add(proc(): int = return ii*ii)\n```\n\nThis behaviour has changed in 0.13.0 and now needs to be written as:\n\n```nim\nproc outer =\n  var s: seq[proc(): int {.closure.}] = @[]\n  for i in 0 ..< 30:\n    (proc () =\n      let ii = i\n      s.add(proc(): int = return ii*ii))()\n```\n\nThe reason is that environment creations are now only performed once\nper proc call. This change is subtle and unfortunate, but:\n\n1. Affects almost no code out there.\n2. Is easier to implement and we are at a point in Nim's development process where simple+stable wins over perfect-in-theory+unstable-in-practice.\n3. Implies programmers are more in control of where memory is allocated which is beneficial for a systems programming language.\n\nBugfixes\n--------\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222015-10-27+..+2016-01-19%22+).\n\n- Fixed \"Generic arguments cannot be used in templates (raising undeclared identifier)\"\n  ([#3498](https://github.com/nim-lang/Nim/issues/3498))\n- Fixed \"multimethods: Error: internal error: cgmeth.genConv\"\n  ([#3550](https://github.com/nim-lang/Nim/issues/3550))\n- Fixed \"nimscript - SIGSEGV in except block\"\n  ([#3546](https://github.com/nim-lang/Nim/issues/3546))\n- Fixed \"Bool literals in macros do not work.\"\n  ([#3541](https://github.com/nim-lang/Nim/issues/3541))\n- Fixed \"Docs: nativesocket.html - 404\"\n  ([#3582](https://github.com/nim-lang/Nim/issues/3582))\n- Fixed \"\"not nil\" return types never trigger an error or warning\"\n  ([#2285](https://github.com/nim-lang/Nim/issues/2285))\n- Fixed \"No warning or error is raised even if not nil is specified \"\n  ([#3222](https://github.com/nim-lang/Nim/issues/3222))\n- Fixed \"Incorrect fsmonitor add() filter logic\"\n  ([#3611](https://github.com/nim-lang/Nim/issues/3611))\n- Fixed \"\"nimble install nimsuggest\" failed\"\n  ([#3622](https://github.com/nim-lang/Nim/issues/3622))\n- Fixed \"compile time `excl ` cause SIGSEGV\"\n  ([#3639](https://github.com/nim-lang/Nim/issues/3639))\n- Fixed \"Unable to echo unsigned ints at compile-time\"\n  ([#2514](https://github.com/nim-lang/Nim/issues/2514))\n- Fixed \"Nested closure iterator produces internal error\"\n  ([#1725](https://github.com/nim-lang/Nim/issues/1725))\n- Fixed \"C Error on walkDirRec closure\"\n  ([#3636](https://github.com/nim-lang/Nim/issues/3636))\n- Fixed \"Error in generated c code\"\n  ([#3201](https://github.com/nim-lang/Nim/issues/3201))\n- Fixed \"C Compile-time error with generic proc type.\"\n  ([#2659](https://github.com/nim-lang/Nim/issues/2659))\n- Fixed \"ICE dereferencing array pointer\"\n  ([#2240](https://github.com/nim-lang/Nim/issues/2240))\n- Fixed \"Lambda lifting crash\"\n  ([#2007](https://github.com/nim-lang/Nim/issues/2007))\n- Fixed \"Can't reference outer variables from a closure in an iterator\"\n  ([#2604](https://github.com/nim-lang/Nim/issues/2604))\n- Fixed \"M&S collector breaks with nested for loops.\"\n  ([#603](https://github.com/nim-lang/Nim/issues/603))\n- Fixed \"Regression: bad C codegen\"\n  ([#3723](https://github.com/nim-lang/Nim/issues/3723))\n- Fixed \"JS backend - handle bool type in case statement\"\n  ([#3722](https://github.com/nim-lang/Nim/issues/3722))\n- Fixed \"linenoise compilation with cpp\"\n  ([#3720](https://github.com/nim-lang/Nim/issues/3720))\n- Fixed \"(???,???) duplicate case label\"\n  ([#3665](https://github.com/nim-lang/Nim/issues/3665))\n- Fixed \"linenoise compilation with cpp\"\n  ([#3720](https://github.com/nim-lang/Nim/issues/3720))\n- Fixed \"Update list of backward incompatibilities for Nim 0.12.0 in the main site\"\n  ([#3689](https://github.com/nim-lang/Nim/issues/3689))\n- Fixed \"Can't compile nimble with latest devel - codegen bug\"\n  ([#3730](https://github.com/nim-lang/Nim/issues/3730))\n", "tags": ["nim", "python"], "published_at": "", "id": 24}, {"title": "Nim in Action is now available!", "slug": "nim-in-action-now-available", "content": "<div class=\"center\">  <a href=\"https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81\">    <img src=\"{{site.baseurl}}/assets/niminaction/banner.jpg\" alt=\"New in Manning Early Access Program: Nim in Action!\" width=\"400\"/>  </a></div>We are proud to announce that *Nim in Action*, a book about the Nim programminglanguage, is now available!The book is available at this URL:[https://www.manning.com/books/nim-in-action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)The first three chapters are available for downloadas an eBook through Manning's Early Access program. You can download a freesample of the book containing the first chapter as well!*Nim in Action* is currently being written and is expected to be completed bySummer 2016. If you purchase the eBook you will start receiving new chaptersas they become available. You can also purchase the printed book together withthe eBook for a slightly higher price.If you do read the book, even if it's just the first chapter, then please shareany comments, suggestions and questions on the[Nim forum](http://forum.nim-lang.org/t/1978) or inManning's own [Author Online forum!](https://forums.manning.com/forums/nim-in-action)", "content_with_meta": "---\ntitle: \"Nim in Action is now available!\"\nexcerpt: \"We are proud to announce that Nim in Action, a book about\nthe Nim programming language, is now available!\"\nauthor: Dominik Picheta\n---\n\n<div class=\"center\">\n  <a href=\"https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81\">\n    <img src=\"{{site.baseurl}}/assets/niminaction/banner.jpg\" alt=\"New in Manning Early Access Program: Nim in Action!\" width=\"400\"/>\n  </a>\n</div>\n\nWe are proud to announce that *Nim in Action*, a book about the Nim programming\nlanguage, is now available!\n\nThe book is available at this URL:\n[https://www.manning.com/books/nim-in-action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)\n\nThe first three chapters are available for download\nas an eBook through Manning's Early Access program. You can download a free\nsample of the book containing the first chapter as well!\n\n*Nim in Action* is currently being written and is expected to be completed by\nSummer 2016. If you purchase the eBook you will start receiving new chapters\nas they become available. You can also purchase the printed book together with\nthe eBook for a slightly higher price.\n\nIf you do read the book, even if it's just the first chapter, then please share\nany comments, suggestions and questions on the\n[Nim forum](http://forum.nim-lang.org/t/1978) or in\nManning's own [Author Online forum!](https://forums.manning.com/forums/nim-in-action)\n", "tags": [""], "published_at": "", "id": 25}, {"title": "Meet our BountySource sponsors", "slug": "meet-our-bountysource-sponsors", "content": "---<a href=\"{{site.baseurl}}/sponsors.html\">  <img src=\"{{site.baseurl}}/assets/bountysource/meet_sponsors.png\" alt=\"Meet our BountySource sponsors!\" width=\"400\"/></a>It has now been two months since we began our[BountySource fundraiser](https://salt.bountysource.com/teams/nim). Wepromised to create a \"Current sponsors\" page and are happy to announce thatit is now live [here](http://nim-lang.org/sponsors.html).We are happy to say that last month we raised more than in the previous month!A staggering $862 was raised during that month and we thank each and every oneof you once again for your generous contributions.We are gearing up for a brand new release of Nim that includes many bug fixesand some new features. In the meantime, as always, feel free to get intouch with us via [Twitter](https://twitter.com/nim_lang), the[#nim channel on Freenode](http://webchat.freenode.net/?channels=nim)or via email at contact@nim-lang.org.Thanks for reading!", "content_with_meta": "---\ntitle: \"Meet our BountySource sponsors\"\nexcerpt: \"It has now been two months since we began our fundraiser. Time to meet\n          our current sponsors.\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n---\n\n<a href=\"{{site.baseurl}}/sponsors.html\">\n  <img src=\"{{site.baseurl}}/assets/bountysource/meet_sponsors.png\" alt=\"Meet our BountySource sponsors!\" width=\"400\"/>\n</a>\n\nIt has now been two months since we began our\n[BountySource fundraiser](https://salt.bountysource.com/teams/nim). We\npromised to create a \"Current sponsors\" page and are happy to announce that\nit is now live [here](http://nim-lang.org/sponsors.html).\n\nWe are happy to say that last month we raised more than in the previous month!\nA staggering $862 was raised during that month and we thank each and every one\nof you once again for your generous contributions.\n\nWe are gearing up for a brand new release of Nim that includes many bug fixes\nand some new features. In the meantime, as always, feel free to get in\ntouch with us via [Twitter](https://twitter.com/nim_lang), the\n[#nim channel on Freenode](http://webchat.freenode.net/?channels=nim)\nor via email at contact@nim-lang.org.\n\nThanks for reading!\n", "tags": ["nim", "python"], "published_at": "", "id": 26}, {"title": "Version 0.14.0 released", "slug": "version-released", "content": "It's been a while since the last release, but we've been very busy in themeantime. Inaddition to working on Nim we have started a[BountySource campaign](https://salt.bountysource.com/teams/nim) andannounced the pre-release of a new Nim book titled[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81).Our BountySource campaign has already been very successful, helping us raiseenough funds to surpass 4 of our monthly goals. The companies and individualsthat made this possible are listed on our brand new[sponsors page](http://nim-lang.org/sponsors.html).This release includes over 260 bug fixes. As mentioned in the previous releaseannouncement, one of the focuses of this release was going to be improvementsto the GC. Indeed, the most prominent fixes are related to the GC not collectingcycles properly. This was a major problem that was triggered typically whenapplications using asynchronous I/O were left running for long periods of time.There have also been many fixes to the way that the compiler sources areinstalled. Some applications such as Nimble depend on these sources and theyare now included in the release tarballs. This should fix many of the problemsthat users experienced trying to compile the Nimble package manager.Finally, you will find multiple changes in the standard library. Some of whichunfortunately affects backwards compatibility. This includes the ``random``procedures being moved to a new ``random`` module, HTTP headers being storedin a new ``HttpHeaders`` object and the ``round`` procedure in the ``math`` modulebeing changed to return a ``float`` instead of an ``int``. You can find a fulllist of such changes below.Together with the new release of Nim, we are also releasing a new version ofNimble. The release notes for it are available on[GitHub](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#074---06062016).As always you can download the latest version of Nim from the[download](http://nim-lang.org/download.html) page.We hope that you will like this new release. Let us know if you run intoany trouble, have any questions or want to give some feedback. You can getin touch with us on the [Forum](http://forum.nim-lang.org/),[IRC](http://webchat.freenode.net/?channels=nim),[Twitter](http://twitter.com/nim_lang),or via email contact@nim-lang.org.Happy coding!Changes affecting backwards compatibility------------------------------------------ ``--out`` and ``--nimcache`` command line arguments are now relative to  current directory. Previously they were relative to project directory.- The json module now stores the name/value pairs in objects internally as a  hash table of type ``fields*: Table[string, JsonNode]`` instead of a  sequence. This means that order is no longer preserved. When using the  ``table.mpairs`` iterator only the returned values can be modified, no  longer the keys.- The deprecated Nim shebang notation ``#!`` was removed from the language. Use ``#?`` instead.- Typeless parameters have been removed from the language since it would  clash with ``using``.- Procedures in ``mersenne.nim`` (Mersenne Twister implementation) no longer  accept and produce ``int`` values which have platform-dependent size -  they use ``uint32`` instead.- The ``strutils.unindent`` procedure has been rewritten. Its parameters now  match the parameters of ``strutils.indent``. See issue [#4037](https://github.com/nim-lang/Nim/issues/4037).  for more details.- The ``matchers`` module has been deprecated. See issue [#2446](https://github.com/nim-lang/Nim/issues/2446)  for more details.- The ``json.[]`` no longer returns ``nil`` when a key is not found. Instead it  raises a ``KeyError`` exception. You can compile with the ``-d:nimJsonGet``  flag to get a list of usages of ``[]``, as well as to restore the operator's  previous behaviour.- When using ``useMalloc``, an additional header containing the size of the  allocation will be allocated, to support zeroing memory on realloc as expected  by the language. With this change, ``alloc`` and ``dealloc`` are no longer  aliases for ``malloc`` and ``free`` - use ``c_malloc`` and ``c_free`` if  you need that.- The ``json.%`` operator is now overloaded for ``object``, ``ref object`` and  ``openarray[T]``.- The procs related to ``random`` number generation in ``math.nim`` have  been moved to its own ``random`` module and been reimplemented in pure  Nim.- The path handling changed. The project directory is not added to the  search path automatically anymore. Add this line to your project's  config to get back the old behaviour: ``--path:\"$projectdir\"``. (The compiler  replaces ``$projectdir`` with your project's absolute directory when compiling,  so you don't need to replace ``$projectdir`` by your project's actual  directory!). See issue [#546](https://github.com/nim-lang/Nim/issues/546)  and [this forum thread](http://forum.nim-lang.org/t/2277) for more  information.- The ``round`` function in ``math.nim`` now returns a float and has been  corrected such that the C implementation always rounds up from .5 rather  than changing the operation for even and odd numbers.- The ``round`` function now accepts a ``places`` argument to round to a  given number of places (e.g. round 4.35 to 4.4 if ``places`` is 1).- In ``strutils.nim``, ``formatSize`` now returns a number representing the  size in conventional decimal format (e.g. 2.234GB meaning 2.234 GB rather  than meaning 2.285 GB as in the previous implementation).  By default it  also uses IEC prefixes (KiB, MiB) etc and optionally uses colloquial names  (kB, MB etc) and the (SI-preferred) space.- The ``==`` operator for ``cstring`` now implements a value comparison  for the C backend (using ``strcmp``), not reference comparisons anymore.  Convert the cstrings to pointers if you really want reference equality  for speed.- HTTP headers are now stored in a ``HttpHeaders`` object instead of a  ``StringTableRef``. This object allows multiple values to be associated with  a single key. A new ``httpcore`` module implements it and it is used by  both ``asynchttpserver`` and ``httpclient``.## The ``using`` statementThe ``using`` statement now has a different meaning.In version 0.13.0, itwas used to provide syntactic convenience for procedures that heavily usea single contextual parameter. For example:```nimvar socket = newSocket()using socketconnect(\"google.com\", Port(80))send(\"GET / HTTP/1.1\\c\\l\")```The ``connect`` and ``send`` calls are both transformed so that they pass``socket`` as the first argument:```nimvar socket = newSocket()socket.connect(\"google.com\", Port(80))socket.send(\"GET / HTTP/1.1\\c\\l\")```Take a look at the old version of the[manual](http://nim-lang.org/0.13.0/manual.html#statements-and-expressions-using-statement)to learn more about the old behaviour.In 0.14.0,the ``using`` statementinstead provides a syntactic convenience for procedure definitions where thesame parameter names and types are used repeatedly. For example, instead ofwriting:```nimproc foo(c: Context; n: Node) = ...proc bar(c: Context; n: Node, counter: int) = ...proc baz(c: Context; n: Node) = ...```You can simply write:```nim{.experimental.}using  c: Context  n: Node  counter: intproc foo(c, n) = ...proc bar(c, n, counter) = ...proc baz(c, n) = ...```Again, the[manual](http://nim-lang.org/docs/manual.html#statements-and-expressions-using-statement)has more details.You can still achieve a similar effect to what the old ``using`` statementtried to achieve by using the new experimental ``this`` pragma, documented[here](http://nim-lang.org/docs/manual.html#overloading-resolution-automatic-self-insertions).## Generic type classesGeneric type classes are now handled properly in the compiler, but thismeans code like the following does not compile any longer:```nimtype  Vec3[T] = distinct array[3, T]proc vec3*[T](a, b, c: T): Vec3[T] = Vec3([a, b, c])```While every ``Vec3[T]`` is part of the ``Vec3`` type class, the reverseis not true, not every ``Vec3`` is a ``Vec3[T]``. Otherwise there wouldbe a subtype relation between ``Vec3[int]`` and ``Vec3[float]`` and thereis none for Nim. The fix is to write this instead:```nimtype  Vec3[T] = distinct array[3, T]proc vec3*[T](a, b, c: T): Vec3[T] = Vec3[T]([a, b, c])```Note that in general we don't advise to use ``distinct array``,use ``object`` instead.Library Additions------------------ The rlocks module has been added providing a reentrant lock synchronization  primitive.- A generic \"sink operator\" written as ``&=`` has been added to the``system`` and the ``net`` modules. This operator is similar to the C++``<<`` operator which writes data to a stream.- Added ``strscans`` module that implements a ``scanf`` for easy input extraction.- Added a version of ``parseutils.parseUntil`` that can deal with a string  ``until`` token. The other versions are for ``char`` and ``set[char]``.- Added ``splitDecimal`` to ``math.nim`` to split a floating point value  into an integer part and a floating part (in the range -1<x<1).- Added ``trimZeros`` to ``strutils.nim`` to trim trailing zeros in a  floating point number.- Added ``formatEng`` to ``strutils.nim`` to format numbers using engineering  notation.Compiler Additions------------------- Added a new ``--noCppExceptions`` switch that allows to use default exception  handling (no ``throw`` or ``try``/``catch`` generated) when compiling to C++  code.Language Additions------------------- Nim now supports a ``.this`` pragma for more notational convenience.  See [automatic-self-insertions](../docs/manual.html#overloading-resolution-automatic-self-insertions) for more information.- Nim now supports a different ``using`` statement for more convenience.  Consult [using-statement](../docs/manual.html#statements-and-expressions-using-statement) for more information.- ``include`` statements are not restricted to top level statements anymore...  - Nim now supports ``partial`` object declarations to mitigate the problems    that arise when types are mutually dependent and yet should be kept in    different modules.Bugfixes--------The list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-01-19+..+2016-06-06%22+).  - Fixed \"Calling generic templates with explicit generic arguments crashes compiler\"    ([#3496](https://github.com/nim-lang/Nim/issues/3496))  - Fixed \"JS backend - strange utf-8 handling\"    ([#3714](https://github.com/nim-lang/Nim/issues/3714))  - Fixed \"execvpe is glibc specific\"    ([#3759](https://github.com/nim-lang/Nim/issues/3759))  - Fixed \"GC stack overflow with in data structures with circular references.\"    ([#1895](https://github.com/nim-lang/Nim/issues/1895))  - Fixed \"Internal compiler error in genTraverseProc\"    ([#3794](https://github.com/nim-lang/Nim/issues/3794))  - Fixed \"unsafeAddr fails in generic context\"    ([#3736](https://github.com/nim-lang/Nim/issues/3736))  - Fixed \"Generic converters produce internal errors\"    ([#3799](https://github.com/nim-lang/Nim/issues/3799))  - Fixed \"Cannot have two anonymous iterators in one proc\"    ([#3788](https://github.com/nim-lang/Nim/issues/3788))  - Fixed \"pure/net.nim fails to compile with --taintMode:on on HEAD\"    ([#3789](https://github.com/nim-lang/Nim/issues/3789))  - Fixed \"Using break inside iterator may produce memory/resource leak\"    ([#3802](https://github.com/nim-lang/Nim/issues/3802))  - Fixed \"--out and --nimcache wrong paths\"    ([#3871](https://github.com/nim-lang/Nim/issues/3871))  - Fixed \"Release 0.13.0: documentation build failure\"    ([#3823](https://github.com/nim-lang/Nim/issues/3823))  - Fixed \"https post request\"    ([#3895](https://github.com/nim-lang/Nim/issues/3895))  - Fixed \"writeFile regression in nimscript\"    ([#3901](https://github.com/nim-lang/Nim/issues/3901))  - Fixed \"Cannot convert variables to int16 at compile time\"    ([#3916](https://github.com/nim-lang/Nim/issues/3916))  - Fixed \"Error in concepts when using functions on typedesc\"    ([#3686](https://github.com/nim-lang/Nim/issues/3686))  - Fixed \"Multiple generic table types with different type signatures lead to compilation errors.\"    ([#3669](https://github.com/nim-lang/Nim/issues/3669))  - Fixed \"Explicit arguments with overloaded procedure?\"    ([#3836](https://github.com/nim-lang/Nim/issues/3836))  - Fixed \"doc2 generates strange output for proc generated by template\"    ([#3868](https://github.com/nim-lang/Nim/issues/3868))  - Fixed \"Passing const value as static[] argument to immediate macro leads to infinite memory consumption by compiler\"    ([#3872](https://github.com/nim-lang/Nim/issues/3872))  - Fixed \"`..<` is not happy with `BiggestInt` from `intVal`\"    ([#3767](https://github.com/nim-lang/Nim/issues/3767))  - Fixed \"stdtmpl filter does not support anything apart from '#' metachar\"    ([#3924](https://github.com/nim-lang/Nim/issues/3924))  - Fixed \"lib/pure/net: Can't bind to ports >= 32768\"    ([#3484](https://github.com/nim-lang/Nim/issues/3484))  - Fixed \"int and float assignment compatibility badly broken for generics\"    ([#3998](https://github.com/nim-lang/Nim/issues/3998))  - Fixed \"Adding echo statement causes \"type mismatch\" error\"    ([#3975](https://github.com/nim-lang/Nim/issues/3975))  - Fixed \"Dynlib error messages should be written to stderr, not stdout\"    ([#3987](https://github.com/nim-lang/Nim/issues/3987))  - Fixed \"Tests regressions while using the devel branch\"    ([#4005](https://github.com/nim-lang/Nim/issues/4005))  - Fixed \"Lambda lifting bug: wrong c code generation\"    ([#3995](https://github.com/nim-lang/Nim/issues/3995))  - Fixed \"VM crashes in asgnComplex\"    ([#3973](https://github.com/nim-lang/Nim/issues/3973))  - Fixed \"Unknown opcode opcNGetType\"    ([#1152](https://github.com/nim-lang/Nim/issues/1152))  - Fixed \"`&` operator mutates first operand when used in compileTime proc while assigning result to seq\"    ([#3804](https://github.com/nim-lang/Nim/issues/3804))  - Fixed \"''nil' statement is deprecated' in macro\"    ([#3561](https://github.com/nim-lang/Nim/issues/3561))  - Fixed \"vm crash when accessing seq with mitems iterator\"    ([#3731](https://github.com/nim-lang/Nim/issues/3731))  - Fixed \"`mitems` or `mpairs` does not work for `seq[NimNode]` or `array[T,NimNode]` in a macro\"    ([#3859](https://github.com/nim-lang/Nim/issues/3859))  - Fixed \"passing \"proc `,`()\" to nim check causes an infinite loop\"    ([#4036](https://github.com/nim-lang/Nim/issues/4036))  - Fixed \"--dynlibOverride does not work with {.push dynlib: name.}\"    ([#3646](https://github.com/nim-lang/Nim/issues/3646))  - Fixed \"system.readChars fails on big len\"    ([#3752](https://github.com/nim-lang/Nim/issues/3752))  - Fixed \"strutils.unindent\"    ([#4037](https://github.com/nim-lang/Nim/issues/4037))  - Fixed \"Compiler's infinite recursion in generic resolution\"    ([#2006](https://github.com/nim-lang/Nim/issues/2006))  - Fixed \"Linux: readLineFromStdin calls quit(0) upon EOF\"    ([#3159](https://github.com/nim-lang/Nim/issues/3159))  - Fixed \"Forum sign up not possible\"    ([#2446](https://github.com/nim-lang/Nim/issues/2446))  - Fixed \"Json module - SIGSEGV if key not exists\"    ([#3107](https://github.com/nim-lang/Nim/issues/3107))  - Fixed \"About asyncdispatch.await and exception\"    ([#3964](https://github.com/nim-lang/Nim/issues/3964))  - Fixed \"Need testcase for JS backend to ensure closure callbacks don't break\"    ([#3132](https://github.com/nim-lang/Nim/issues/3132))  - Fixed \"Unexpected behaviour of C++ templates in conjunction with N_NIMCALL\"    ([#4093](https://github.com/nim-lang/Nim/issues/4093))  - Fixed \"SIGSEGV at compile time when using a compileTime variable as counter\"    ([#4097](https://github.com/nim-lang/Nim/issues/4097))  - Fixed \"Compiler crash issue on 32-bit machines only\"    ([#4089](https://github.com/nim-lang/Nim/issues/4089))  - Fixed \"type mismatch: got (<type>) but expected 'outType' in mapIt\"    ([#4124](https://github.com/nim-lang/Nim/issues/4124))  - Fixed \"Generic type constraints broken?\"    ([#4084](https://github.com/nim-lang/Nim/issues/4084))  - Fixed \"Invalid C code generated\"    ([#3544](https://github.com/nim-lang/Nim/issues/3544))  - Fixed \"An exit variable in proc shadows exit function called by quit()\"    ([#3471](https://github.com/nim-lang/Nim/issues/3471))  - Fixed \"ubuntu 16.04 build error\"    ([#4144](https://github.com/nim-lang/Nim/issues/4144))  - Fixed \"Ambiguous identifier error should list all possible qualifiers\"    ([#177](https://github.com/nim-lang/Nim/issues/177))  - Fixed \"Parameters are not captured inside closures inside closure iterators\"    ([#4070](https://github.com/nim-lang/Nim/issues/4070))  - Fixed \"`$` For array crashes the compiler when assigned to const\"    ([#4040](https://github.com/nim-lang/Nim/issues/4040))  - Fixed \"Default value for .importcpp enum is initialized incorrectly\"    ([#4034](https://github.com/nim-lang/Nim/issues/4034))  - Fixed \"Nim doesn't instantiate template parameter in cgen when using procedure return value in for-in loop\"    ([#4110](https://github.com/nim-lang/Nim/issues/4110))  - Fixed \"Compile-time SIGSEGV when invoking procedures that cannot be evaluated at compile time from a macro\"    ([#3956](https://github.com/nim-lang/Nim/issues/3956))  - Fixed \"Backtricks inside .emit pragma output incorrect name for types\"    ([#3992](https://github.com/nim-lang/Nim/issues/3992))  - Fixed \"typedef is generated for .importcpp enums\"    ([#4145](https://github.com/nim-lang/Nim/issues/4145))  - Fixed \"Incorrect C code generated for nnkEmpty node\"    ([#950](https://github.com/nim-lang/Nim/issues/950))  - Fixed \"Syntax error in config file appears as general exception without useful info\"    ([#3763](https://github.com/nim-lang/Nim/issues/3763))  - Fixed \"Converting .importcpp enum to string doesn't work when done inside procs\"    ([#4147](https://github.com/nim-lang/Nim/issues/4147))  - Fixed \"Enum template specifiers do not work for .importcpp enums when they are used as a parameter\"    ([#4146](https://github.com/nim-lang/Nim/issues/4146))  - Fixed \"Providing template specifier recursively for .importcpp type doesn't work\"    ([#4148](https://github.com/nim-lang/Nim/issues/4148))  - Fixed \"sizeof doesn't work for generics in vm\"    ([#4153](https://github.com/nim-lang/Nim/issues/4153))  - Fixed \"Creating list-like structures in a loop leaks memory indefinitely\"    ([#3793](https://github.com/nim-lang/Nim/issues/3793))  - Fixed \"Creating list-like structures in a loop leaks memory indefinitely\"    ([#3793](https://github.com/nim-lang/Nim/issues/3793))  - Fixed \"Enum items generated by a macro have wrong type.\"    ([#4066](https://github.com/nim-lang/Nim/issues/4066))  - Fixed \"Memory leak with default GC\"    ([#3184](https://github.com/nim-lang/Nim/issues/3184))  - Fixed \"Rationals Overflow Error on 32-bit machine\"    ([#4194](https://github.com/nim-lang/Nim/issues/4194))  - Fixed \"osproc waitForExit() is ignoring the timeout parameter\"    ([#4200](https://github.com/nim-lang/Nim/issues/4200))  - Fixed \"Regression: exception parseFloat(\"-0.0\") \"    ([#4212](https://github.com/nim-lang/Nim/issues/4212))  - Fixed \"JS Codegen: Bad constant initialization order\"    ([#4222](https://github.com/nim-lang/Nim/issues/4222))  - Fixed \"Term-rewriting macros gives Error: wrong number of arguments\"    ([#4227](https://github.com/nim-lang/Nim/issues/4227))  - Fixed \"importcpp allowed in body of proc after push\"    ([#4225](https://github.com/nim-lang/Nim/issues/4225))  - Fixed \"pragma SIGSEGV\"    ([#4001](https://github.com/nim-lang/Nim/issues/4001))  - Fixed \"Restrict hints to the current project\"    ([#2159](https://github.com/nim-lang/Nim/issues/2159))  - Fixed \"`unlikely`/`likely` should be no-ops for the Javascript backend\"    ([#3882](https://github.com/nim-lang/Nim/issues/3882))  - Fixed \".this pragma doesn't work for fields and procs defined for parent type\"    ([#4177](https://github.com/nim-lang/Nim/issues/4177))  - Fixed \"VM SIGSEV with compile-time Table\"    ([#3729](https://github.com/nim-lang/Nim/issues/3729))  - Fixed \"Error during compilation with cpp option on FreeBSD \"    ([#3059](https://github.com/nim-lang/Nim/issues/3059))  - Fixed \"Compiler doesn't keep type bounds\"    ([#1713](https://github.com/nim-lang/Nim/issues/1713))  - Fixed \"Stdlib: future: Shortcut proc definition doesn't support, varargs, seqs, arrays, or openarrays\"    ([#4238](https://github.com/nim-lang/Nim/issues/4238))  - Fixed \"Why don't ``asynchttpserver`` support request-body when ``put`` ``delete``?\"    ([#4221](https://github.com/nim-lang/Nim/issues/4221))  - Fixed \"Paths for includes in Nim documentation\"    ([#2640](https://github.com/nim-lang/Nim/issues/2640))  - Fixed \"Compile pragma doesn't work with relative import\"    ([#1262](https://github.com/nim-lang/Nim/issues/1262))  - Fixed \"Slurp doesn't work with relative imports\"    ([#765](https://github.com/nim-lang/Nim/issues/765))  - Fixed \"Make tilde expansion consistent\"    ([#786](https://github.com/nim-lang/Nim/issues/786))  - Fixed \"koch expects nim to be in path for tests?\"    ([#3290](https://github.com/nim-lang/Nim/issues/3290))  - Fixed \"Don't use relative imports for non relative modules (aka babel libs)\"    ([#546](https://github.com/nim-lang/Nim/issues/546))  - Fixed \"\"echo\" on general structs does not work\"    ([#4236](https://github.com/nim-lang/Nim/issues/4236))  - Fixed \"Changing math.round() and adding math.integer()\"    ([#3473](https://github.com/nim-lang/Nim/issues/3473))  - Fixed \"Mathematics module missing modf\"    ([#4195](https://github.com/nim-lang/Nim/issues/4195))  - Fixed \"Passing method to macro causes seg fault\"    ([#1611](https://github.com/nim-lang/Nim/issues/1611))  - Fixed \"Internal error with \"discard quit\"\"    ([#3532](https://github.com/nim-lang/Nim/issues/3532))  - Fixed \"SIGSEGV when using object variant in compile time\"    ([#4207](https://github.com/nim-lang/Nim/issues/4207))  - Fixed \"formatSize has incorrect prefix\"    ([#4198](https://github.com/nim-lang/Nim/issues/4198))  - Fixed \"Add compiler parameter to generate output from source code filters\"    ([#375](https://github.com/nim-lang/Nim/issues/375))  - Fixed \"Add engineering notation to string formatting functions\"    ([#4197](https://github.com/nim-lang/Nim/issues/4197))  - Fixed \"Very minor error in json documentation\"    ([#4255](https://github.com/nim-lang/Nim/issues/4255))  - Fixed \"can't compile when checking if closure == nil\"    ([#4186](https://github.com/nim-lang/Nim/issues/4186))  - Fixed \"Strange code gen for procs returning arrays\"    ([#2259](https://github.com/nim-lang/Nim/issues/2259))  - Fixed \"asynchttpserver may consume unbounded memory reading headers\"    ([#3847](https://github.com/nim-lang/Nim/issues/3847))  - Fixed \"download page still implies master is default branch\"    ([#4022](https://github.com/nim-lang/Nim/issues/4022))  - Fixed \"Use standard compiler flags in build script\"    ([#2128](https://github.com/nim-lang/Nim/issues/2128))  - Fixed \"CentOS 6 (gcc-4.4.7) compilation failed (redefinition of typedef)\"    ([#4272](https://github.com/nim-lang/Nim/issues/4272))  - Fixed \"doc2 has issues with httpclient\"    ([#4278](https://github.com/nim-lang/Nim/issues/4278))  - Fixed \"tuples/tuple_with_nil fails without unsigned module\"    ([#3579](https://github.com/nim-lang/Nim/issues/3579))", "content_with_meta": "---\ntitle: \"Version 0.14.0 released\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nIt's been a while since the last release, but we've been very busy in the\nmeantime. In\naddition to working on Nim we have started a\n[BountySource campaign](https://salt.bountysource.com/teams/nim) and\nannounced the pre-release of a new Nim book titled\n[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81).\nOur BountySource campaign has already been very successful, helping us raise\nenough funds to surpass 4 of our monthly goals. The companies and individuals\nthat made this possible are listed on our brand new\n[sponsors page](http://nim-lang.org/sponsors.html).\n\nThis release includes over 260 bug fixes. As mentioned in the previous release\nannouncement, one of the focuses of this release was going to be improvements\nto the GC. Indeed, the most prominent fixes are related to the GC not collecting\ncycles properly. This was a major problem that was triggered typically when\napplications using asynchronous I/O were left running for long periods of time.\n\nThere have also been many fixes to the way that the compiler sources are\ninstalled. Some applications such as Nimble depend on these sources and they\nare now included in the release tarballs. This should fix many of the problems\nthat users experienced trying to compile the Nimble package manager.\n\nFinally, you will find multiple changes in the standard library. Some of which\nunfortunately affects backwards compatibility. This includes the ``random``\nprocedures being moved to a new ``random`` module, HTTP headers being stored\nin a new ``HttpHeaders`` object and the ``round`` procedure in the ``math`` module\nbeing changed to return a ``float`` instead of an ``int``. You can find a full\nlist of such changes below.\n\nTogether with the new release of Nim, we are also releasing a new version of\nNimble. The release notes for it are available on\n[GitHub](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#074---06062016).\n\nAs always you can download the latest version of Nim from the\n[download](http://nim-lang.org/download.html) page.\n\nWe hope that you will like this new release. Let us know if you run into\nany trouble, have any questions or want to give some feedback. You can get\nin touch with us on the [Forum](http://forum.nim-lang.org/),\n[IRC](http://webchat.freenode.net/?channels=nim),\n[Twitter](http://twitter.com/nim_lang),\nor via email contact@nim-lang.org.\n\nHappy coding!\n\nChanges affecting backwards compatibility\n-----------------------------------------\n\n- ``--out`` and ``--nimcache`` command line arguments are now relative to\n  current directory. Previously they were relative to project directory.\n- The json module now stores the name/value pairs in objects internally as a\n  hash table of type ``fields*: Table[string, JsonNode]`` instead of a\n  sequence. This means that order is no longer preserved. When using the\n  ``table.mpairs`` iterator only the returned values can be modified, no\n  longer the keys.\n- The deprecated Nim shebang notation ``#!`` was removed from the language. Use ``#?`` instead.\n- Typeless parameters have been removed from the language since it would\n  clash with ``using``.\n- Procedures in ``mersenne.nim`` (Mersenne Twister implementation) no longer\n  accept and produce ``int`` values which have platform-dependent size -\n  they use ``uint32`` instead.\n- The ``strutils.unindent`` procedure has been rewritten. Its parameters now\n  match the parameters of ``strutils.indent``. See issue [#4037](https://github.com/nim-lang/Nim/issues/4037).\n  for more details.\n- The ``matchers`` module has been deprecated. See issue [#2446](https://github.com/nim-lang/Nim/issues/2446)\n  for more details.\n- The ``json.[]`` no longer returns ``nil`` when a key is not found. Instead it\n  raises a ``KeyError`` exception. You can compile with the ``-d:nimJsonGet``\n  flag to get a list of usages of ``[]``, as well as to restore the operator's\n  previous behaviour.\n- When using ``useMalloc``, an additional header containing the size of the\n  allocation will be allocated, to support zeroing memory on realloc as expected\n  by the language. With this change, ``alloc`` and ``dealloc`` are no longer\n  aliases for ``malloc`` and ``free`` - use ``c_malloc`` and ``c_free`` if\n  you need that.\n- The ``json.%`` operator is now overloaded for ``object``, ``ref object`` and\n  ``openarray[T]``.\n- The procs related to ``random`` number generation in ``math.nim`` have\n  been moved to its own ``random`` module and been reimplemented in pure\n  Nim.\n- The path handling changed. The project directory is not added to the\n  search path automatically anymore. Add this line to your project's\n  config to get back the old behaviour: ``--path:\"$projectdir\"``. (The compiler\n  replaces ``$projectdir`` with your project's absolute directory when compiling,\n  so you don't need to replace ``$projectdir`` by your project's actual\n  directory!). See issue [#546](https://github.com/nim-lang/Nim/issues/546)\n  and [this forum thread](http://forum.nim-lang.org/t/2277) for more\n  information.\n- The ``round`` function in ``math.nim`` now returns a float and has been\n  corrected such that the C implementation always rounds up from .5 rather\n  than changing the operation for even and odd numbers.\n- The ``round`` function now accepts a ``places`` argument to round to a\n  given number of places (e.g. round 4.35 to 4.4 if ``places`` is 1).\n- In ``strutils.nim``, ``formatSize`` now returns a number representing the\n  size in conventional decimal format (e.g. 2.234GB meaning 2.234 GB rather\n  than meaning 2.285 GB as in the previous implementation).  By default it\n  also uses IEC prefixes (KiB, MiB) etc and optionally uses colloquial names\n  (kB, MB etc) and the (SI-preferred) space.\n- The ``==`` operator for ``cstring`` now implements a value comparison\n  for the C backend (using ``strcmp``), not reference comparisons anymore.\n  Convert the cstrings to pointers if you really want reference equality\n  for speed.\n- HTTP headers are now stored in a ``HttpHeaders`` object instead of a\n  ``StringTableRef``. This object allows multiple values to be associated with\n  a single key. A new ``httpcore`` module implements it and it is used by\n  both ``asynchttpserver`` and ``httpclient``.\n\n## The ``using`` statement\n\nThe ``using`` statement now has a different meaning.\n\nIn version 0.13.0, it\nwas used to provide syntactic convenience for procedures that heavily use\na single contextual parameter. For example:\n\n```nim\nvar socket = newSocket()\nusing socket\n\nconnect(\"google.com\", Port(80))\nsend(\"GET / HTTP/1.1\\c\\l\")\n```\n\nThe ``connect`` and ``send`` calls are both transformed so that they pass\n``socket`` as the first argument:\n\n```nim\nvar socket = newSocket()\n\nsocket.connect(\"google.com\", Port(80))\nsocket.send(\"GET / HTTP/1.1\\c\\l\")\n```\n\nTake a look at the old version of the\n[manual](http://nim-lang.org/0.13.0/manual.html#statements-and-expressions-using-statement)\nto learn more about the old behaviour.\n\nIn 0.14.0,\nthe ``using`` statement\ninstead provides a syntactic convenience for procedure definitions where the\nsame parameter names and types are used repeatedly. For example, instead of\nwriting:\n\n```nim\nproc foo(c: Context; n: Node) = ...\nproc bar(c: Context; n: Node, counter: int) = ...\nproc baz(c: Context; n: Node) = ...\n```\n\nYou can simply write:\n\n```nim\n{.experimental.}\nusing\n  c: Context\n  n: Node\n  counter: int\n\nproc foo(c, n) = ...\nproc bar(c, n, counter) = ...\nproc baz(c, n) = ...\n```\n\nAgain, the\n[manual](http://nim-lang.org/docs/manual.html#statements-and-expressions-using-statement)\nhas more details.\n\nYou can still achieve a similar effect to what the old ``using`` statement\ntried to achieve by using the new experimental ``this`` pragma, documented\n[here](http://nim-lang.org/docs/manual.html#overloading-resolution-automatic-self-insertions).\n\n## Generic type classes\n\nGeneric type classes are now handled properly in the compiler, but this\nmeans code like the following does not compile any longer:\n\n```nim\ntype\n  Vec3[T] = distinct array[3, T]\n\nproc vec3*[T](a, b, c: T): Vec3[T] = Vec3([a, b, c])\n```\n\nWhile every ``Vec3[T]`` is part of the ``Vec3`` type class, the reverse\nis not true, not every ``Vec3`` is a ``Vec3[T]``. Otherwise there would\nbe a subtype relation between ``Vec3[int]`` and ``Vec3[float]`` and there\nis none for Nim. The fix is to write this instead:\n\n```nim\ntype\n  Vec3[T] = distinct array[3, T]\n\nproc vec3*[T](a, b, c: T): Vec3[T] = Vec3[T]([a, b, c])\n```\n\nNote that in general we don't advise to use ``distinct array``,\nuse ``object`` instead.\n\n\nLibrary Additions\n-----------------\n\n- The rlocks module has been added providing a reentrant lock synchronization\n  primitive.\n- A generic \"sink operator\" written as ``&=`` has been added to the\n``system`` and the ``net`` modules. This operator is similar to the C++\n``<<`` operator which writes data to a stream.\n- Added ``strscans`` module that implements a ``scanf`` for easy input extraction.\n- Added a version of ``parseutils.parseUntil`` that can deal with a string\n  ``until`` token. The other versions are for ``char`` and ``set[char]``.\n- Added ``splitDecimal`` to ``math.nim`` to split a floating point value\n  into an integer part and a floating part (in the range -1<x<1).\n- Added ``trimZeros`` to ``strutils.nim`` to trim trailing zeros in a\n  floating point number.\n- Added ``formatEng`` to ``strutils.nim`` to format numbers using engineering\n  notation.\n\n\nCompiler Additions\n------------------\n\n- Added a new ``--noCppExceptions`` switch that allows to use default exception\n  handling (no ``throw`` or ``try``/``catch`` generated) when compiling to C++\n  code.\n\nLanguage Additions\n------------------\n\n- Nim now supports a ``.this`` pragma for more notational convenience.\n  See [automatic-self-insertions](../docs/manual.html#overloading-resolution-automatic-self-insertions) for more information.\n- Nim now supports a different ``using`` statement for more convenience.\n  Consult [using-statement](../docs/manual.html#statements-and-expressions-using-statement) for more information.\n- ``include`` statements are not restricted to top level statements anymore.\n\n..\n  - Nim now supports ``partial`` object declarations to mitigate the problems\n    that arise when types are mutually dependent and yet should be kept in\n    different modules.\n\nBugfixes\n--------\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-01-19+..+2016-06-06%22+).\n\n\n  - Fixed \"Calling generic templates with explicit generic arguments crashes compiler\"\n    ([#3496](https://github.com/nim-lang/Nim/issues/3496))\n  - Fixed \"JS backend - strange utf-8 handling\"\n    ([#3714](https://github.com/nim-lang/Nim/issues/3714))\n  - Fixed \"execvpe is glibc specific\"\n    ([#3759](https://github.com/nim-lang/Nim/issues/3759))\n  - Fixed \"GC stack overflow with in data structures with circular references.\"\n    ([#1895](https://github.com/nim-lang/Nim/issues/1895))\n  - Fixed \"Internal compiler error in genTraverseProc\"\n    ([#3794](https://github.com/nim-lang/Nim/issues/3794))\n  - Fixed \"unsafeAddr fails in generic context\"\n    ([#3736](https://github.com/nim-lang/Nim/issues/3736))\n  - Fixed \"Generic converters produce internal errors\"\n    ([#3799](https://github.com/nim-lang/Nim/issues/3799))\n  - Fixed \"Cannot have two anonymous iterators in one proc\"\n    ([#3788](https://github.com/nim-lang/Nim/issues/3788))\n  - Fixed \"pure/net.nim fails to compile with --taintMode:on on HEAD\"\n    ([#3789](https://github.com/nim-lang/Nim/issues/3789))\n  - Fixed \"Using break inside iterator may produce memory/resource leak\"\n    ([#3802](https://github.com/nim-lang/Nim/issues/3802))\n\n  - Fixed \"--out and --nimcache wrong paths\"\n    ([#3871](https://github.com/nim-lang/Nim/issues/3871))\n  - Fixed \"Release 0.13.0: documentation build failure\"\n    ([#3823](https://github.com/nim-lang/Nim/issues/3823))\n  - Fixed \"https post request\"\n    ([#3895](https://github.com/nim-lang/Nim/issues/3895))\n  - Fixed \"writeFile regression in nimscript\"\n    ([#3901](https://github.com/nim-lang/Nim/issues/3901))\n  - Fixed \"Cannot convert variables to int16 at compile time\"\n    ([#3916](https://github.com/nim-lang/Nim/issues/3916))\n  - Fixed \"Error in concepts when using functions on typedesc\"\n    ([#3686](https://github.com/nim-lang/Nim/issues/3686))\n  - Fixed \"Multiple generic table types with different type signatures lead to compilation errors.\"\n    ([#3669](https://github.com/nim-lang/Nim/issues/3669))\n  - Fixed \"Explicit arguments with overloaded procedure?\"\n    ([#3836](https://github.com/nim-lang/Nim/issues/3836))\n  - Fixed \"doc2 generates strange output for proc generated by template\"\n    ([#3868](https://github.com/nim-lang/Nim/issues/3868))\n  - Fixed \"Passing const value as static[] argument to immediate macro leads to infinite memory consumption by compiler\"\n    ([#3872](https://github.com/nim-lang/Nim/issues/3872))\n  - Fixed \"`..<` is not happy with `BiggestInt` from `intVal`\"\n    ([#3767](https://github.com/nim-lang/Nim/issues/3767))\n  - Fixed \"stdtmpl filter does not support anything apart from '#' metachar\"\n    ([#3924](https://github.com/nim-lang/Nim/issues/3924))\n  - Fixed \"lib/pure/net: Can't bind to ports >= 32768\"\n    ([#3484](https://github.com/nim-lang/Nim/issues/3484))\n  - Fixed \"int and float assignment compatibility badly broken for generics\"\n    ([#3998](https://github.com/nim-lang/Nim/issues/3998))\n  - Fixed \"Adding echo statement causes \"type mismatch\" error\"\n    ([#3975](https://github.com/nim-lang/Nim/issues/3975))\n  - Fixed \"Dynlib error messages should be written to stderr, not stdout\"\n    ([#3987](https://github.com/nim-lang/Nim/issues/3987))\n  - Fixed \"Tests regressions while using the devel branch\"\n    ([#4005](https://github.com/nim-lang/Nim/issues/4005))\n\n  - Fixed \"Lambda lifting bug: wrong c code generation\"\n    ([#3995](https://github.com/nim-lang/Nim/issues/3995))\n  - Fixed \"VM crashes in asgnComplex\"\n    ([#3973](https://github.com/nim-lang/Nim/issues/3973))\n  - Fixed \"Unknown opcode opcNGetType\"\n    ([#1152](https://github.com/nim-lang/Nim/issues/1152))\n  - Fixed \"`&` operator mutates first operand when used in compileTime proc while assigning result to seq\"\n    ([#3804](https://github.com/nim-lang/Nim/issues/3804))\n  - Fixed \"''nil' statement is deprecated' in macro\"\n    ([#3561](https://github.com/nim-lang/Nim/issues/3561))\n  - Fixed \"vm crash when accessing seq with mitems iterator\"\n    ([#3731](https://github.com/nim-lang/Nim/issues/3731))\n  - Fixed \"`mitems` or `mpairs` does not work for `seq[NimNode]` or `array[T,NimNode]` in a macro\"\n    ([#3859](https://github.com/nim-lang/Nim/issues/3859))\n  - Fixed \"passing \"proc `,`()\" to nim check causes an infinite loop\"\n    ([#4036](https://github.com/nim-lang/Nim/issues/4036))\n  - Fixed \"--dynlibOverride does not work with {.push dynlib: name.}\"\n    ([#3646](https://github.com/nim-lang/Nim/issues/3646))\n  - Fixed \"system.readChars fails on big len\"\n    ([#3752](https://github.com/nim-lang/Nim/issues/3752))\n  - Fixed \"strutils.unindent\"\n    ([#4037](https://github.com/nim-lang/Nim/issues/4037))\n  - Fixed \"Compiler's infinite recursion in generic resolution\"\n    ([#2006](https://github.com/nim-lang/Nim/issues/2006))\n  - Fixed \"Linux: readLineFromStdin calls quit(0) upon EOF\"\n    ([#3159](https://github.com/nim-lang/Nim/issues/3159))\n  - Fixed \"Forum sign up not possible\"\n    ([#2446](https://github.com/nim-lang/Nim/issues/2446))\n  - Fixed \"Json module - SIGSEGV if key not exists\"\n    ([#3107](https://github.com/nim-lang/Nim/issues/3107))\n  - Fixed \"About asyncdispatch.await and exception\"\n    ([#3964](https://github.com/nim-lang/Nim/issues/3964))\n  - Fixed \"Need testcase for JS backend to ensure closure callbacks don't break\"\n    ([#3132](https://github.com/nim-lang/Nim/issues/3132))\n  - Fixed \"Unexpected behaviour of C++ templates in conjunction with N_NIMCALL\"\n    ([#4093](https://github.com/nim-lang/Nim/issues/4093))\n  - Fixed \"SIGSEGV at compile time when using a compileTime variable as counter\"\n    ([#4097](https://github.com/nim-lang/Nim/issues/4097))\n  - Fixed \"Compiler crash issue on 32-bit machines only\"\n    ([#4089](https://github.com/nim-lang/Nim/issues/4089))\n  - Fixed \"type mismatch: got (<type>) but expected 'outType' in mapIt\"\n    ([#4124](https://github.com/nim-lang/Nim/issues/4124))\n  - Fixed \"Generic type constraints broken?\"\n    ([#4084](https://github.com/nim-lang/Nim/issues/4084))\n  - Fixed \"Invalid C code generated\"\n    ([#3544](https://github.com/nim-lang/Nim/issues/3544))\n  - Fixed \"An exit variable in proc shadows exit function called by quit()\"\n    ([#3471](https://github.com/nim-lang/Nim/issues/3471))\n  - Fixed \"ubuntu 16.04 build error\"\n    ([#4144](https://github.com/nim-lang/Nim/issues/4144))\n  - Fixed \"Ambiguous identifier error should list all possible qualifiers\"\n    ([#177](https://github.com/nim-lang/Nim/issues/177))\n  - Fixed \"Parameters are not captured inside closures inside closure iterators\"\n    ([#4070](https://github.com/nim-lang/Nim/issues/4070))\n  - Fixed \"`$` For array crashes the compiler when assigned to const\"\n    ([#4040](https://github.com/nim-lang/Nim/issues/4040))\n\n  - Fixed \"Default value for .importcpp enum is initialized incorrectly\"\n    ([#4034](https://github.com/nim-lang/Nim/issues/4034))\n  - Fixed \"Nim doesn't instantiate template parameter in cgen when using procedure return value in for-in loop\"\n    ([#4110](https://github.com/nim-lang/Nim/issues/4110))\n  - Fixed \"Compile-time SIGSEGV when invoking procedures that cannot be evaluated at compile time from a macro\"\n    ([#3956](https://github.com/nim-lang/Nim/issues/3956))\n  - Fixed \"Backtricks inside .emit pragma output incorrect name for types\"\n    ([#3992](https://github.com/nim-lang/Nim/issues/3992))\n  - Fixed \"typedef is generated for .importcpp enums\"\n    ([#4145](https://github.com/nim-lang/Nim/issues/4145))\n  - Fixed \"Incorrect C code generated for nnkEmpty node\"\n    ([#950](https://github.com/nim-lang/Nim/issues/950))\n  - Fixed \"Syntax error in config file appears as general exception without useful info\"\n    ([#3763](https://github.com/nim-lang/Nim/issues/3763))\n  - Fixed \"Converting .importcpp enum to string doesn't work when done inside procs\"\n    ([#4147](https://github.com/nim-lang/Nim/issues/4147))\n  - Fixed \"Enum template specifiers do not work for .importcpp enums when they are used as a parameter\"\n    ([#4146](https://github.com/nim-lang/Nim/issues/4146))\n  - Fixed \"Providing template specifier recursively for .importcpp type doesn't work\"\n    ([#4148](https://github.com/nim-lang/Nim/issues/4148))\n  - Fixed \"sizeof doesn't work for generics in vm\"\n    ([#4153](https://github.com/nim-lang/Nim/issues/4153))\n  - Fixed \"Creating list-like structures in a loop leaks memory indefinitely\"\n    ([#3793](https://github.com/nim-lang/Nim/issues/3793))\n  - Fixed \"Creating list-like structures in a loop leaks memory indefinitely\"\n    ([#3793](https://github.com/nim-lang/Nim/issues/3793))\n  - Fixed \"Enum items generated by a macro have wrong type.\"\n    ([#4066](https://github.com/nim-lang/Nim/issues/4066))\n  - Fixed \"Memory leak with default GC\"\n    ([#3184](https://github.com/nim-lang/Nim/issues/3184))\n  - Fixed \"Rationals Overflow Error on 32-bit machine\"\n    ([#4194](https://github.com/nim-lang/Nim/issues/4194))\n\n  - Fixed \"osproc waitForExit() is ignoring the timeout parameter\"\n    ([#4200](https://github.com/nim-lang/Nim/issues/4200))\n  - Fixed \"Regression: exception parseFloat(\"-0.0\") \"\n    ([#4212](https://github.com/nim-lang/Nim/issues/4212))\n  - Fixed \"JS Codegen: Bad constant initialization order\"\n    ([#4222](https://github.com/nim-lang/Nim/issues/4222))\n  - Fixed \"Term-rewriting macros gives Error: wrong number of arguments\"\n    ([#4227](https://github.com/nim-lang/Nim/issues/4227))\n  - Fixed \"importcpp allowed in body of proc after push\"\n    ([#4225](https://github.com/nim-lang/Nim/issues/4225))\n  - Fixed \"pragma SIGSEGV\"\n    ([#4001](https://github.com/nim-lang/Nim/issues/4001))\n  - Fixed \"Restrict hints to the current project\"\n    ([#2159](https://github.com/nim-lang/Nim/issues/2159))\n  - Fixed \"`unlikely`/`likely` should be no-ops for the Javascript backend\"\n    ([#3882](https://github.com/nim-lang/Nim/issues/3882))\n  - Fixed \".this pragma doesn't work for fields and procs defined for parent type\"\n    ([#4177](https://github.com/nim-lang/Nim/issues/4177))\n  - Fixed \"VM SIGSEV with compile-time Table\"\n    ([#3729](https://github.com/nim-lang/Nim/issues/3729))\n  - Fixed \"Error during compilation with cpp option on FreeBSD \"\n    ([#3059](https://github.com/nim-lang/Nim/issues/3059))\n  - Fixed \"Compiler doesn't keep type bounds\"\n    ([#1713](https://github.com/nim-lang/Nim/issues/1713))\n  - Fixed \"Stdlib: future: Shortcut proc definition doesn't support, varargs, seqs, arrays, or openarrays\"\n    ([#4238](https://github.com/nim-lang/Nim/issues/4238))\n  - Fixed \"Why don't ``asynchttpserver`` support request-body when ``put`` ``delete``?\"\n    ([#4221](https://github.com/nim-lang/Nim/issues/4221))\n  - Fixed \"Paths for includes in Nim documentation\"\n    ([#2640](https://github.com/nim-lang/Nim/issues/2640))\n  - Fixed \"Compile pragma doesn't work with relative import\"\n    ([#1262](https://github.com/nim-lang/Nim/issues/1262))\n  - Fixed \"Slurp doesn't work with relative imports\"\n    ([#765](https://github.com/nim-lang/Nim/issues/765))\n  - Fixed \"Make tilde expansion consistent\"\n    ([#786](https://github.com/nim-lang/Nim/issues/786))\n  - Fixed \"koch expects nim to be in path for tests?\"\n    ([#3290](https://github.com/nim-lang/Nim/issues/3290))\n  - Fixed \"Don't use relative imports for non relative modules (aka babel libs)\"\n    ([#546](https://github.com/nim-lang/Nim/issues/546))\n  - Fixed \"\"echo\" on general structs does not work\"\n    ([#4236](https://github.com/nim-lang/Nim/issues/4236))\n  - Fixed \"Changing math.round() and adding math.integer()\"\n    ([#3473](https://github.com/nim-lang/Nim/issues/3473))\n  - Fixed \"Mathematics module missing modf\"\n    ([#4195](https://github.com/nim-lang/Nim/issues/4195))\n  - Fixed \"Passing method to macro causes seg fault\"\n    ([#1611](https://github.com/nim-lang/Nim/issues/1611))\n  - Fixed \"Internal error with \"discard quit\"\"\n    ([#3532](https://github.com/nim-lang/Nim/issues/3532))\n  - Fixed \"SIGSEGV when using object variant in compile time\"\n    ([#4207](https://github.com/nim-lang/Nim/issues/4207))\n  - Fixed \"formatSize has incorrect prefix\"\n    ([#4198](https://github.com/nim-lang/Nim/issues/4198))\n  - Fixed \"Add compiler parameter to generate output from source code filters\"\n    ([#375](https://github.com/nim-lang/Nim/issues/375))\n  - Fixed \"Add engineering notation to string formatting functions\"\n    ([#4197](https://github.com/nim-lang/Nim/issues/4197))\n  - Fixed \"Very minor error in json documentation\"\n    ([#4255](https://github.com/nim-lang/Nim/issues/4255))\n  - Fixed \"can't compile when checking if closure == nil\"\n    ([#4186](https://github.com/nim-lang/Nim/issues/4186))\n  - Fixed \"Strange code gen for procs returning arrays\"\n    ([#2259](https://github.com/nim-lang/Nim/issues/2259))\n  - Fixed \"asynchttpserver may consume unbounded memory reading headers\"\n    ([#3847](https://github.com/nim-lang/Nim/issues/3847))\n\n  - Fixed \"download page still implies master is default branch\"\n    ([#4022](https://github.com/nim-lang/Nim/issues/4022))\n  - Fixed \"Use standard compiler flags in build script\"\n    ([#2128](https://github.com/nim-lang/Nim/issues/2128))\n  - Fixed \"CentOS 6 (gcc-4.4.7) compilation failed (redefinition of typedef)\"\n    ([#4272](https://github.com/nim-lang/Nim/issues/4272))\n  - Fixed \"doc2 has issues with httpclient\"\n    ([#4278](https://github.com/nim-lang/Nim/issues/4278))\n  - Fixed \"tuples/tuple_with_nil fails without unsigned module\"\n    ([#3579](https://github.com/nim-lang/Nim/issues/3579))\n", "tags": ["nim", "python"], "published_at": "", "id": 27}, {"title": "Version 0.14.2 released", "slug": "version-released", "content": "Version 0.14.2 is just a bugfix release that fixes the most pressingregressions. In particular, the ``tar.xz`` now supports documentationgeneration, and the Windows installers bundle the latest stable nimblerelease.The news about the 0.14.0 release are still relevant, so check them out[here]({{site.baseurl}}/blog/2016/06/07/version-0140-released.html).", "content_with_meta": "---\ntitle: \"Version 0.14.2 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nVersion 0.14.2 is just a bugfix release that fixes the most pressing\nregressions. In particular, the ``tar.xz`` now supports documentation\ngeneration, and the Windows installers bundle the latest stable nimble\nrelease.\n\nThe news about the 0.14.0 release are still relevant, so check them out\n[here]({{site.baseurl}}/blog/2016/06/07/version-0140-released.html).\n", "tags": ["nim", "python"], "published_at": "", "id": 28}, {"title": "Launching the 2016 Nim Community Survey", "slug": "community-survey-2016", "content": "We are proud to announce the official[2016 Nim Community Survey](http://goo.gl/forms/XJ3TPsaiIQe5HlTB2)! No matterwhether you use Nim today, have used Nim previously, or never used Nim before;we want to know your opinions.Your feedback will help the Nim project understand its strengths andweaknesses, and to determine development priorities for the future.It shouldn't take you much longer than 5 to 10 minutes to complete this survey.Submissions will be accepted until around the 23rd of July, depending on theresponse rates. If you have any questions or feedback, please don't hesitateto get in touch with us via email at survey@nim-lang.org or on the[Nim Forum](http://forum.nim-lang.org).We would appreciate your help in spreading the word about this survey. Sharethe above link on your social network feeds, with your colleagues and inother communities.Thank you to everyone that helped develop and test the survey! Once thesubmission period ends, the results will be shown here and publicised viaTwitter, the Nim Forum and IRC.Thanks for your time!", "content_with_meta": "---\ntitle: \"Launching the 2016 Nim Community Survey\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe are proud to announce the official\n[2016 Nim Community Survey](http://goo.gl/forms/XJ3TPsaiIQe5HlTB2)! No matter\nwhether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\n\nIt shouldn't take you much longer than 5 to 10 minutes to complete this survey.\nSubmissions will be accepted until around the 23rd of July, depending on the\nresponse rates. If you have any questions or feedback, please don't hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\n[Nim Forum](http://forum.nim-lang.org).\n\nWe would appreciate your help in spreading the word about this survey. Share\nthe above link on your social network feeds, with your colleagues and in\nother communities.\n\nThank you to everyone that helped develop and test the survey! Once the\nsubmission period ends, the results will be shown here and publicised via\nTwitter, the Nim Forum and IRC.\n\nThanks for your time!\n", "tags": ["nim", "python"], "published_at": "", "id": 29}, {"title": "BountySource Update: The Road to v1.0", "slug": "bountysource-update-the-road-to-v10", "content": "*This was cross-posted from [update #4](https://salt.bountysource.com/teams/nim/updates/4-the-road-to-v1-0) on BountySource.*We are now in the fourth month of the[Nim BountySource fundraiser](https://salt.bountysource.com/teams/nim) andhere isthis month's update[1]. Once again this month, we have beat our previousdonation record of $1280 having raised over $1600 over the course of July!That's now 4 months in a row that your monthly donations have been increasing.As always we are absolutely blown away by your contributions,[myself](https://github.com/dom96) and therest of the Nim team are extremely thankful for them. It's not only helping uspay for the necessary expenses (like for example the server thathttp://nim-lang.org runs on) but it also inspires us to keep going and to makeNim the best programming language that it can be.As mentioned in[last month's update](https://salt.bountysource.com/teams/nim/updates/3-engaging-with-our-community), we have begun the process of engaging withthe Nim community through a survey. This survey has now been open for more thana month and will be closing very soon (in about 2 days), so if you haven'tanswered it yet, now would be a perfect time to do so. You can find the surveyhere: http://nim-lang.org/survey.The survey itself has been designed for three types of people: Nim users,ex-Nim users and people who have never used Nim before. This means that youhave no excuse not to answer it[2]. There are almost 700 submissions and afterthe survey is finalised, a blog post will be written with a thorough analysis.It is my hope that the survey analysis will give the Nim team a good idea ofwhat needs to be implemented before version 1.0 can be released. Personally, Ihope to make a thorough review of the standard library to ensure that it isready for the \"1.0 backwards compatibility lock\"[3]. Although I myself havebeen very busy lately[4], [Araq](http://github.com/Araq) has been working very hard to fix[High Priority](https://github.com/nim-lang/Nim/issues?q=is%3Aissue+is%3Aopen+label%3A%22High+Priority%22)issues, ahead of the 1.0 release. And as always, there has also been a[lot of pull requests](https://github.com/nim-lang/Nim/pulse)from a wide range of Nim users.Lastly, I would like to mention[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81) once again. I have recentlyfinished the final chapter. All that remains now are corrections (based mainlyon your feedback, huge thanks to everyone for reading!) and a final review.The book will then be put into production[5] with an estimated print date ofaround the 20th of January (as usual delays are very much possible). If youhave not yet picked up the book, now would be a perfect time to do so. Thereis still time for you to give feedback about the book, and for me to improve itbased on your remarks. It is not often that you can influence a book in thisway, and it is my hope that you will help me make this book one of the bestresources for learning Nim!As always, many thanks for reading and if you have any questions or feedbackfeel free to get in touch via email at contact@nim-lang.org or via[Twitter](https://twitter.com/nim_lang).1 - These updates have so far been fairly regular and it is my hope to writeat least one a month. Yep, I am patting myself on the back :)2 - I joke of course, don't worry about if you don't have the time :)3 - After version 1.0, it is typical for a piece of software (especiallya programming language) to ensure that backwards compatibility is not brokenbetween further minor versions until a new major version such as 2.0 is released.4 - Writing a book, moving to Switzerland to start a new job, and playing[Pokemon Go](https://pokemongostatus.org/) has certainly kept me busy.5 - Basically the brilliant guys at [Manning](https://manning.com) willprocess the book so that it looks good in a printed format.", "content_with_meta": "---\ntitle: \"BountySource Update: The Road to v1.0\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\n*This was cross-posted from [update #4](https://salt.bountysource.com/teams/nim/updates/4-the-road-to-v1-0) on BountySource.*\n\nWe are now in the fourth month of the\n[Nim BountySource fundraiser](https://salt.bountysource.com/teams/nim) and\nhere is\nthis month's update[1]. Once again this month, we have beat our previous\ndonation record of $1280 having raised over $1600 over the course of July!\nThat's now 4 months in a row that your monthly donations have been increasing.\nAs always we are absolutely blown away by your contributions,\n[myself](https://github.com/dom96) and the\nrest of the Nim team are extremely thankful for them. It's not only helping us\npay for the necessary expenses (like for example the server that\nhttp://nim-lang.org runs on) but it also inspires us to keep going and to make\nNim the best programming language that it can be.\n\nAs mentioned in\n[last month's update](https://salt.bountysource.com/teams/nim/updates/3-engaging-with-our-community), we have begun the process of engaging with\nthe Nim community through a survey. This survey has now been open for more than\na month and will be closing very soon (in about 2 days), so if you haven't\nanswered it yet, now would be a perfect time to do so. You can find the survey\nhere: http://nim-lang.org/survey.\n\nThe survey itself has been designed for three types of people: Nim users,\nex-Nim users and people who have never used Nim before. This means that you\nhave no excuse not to answer it[2]. There are almost 700 submissions and after\nthe survey is finalised, a blog post will be written with a thorough analysis.\n\nIt is my hope that the survey analysis will give the Nim team a good idea of\nwhat needs to be implemented before version 1.0 can be released. Personally, I\nhope to make a thorough review of the standard library to ensure that it is\nready for the \"1.0 backwards compatibility lock\"[3]. Although I myself have\nbeen very busy lately[4], [Araq](http://github.com/Araq) has been working very hard to fix\n[High Priority](https://github.com/nim-lang/Nim/issues?q=is%3Aissue+is%3Aopen+label%3A%22High+Priority%22)\nissues, ahead of the 1.0 release. And as always, there has also been a\n[lot of pull requests](https://github.com/nim-lang/Nim/pulse)\nfrom a wide range of Nim users.\n\nLastly, I would like to mention\n[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81) once again. I have recently\nfinished the final chapter. All that remains now are corrections (based mainly\non your feedback, huge thanks to everyone for reading!) and a final review.\nThe book will then be put into production[5] with an estimated print date of\naround the 20th of January (as usual delays are very much possible). If you\nhave not yet picked up the book, now would be a perfect time to do so. There\nis still time for you to give feedback about the book, and for me to improve it\nbased on your remarks. It is not often that you can influence a book in this\nway, and it is my hope that you will help me make this book one of the best\nresources for learning Nim!\n\nAs always, many thanks for reading and if you have any questions or feedback\nfeel free to get in touch via email at contact@nim-lang.org or via\n[Twitter](https://twitter.com/nim_lang).\n\n1 - These updates have so far been fairly regular and it is my hope to write\nat least one a month. Yep, I am patting myself on the back :)\n\n2 - I joke of course, don't worry about if you don't have the time :)\n\n3 - After version 1.0, it is typical for a piece of software (especially\na programming language) to ensure that backwards compatibility is not broken\nbetween further minor versions until a new major version such as 2.0 is released.\n\n4 - Writing a book, moving to Switzerland to start a new job, and playing\n[Pokemon Go](https://pokemongostatus.org/) has certainly kept me busy.\n\n5 - Basically the brilliant guys at [Manning](https://manning.com) will\nprocess the book so that it looks good in a printed format.\n", "tags": ["nim", "python"], "published_at": "", "id": 30}, {"title": "Nim Community Survey Results", "slug": "community-survey-results-2016", "content": "We have recently closed the 2016 Nim Community Survey. I am happy tosay that we have received exactly 790 responses, huge thanks go to the peoplethat took the time to respond. We're incredibly thankful for this very valuablefeedback.This survey was inspired in part by the[2016 State of Rust](https://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html)survey. You will note that many of the questions were modelled afterRust's survey. One of the reasons for doing this was to allow us to easilycompare our results against the results obtained in the Rust survey. Inaddition, we of course also liked many of their questions.Our survey ran from the 23rd of June 2016 until the 8th of August 2016. Theresponse numbers are impressive considering Nim's community size; at 790 theymake up just over 25% of the Rust survey's responses.The goal of this survey was to primarily determine how our community is usingNim, in order to better understand how we should be improving it. In particular,we wanted to know what people feel is missing from Nim in the lead up toversion 1.0. We have also asked our respondents about how well the Nim toolsworked, the challenges of adopting Nim, the resources that they used to learnNim and more.It is my hope that we will be able to run a similar survey in a years time,doing so should give us an idea of whether we are improving.With these general facts in mind, let's begin looking at specific questions.# How did you find out about Nim?The rationale for the first question was simple, we wanted to know where ourrespondents found out about Nim. This is an interesting question for us, aswe do occasionally get users asking us why it took so long for them to hearabout Nim. It allows us to see how effective each website is at spreading theword about Nim.<a href=\"{{site.baseurl}}/assets/news/images/survey/nim_found.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_found.png\" alt=\"How did you find out about Nim?\" style=\"width:100%\"/></a>The majority of our respondents found Nim via Reddit, HackerNews or a searchengine such as Google. These results are not altogether surprising. There werealso a lot of \"Other\" responses, some of which were a bit moreinteresting. These included multiple mentions of habrahabr.ru, Dr. Dobb's,and lobste.rs.# Do you use Nim?Just like the Rust survey creators, we wanted to ensure that our survey wasopen to both Nim users as well people who never used Nim. In addition tothose two groups, we have also included a third group of people: ex-Nimusers. All three are interesting, for many different reasons.Nim users can tell us how they are using Nim and also how Nim'stooling can improve. Ex-Nim users give us anidea of why they stopped using Nim. Finally, respondents who never used Nimcan tell us the reasons for not adopting it.  <a href=\"{{site.baseurl}}/assets/news/images/survey/do_you_use_nim.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>  </a>It's nice to see that we have such a good range of respondents. The Rust surveyhad a much larger number of Rust users amongst their respondents, withno distinction between users that never used Rust and users that stopped usingRust.# Should we consider your answers to be invalid?This was something I thought would be interesting to have, after I saw itbeing used in another survey. While it does pinpoint possiblyinvalid respondents, I have opted against filtering those out. Mainly becausethat would require re-creating each of the charts generated by Google Formsmanually.  <a href=\"{{site.baseurl}}/assets/news/images/survey/reliability.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/reliability.png\" alt=\"Should we consider your answers to be invalid?\" style=\"width:100%\"/>  </a>According to the responses to this question, around 94% of our responsescan be considered reliable.# Nim usersThe following questions were answered only by the 38.9% of our respondentswho identified themselves as Nim users.## How long have you been using Nim?  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_time.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_time.png\" alt=\"How long have you been using Nim?\" style=\"width:100%\"/>  </a>A large proportion of our Nim users were new. This is good news as it means thatour community is growing, with a large proportion of new Nim users that couldbecome long-term Nimians. In total, more than 35% of Nim users can be considerednew having used Nim for less than 3 months. With 18% of Nim users that canbe considered very new having used Nim for less than a month.This could suggest that 18% of our users have only just found out about Nim inthe last week or so and have not yet got the chance to use it extensively.The high percentages of long term Nim users are encouraging.They suggestthat many users are continuing to use Nim after making it through the firstfew months. The sharp drop at 7-9 months is interesting, but may simply bedue to the fact that there were fewer newcomers during that period, or itcould be because our respondents are more likely to estimate that they havebeen using Nim for a year or half a year rather than the awkward 7-9 months.  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_time_rust.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_time_rust.png\" alt=\"Time using Nim and Rust\" style=\"width:100%\"/>  </a>The results for Nim and Rust are actually remarkably similar. They both show adrop at 7-9 months, although Rust's isn't as dramatic. Nim on the other handhas a significantly higher percentage of new Nim users.## Do you use Nim at work?An important aspect of a language's adoption is whether it is being used for\"real\" work. We wanted to know how many people are using Nim in their dayjobs and under what circumstances it is used.  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_at_work.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_at_work.png\" alt=\"Do you use Nim at work?\" style=\"width:100%\"/>  </a>While a vast majority of our users are not using Nim at work, more than 25%of them are. It's encouraging to see such a high number already, even beforewe have released version 1.0. In fact, this percentage is likely close to 30%,because many of the \"Other\" responses mention using Nim for the likes ofinternal tools or small scripts to help with the respondent's work.  <a href=\"https://blog.rust-lang.org/images/2016-06-Survey/rust_at_work.png\">    <img src=\"https://blog.rust-lang.org/images/2016-06-Survey/rust_at_work.png\" alt=\"Do you use Rust at work?\" style=\"width:100%\"/>  </a>Interestingly, a larger percentage of Nim users are using Nim at work thanRust users. The sample sizes are of course vastly different, but it's still aninteresting result. Combined, nearly 1/5th of Rust users are using Rustcommercially whereas more than a quarter of Nim users are using Nimcommercially.## Approximately how large are all the Nim projects that you work on?Finding out how large the Nim projects worked on by Nim users are is alsovery valuable.  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size.png\" alt=\"Nim project size for all users\" style=\"width:100%\"/>  </a>This shows us that currently Nim is primarily being used for small scripts andapplications, with nearly 60% of the projects consisting of less than 1,000lines of code. This makes sense as many of our users are not using Nimprofessionally, but are doing so in their spare time.  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size_work.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size_work.png\" alt=\"Nim project size for work users\" style=\"width:100%\"/>  </a>The numbers for part-time and full-time work users of Nim tell a differentstory. Over 70% of the projects written by full-time users are between 10,001and 100,000 lines of code. Part-time users show a slightly different trend,with many more small projects, the majority being between 1,000 and10,000 lines of code.Overall it's good to see that there is a few large projects out there which arecomposed of more than 100,000 lines of code. We expect to see the amount oflarge projects to grow with time, especially with version 1.0 on the way.  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size_nim_rust.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size_nim_rust.png\" alt=\"Nim project size for work users (Nim vs. Rust)\" style=\"width:100%\"/>  </a>In comparison to Rust the proportion of project sizes for full-time users isvastly different. This is likely due to our small sample size. Project sizes forpart-time users between Rust and Nim are somewhat similar, with differences ofaround 10% for each project size.## Do you plan to try to use Nim at work?  <a href=\"{{site.baseurl}}/assets/news/images/survey/planning_to_use_at_work.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/planning_to_use_at_work.png\" alt=\"Planning to use Nim at work?\" style=\"width:100%\"/>  </a>It's also encouraging to see that over 50% of Nim users are planning to useNim at work! This is slightly more than Rust's 40% and should help Nim'sadoption into even more areas.## Nim and its toolsIn this section of the survey, we wanted to find out the tools that Nimusers are utilising when developing Nim applications.### What editor(s) do you use when writing Nim?Programmers are very specific when it comes to their editor of choice, becauseof that it's good to know which editor is most popular among our community.  <a href=\"{{site.baseurl}}/assets/news/images/survey/editors.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/editors.png\" alt=\"Editors used by Nim users\" style=\"width:100%\"/>  </a>Looks like Vim is the winner with almost 30%. Followed by Sublime Text andEmacs. Aporia, the Nim IDE, gets a respectable 15.5%. There wasalso more than17% of answers which included \"Other\" editors, such as: Notepad++, Geany, gedit,and Kate.### What operating system(s) do you compile for and run your Nim projects on?This question gave us information about the most popular target operatingsystems, as well as some of the more obscure ones. We have asked this questionto find out the platforms on which Nim applications run on most frequently.  <a href=\"{{site.baseurl}}/assets/news/images/survey/target_os.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/target_os.png\" alt=\"Target operating systems\" style=\"width:100%\"/>  </a>This question allowed multiple choices, so each percentage is out of the totalnumber of respondents for this question. For example, 80.7% of therespondents selected \"Linux\" but only 26.6% selected OS X.This makes Linux by far the most popular target for Nim applications.Some \"Other\" targets included: BSD (OpenBSD, FreeBSD), iOS, Android, andJavaScript.It's great to see Nim being used on such a wide variety of platforms.### What operating system(s) do you develop Nim projects on?With this question, we wanted to know what operating systems are used fordevelopment.  <a href=\"{{site.baseurl}}/assets/news/images/survey/dev_os.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/dev_os.png\" alt=\"Development operating systems\" style=\"width:100%\"/>  </a>This question also allowed multiple choices and ended up with very similarresults.You can see that Linux is also the most popular developmentalplatform for Nim. But it's more popular as a target platform.### Which version(s) of Nim do you use for your applications?  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_versions.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_versions.png\" alt=\"Version use\" style=\"width:100%\"/>  </a>At the time of this survey, version 0.14.2 was the latest stable release.It's no wonder that it is the most commonly used release of Nim. It's good tosee that the older versions are not used as often. The high use of ``Git HEAD (devel)``(nightly builds) isn't surprising, Nim is still evolving rapidly and ourrelease schedule is not regular or frequent.Once we go past the 1.0 release, we expect to see much less use of the unstable``devel`` branch.### Has upgrading to a new version of the Nim compiler broken your code?  <a href=\"{{site.baseurl}}/assets/news/images/survey/breakage.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/breakage.png\" alt=\"Breakage\" style=\"width:100%\"/>  </a>Despite the unstable nature of Nim in the lead up to version 1.0, wheneverwe make breaking changes we do our best to deprecate things and ensure thatold code continues to work for our users. Of course sometimes this is notpossible and other times it is simply easier to add a breaking change.This question was asked to determine how much our user base is affected bybreaking changes between Nim versions. We decided to have three possibleanswers for this question in order to give us an idea how frequent thebreakage was.It's incredible to see that over 50% of our users have not experienced anybreakage after upgrading. We expect this number to increase significantlyafter version 1.0 is released. Of the users that did experience breakage,over 80% of them said that it was a rare occurrence.In comparison to Rust, our results show that there was a higher percentage ofusers experiencing breakage as a result of an upgrade. This is to be expected,because Nim is still in its pre-1.0 period, whereas Rust 1.0 has been releasedover a year ago now.Unfortunately while we are still in this pre-1.0 period, releases will likelyintroduce breaking changes as we refine certain aspects of Nim such as itsstandard library, so the number of users experiencing breaking changes mayincrease.### If so, how much work did it take to fix it?  <a href=\"{{site.baseurl}}/assets/news/images/survey/difficulty_fixing_breakage.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/difficulty_fixing_breakage.png\" alt=\"difficulty fixing breakage\" style=\"width:100%\"/>  </a>Thankfully most of the breakage experienced by Nim users was very easy to fix.### If you used Nimble, do you like it?  <a href=\"{{site.baseurl}}/assets/news/images/survey/nimble_opinion.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nimble_opinion.png\" alt=\"Do you like Nimble?\" style=\"width:100%\"/>  </a>Nimble is the Nim package manager, a tool that is very important in Nim'secosystem as it allows developers to easily install dependencies for theirsoftware.The majority of respondents rated it as a 4, showing us that the majority doeslike Nimble. With over 55% rating it a 4 or 5. This percentage isn't asoverwhelming as the 94.1% of users that rated Cargo a 4 or 5 in the Rustsurvey. Based on these results I think that we definitely need to do abetter job with Nimble.In our next survey, it might be a good idea to ask more questions about Nimbleto determine how exactly it can be improved.### What aspects of Nim do you find most appealing?  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_appeal.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_appeal.png\" alt=\"What aspects of Nim do you find most appealing?\" style=\"width:100%\"/>  </a>We were interested to know the features of Nim that appeal most to our users.More than 80% of our respondents selected \"Execution Speed\" as one of thefeatures that appeal to them. With \"Development Speed\" and \"Readability\"tying for second place and \"Metaprogramming\" at third place.The options given to our respondents are rather predictable,they do show us which of these features have the highest appeal though.What's more interesting are the \"Other\" answers.By far the most popular \"Other\" answer was related to Nim's compilation to C.Many users mentioned that they like how easy it is to interface with Clibraries and the great portability that compiling to C offers.### What aspects of Nim do you find most displeasing?  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_displeasing.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_displeasing.png\" alt=\"What aspects of Nim do you find most displeasing?\" style=\"width:100%\"/>  </a>It was only natural to ask this question. The results are almost perfectlyopposite to the previous question's answers, with almost 50% of respondentsselecting \"Debugging Tools\"as the most displeasing aspect of Nim. With \"Documentation\" and \"Testing Tools\"in second and third place respectively. There is also a much larger number of\"Other\" answers to this question.The \"Other\" answers for this question vary a lot. Here is a selection ofthem, ordered by frequency:* Small community size.* Lack of in-depth tutorials.* Quality of error messages.* Forward declarations and no cyclic imports.* Bugs in the standard library.* No good IDE.* No REPL.* No major version.* Bugs in the compiler.* Lack of libraries.* Difficulty installing on Windows.* Non-intuitive semantics of various constructs.* Lack of immutable collections.* Async/await not being production ready.* Lack of shared collections for threads.* No Haxe target.* Memory safety.We hope that we can improve these things with time. Many of these issues arealready being worked on, including the removal of the need for forwarddeclarations. Some of these issues like our small community size are difficultto fix, but we will nonetheless do our best.## Previous Nim usersFor users that have used Nim before but decided against using it, we asked justone specific question. The proportion of our respondents that answered itwas 24%.### Why did you stop using Nim?  <a href=\"{{site.baseurl}}/assets/news/images/survey/ex_nim.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/ex_nim.png\" alt=\"I stopped using Nim because...\" style=\"width:100%\"/>  </a>Again, this question got a lot of \"Other\" answers. Apart from that, themost popular reason for leaving Nim is that it is not stable. Followed by thea lack of needed libraries and packages and the instability of thestandard library.* Lack of IDE support.* Style insensitive.* Documentation.* Dislike the syntax.* Community is too small.* Missing language features (for example RAII).* No opportunities to use it at work.* Messy standard library.The first item, \"Lack of IDE support\", was mentioned by multiple respondents.In the future we should look into ensuring that major IDEs have plugins whichenable easy Nim development.Based on some of the \"Other\" answers, it seems that many of the respondentshave not used Nim for very long, for example many respondents complained aboutinstallation issues which they would have run into before getting a chance touse Nim. Because of this I would consider them notex-Nim users but developers that have not had a chance to try Nim fully.Next time we should also ask how long the respondent has used Nim for to get abetter idea of whether they had a chance to use Nim for extended periods oftime.## Non-Nim usersWe also wanted to know the reasons why developers decided against using Nim.### Why do you not use Nim?  <a href=\"{{site.baseurl}}/assets/news/images/survey/non_user.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/non_user.png\" alt=\"I don't use Nim because...\" style=\"width:100%\"/>  </a>The most common reason that people have for not using Nim is that it isnot yet ready for production. Thankfully this will improve with time.IDE support is also a prominent factor just as we've seen in previous results.There is also a lot of \"Other\" answers, let's have a look at a selection ofthem. Some of the most prominent ones, in order of frequency, include:* No time to use/learn it* Syntax* Documentation is incomplete* Garbage Collection* Prefer functional paradigm* Small community* Style insensitivity/Case insensitivityOne respondent made a very good suggestion: they said that the\"Do you use Nim?\" question should have included \"No, but I intend to\" asan answer. Definitely something we will do in the next survey. Indeed, manyrespondents mentioned that they were planning on trying out Nim but that theyjust have no time to do so, this is very encouraging!## Learning ResourcesWe wanted to get an idea of how Nim users are learning Nim. Every respondentanswered this question, no matter what they answered for the \"Do you use Nim?\"question.### Which learning resources, if any, did you use to learn Nim?  <a href=\"{{site.baseurl}}/assets/news/images/survey/learning_resources.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/learning_resources.png\" alt=\"learning resources\" style=\"width:100%\"/>  </a>The idea behind this question was to understand which learning resourceswere most popular among our user base. The[Nim tutorial](http://nim-lang.org/docs/tut1.html) is by far the mostpopular. In previous questions, we saw respondents mentioning that the Nimtutorial does not go into enough detail about Nim. Thanks to this informationwe can come to the conclusion that the tutorial needs to be improvedsignificantly to make sure that it gives our users the necessary informationto use Nim effectively.Indeed, many users also use the[Nim manual](http://nim-lang.org/docs/manual.html) to learn Nim.This manual has beenwritten as a specification and so is not ideal for teaching Nim. Many ofthe concepts in the Nim manual need to be explained in a lot more detail inthe Nim tutorial.Of course, it's exciting to see our respondents using other materials to learnNim. In particular I am excited to see that over 15% of the respondents haveused[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)to learn Nim. I expect that more and more users will pick up the book after itis fully published.### Nim in ActionAs the author of[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81),I wanted to get some statistics surroundingmy book. With this in mind, I have created some questions relating to it.#### Have you read Nim in Action?  <a href=\"{{site.baseurl}}/assets/news/images/survey/book.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/book.png\" alt=\"Have you read Nim in Action?\" style=\"width:100%\"/>  </a>It's good to see that over 50% of respondents have read the book or are at leastplanning to read it. Keep in mind that this question was answered by allrespondents, not just Nim users... container:: standout  Are you interested in purchasing a copy of  [Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)?  If so, you can use code ``wm090416lt`` to get 50% off the printed book today only!  If you purchase it now you will get access to an early access copy of  Nim in Action in eBook form and will be able to take part in the development  of this book.#### Did you enjoy Nim in Action?  <a href=\"{{site.baseurl}}/assets/news/images/survey/book_opinion.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/book_opinion.png\" alt=\"Did you enjoy Nim in Action?\" style=\"width:100%\"/>  </a>Of the people that read Nim in Action it's nice to see that almost 70% haveenjoyed it.## Nim's future### What improvements are needed before Nim v1.0 can be released?We were interested to know what our users believe is needed beforeNim version 1.0 can be released.  <a href=\"{{site.baseurl}}/assets/news/images/survey/10_needs.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/10_needs.png\" alt=\"What is needed before 1.0 can be released?\" style=\"width:100%\"/>  </a>It appears that the standard library is the biggest concern. With more than halfof all respondents selecting \"The standard library needs to reviewed andany problems with it fixed\". This is in fact something we are already planningto address, so it's good to see that the majority agrees with us.A large proportion of users also believes that the language is great as-isand that we should focus on stabilising the compiler. This somewhat contradictsthe majority. But perhaps most of them thought that \"The language\" excludes thestandard library.For this question, we decided to give our respondents a dedicated place togive general feedback about what they feel is needed before v1.0 can bereleased. We received over 200 responses to that. Many of these responsesreflect what we have already seen: that the documentation needs to improve,that we need a good Nim IDE, stability for experimental features such asconcepts, the standard library needs to be cleaned up.Unfortunately many respondents used this question to say what needs to be fixedin Nim in general, not what is definitely necessary before 1.0 can be released.## Community demographics### What domain do you work in currently?  <a href=\"{{site.baseurl}}/assets/news/images/survey/domains.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/domains.png\" alt=\"Work domains\" style=\"width:100%\"/>  </a>Nim users are working in a wide variety of domains. It is encouraging to seepeople from so many different backgrounds taking part in this survey.### What programming languages are you most comfortable with?  <a href=\"{{site.baseurl}}/assets/news/images/survey/languages.png\">    <img src=\"{{site.baseurl}}/assets/news/images/survey/languages.png\" alt=\"Programming languages\" style=\"width:100%\"/>  </a>Python and C are the top two programming languages that our respondents aremost comfortable with. This is not altogether surprising.## Last wordsAt the end of the survey we gave our respondents a chance to speak their mindabout anything they wish, with a simple question: \"Anything else you'd liketo tell us?\"There was a lot of great feedback given in this question from people whoobviously really care deeply about Nim. There is too much to outline here,but rest assurred that we will take it all into account and do our best toact on it.In addition to feedback, we were also overwhelmed by the amount of positivecomments in the answers to thisquestion. There was a lot of support from the community thanking us for ourwork and determination.I'll let some quotes speak for themselves:<blockquote>You rock, seriously.</blockquote><blockquote>Nim rocks! Keep it up! Thank you very much!</blockquote><blockquote>You've made great progress on the language without any corporate backing, that is amazing. I wish Nim becomes one of the top used languages in a few years.</blockquote><blockquote>Nim is elegant and wonderful! Keep at it!</blockquote>Our community is truly brilliant. We thank each and every one of you forfilling out this survey and hope that you will help us tackle some of thechallenges that face Nim.This survey was a good place to give us feedback, but please don't wait forthe next one. We are always looking to hear more from you and we hope that youwill participate in discussions relating to this survey as well the futureof Nim.Thanks for reading, and have a good day!", "content_with_meta": "---\ntitle: \"Nim Community Survey Results\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe have recently closed the 2016 Nim Community Survey. I am happy to\nsay that we have received exactly 790 responses, huge thanks go to the people\nthat took the time to respond. We're incredibly thankful for this very valuable\nfeedback.\n\nThis survey was inspired in part by the\n[2016 State of Rust](https://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html)\nsurvey. You will note that many of the questions were modelled after\nRust's survey. One of the reasons for doing this was to allow us to easily\ncompare our results against the results obtained in the Rust survey. In\naddition, we of course also liked many of their questions.\n\nOur survey ran from the 23rd of June 2016 until the 8th of August 2016. The\nresponse numbers are impressive considering Nim's community size; at 790 they\nmake up just over 25% of the Rust survey's responses.\n\nThe goal of this survey was to primarily determine how our community is using\nNim, in order to better understand how we should be improving it. In particular,\nwe wanted to know what people feel is missing from Nim in the lead up to\nversion 1.0. We have also asked our respondents about how well the Nim tools\nworked, the challenges of adopting Nim, the resources that they used to learn\nNim and more.\n\nIt is my hope that we will be able to run a similar survey in a years time,\ndoing so should give us an idea of whether we are improving.\nWith these general facts in mind, let's begin looking at specific questions.\n\n# How did you find out about Nim?\n\nThe rationale for the first question was simple, we wanted to know where our\nrespondents found out about Nim. This is an interesting question for us, as\nwe do occasionally get users asking us why it took so long for them to hear\nabout Nim. It allows us to see how effective each website is at spreading the\nword about Nim.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey/nim_found.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_found.png\" alt=\"How did you find out about Nim?\" style=\"width:100%\"/>\n</a>\n\nThe majority of our respondents found Nim via Reddit, HackerNews or a search\nengine such as Google. These results are not altogether surprising. There were\nalso a lot of \"Other\" responses, some of which were a bit more\ninteresting. These included multiple mentions of habrahabr.ru, Dr. Dobb's,\nand lobste.rs.\n\n# Do you use Nim?\n\nJust like the Rust survey creators, we wanted to ensure that our survey was\nopen to both Nim users as well people who never used Nim. In addition to\nthose two groups, we have also included a third group of people: ex-Nim\nusers. All three are interesting, for many different reasons.\nNim users can tell us how they are using Nim and also how Nim's\ntooling can improve. Ex-Nim users give us an\nidea of why they stopped using Nim. Finally, respondents who never used Nim\ncan tell us the reasons for not adopting it.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/do_you_use_nim.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>\n  </a>\n\nIt's nice to see that we have such a good range of respondents. The Rust survey\nhad a much larger number of Rust users amongst their respondents, with\nno distinction between users that never used Rust and users that stopped using\nRust.\n\n# Should we consider your answers to be invalid?\n\nThis was something I thought would be interesting to have, after I saw it\nbeing used in another survey. While it does pinpoint possibly\ninvalid respondents, I have opted against filtering those out. Mainly because\nthat would require re-creating each of the charts generated by Google Forms\nmanually.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/reliability.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/reliability.png\" alt=\"Should we consider your answers to be invalid?\" style=\"width:100%\"/>\n  </a>\n\nAccording to the responses to this question, around 94% of our responses\ncan be considered reliable.\n\n# Nim users\n\nThe following questions were answered only by the 38.9% of our respondents\nwho identified themselves as Nim users.\n\n## How long have you been using Nim?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_time.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_time.png\" alt=\"How long have you been using Nim?\" style=\"width:100%\"/>\n  </a>\n\nA large proportion of our Nim users were new. This is good news as it means that\nour community is growing, with a large proportion of new Nim users that could\nbecome long-term Nimians. In total, more than 35% of Nim users can be considered\nnew having used Nim for less than 3 months. With 18% of Nim users that can\nbe considered very new having used Nim for less than a month.\nThis could suggest that 18% of our users have only just found out about Nim in\nthe last week or so and have not yet got the chance to use it extensively.\n\nThe high percentages of long term Nim users are encouraging.\nThey suggest\nthat many users are continuing to use Nim after making it through the first\nfew months. The sharp drop at 7-9 months is interesting, but may simply be\ndue to the fact that there were fewer newcomers during that period, or it\ncould be because our respondents are more likely to estimate that they have\nbeen using Nim for a year or half a year rather than the awkward 7-9 months.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_time_rust.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_time_rust.png\" alt=\"Time using Nim and Rust\" style=\"width:100%\"/>\n  </a>\n\nThe results for Nim and Rust are actually remarkably similar. They both show a\ndrop at 7-9 months, although Rust's isn't as dramatic. Nim on the other hand\nhas a significantly higher percentage of new Nim users.\n\n## Do you use Nim at work?\n\nAn important aspect of a language's adoption is whether it is being used for\n\"real\" work. We wanted to know how many people are using Nim in their day\njobs and under what circumstances it is used.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_at_work.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_at_work.png\" alt=\"Do you use Nim at work?\" style=\"width:100%\"/>\n  </a>\n\nWhile a vast majority of our users are not using Nim at work, more than 25%\nof them are. It's encouraging to see such a high number already, even before\nwe have released version 1.0. In fact, this percentage is likely close to 30%,\nbecause many of the \"Other\" responses mention using Nim for the likes of\ninternal tools or small scripts to help with the respondent's work.\n\n\n\n  <a href=\"https://blog.rust-lang.org/images/2016-06-Survey/rust_at_work.png\">\n    <img src=\"https://blog.rust-lang.org/images/2016-06-Survey/rust_at_work.png\" alt=\"Do you use Rust at work?\" style=\"width:100%\"/>\n  </a>\n\nInterestingly, a larger percentage of Nim users are using Nim at work than\nRust users. The sample sizes are of course vastly different, but it's still an\ninteresting result. Combined, nearly 1/5th of Rust users are using Rust\ncommercially whereas more than a quarter of Nim users are using Nim\ncommercially.\n\n## Approximately how large are all the Nim projects that you work on?\n\nFinding out how large the Nim projects worked on by Nim users are is also\nvery valuable.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size.png\" alt=\"Nim project size for all users\" style=\"width:100%\"/>\n  </a>\n\nThis shows us that currently Nim is primarily being used for small scripts and\napplications, with nearly 60% of the projects consisting of less than 1,000\nlines of code. This makes sense as many of our users are not using Nim\nprofessionally, but are doing so in their spare time.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size_work.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size_work.png\" alt=\"Nim project size for work users\" style=\"width:100%\"/>\n  </a>\n\nThe numbers for part-time and full-time work users of Nim tell a different\nstory. Over 70% of the projects written by full-time users are between 10,001\nand 100,000 lines of code. Part-time users show a slightly different trend,\nwith many more small projects, the majority being between 1,000 and\n10,000 lines of code.\n\nOverall it's good to see that there is a few large projects out there which are\ncomposed of more than 100,000 lines of code. We expect to see the amount of\nlarge projects to grow with time, especially with version 1.0 on the way.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/project_size_nim_rust.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/project_size_nim_rust.png\" alt=\"Nim project size for work users (Nim vs. Rust)\" style=\"width:100%\"/>\n  </a>\n\nIn comparison to Rust the proportion of project sizes for full-time users is\nvastly different. This is likely due to our small sample size. Project sizes for\npart-time users between Rust and Nim are somewhat similar, with differences of\naround 10% for each project size.\n\n## Do you plan to try to use Nim at work?\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/planning_to_use_at_work.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/planning_to_use_at_work.png\" alt=\"Planning to use Nim at work?\" style=\"width:100%\"/>\n  </a>\n\nIt's also encouraging to see that over 50% of Nim users are planning to use\nNim at work! This is slightly more than Rust's 40% and should help Nim's\nadoption into even more areas.\n\n## Nim and its tools\n\nIn this section of the survey, we wanted to find out the tools that Nim\nusers are utilising when developing Nim applications.\n\n### What editor(s) do you use when writing Nim?\n\nProgrammers are very specific when it comes to their editor of choice, because\nof that it's good to know which editor is most popular among our community.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/editors.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/editors.png\" alt=\"Editors used by Nim users\" style=\"width:100%\"/>\n  </a>\n\nLooks like Vim is the winner with almost 30%. Followed by Sublime Text and\nEmacs. Aporia, the Nim IDE, gets a respectable 15.5%. There was\nalso more than\n17% of answers which included \"Other\" editors, such as: Notepad++, Geany, gedit,\nand Kate.\n\n### What operating system(s) do you compile for and run your Nim projects on?\n\nThis question gave us information about the most popular target operating\nsystems, as well as some of the more obscure ones. We have asked this question\nto find out the platforms on which Nim applications run on most frequently.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/target_os.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/target_os.png\" alt=\"Target operating systems\" style=\"width:100%\"/>\n  </a>\n\nThis question allowed multiple choices, so each percentage is out of the total\nnumber of respondents for this question. For example, 80.7% of the\nrespondents selected \"Linux\" but only 26.6% selected OS X.\n\nThis makes Linux by far the most popular target for Nim applications.\nSome \"Other\" targets included: BSD (OpenBSD, FreeBSD), iOS, Android, and\nJavaScript.\nIt's great to see Nim being used on such a wide variety of platforms.\n\n### What operating system(s) do you develop Nim projects on?\n\nWith this question, we wanted to know what operating systems are used for\ndevelopment.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/dev_os.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/dev_os.png\" alt=\"Development operating systems\" style=\"width:100%\"/>\n  </a>\n\nThis question also allowed multiple choices and ended up with very similar\nresults.\n\nYou can see that Linux is also the most popular developmental\nplatform for Nim. But it's more popular as a target platform.\n\n### Which version(s) of Nim do you use for your applications?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_versions.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_versions.png\" alt=\"Version use\" style=\"width:100%\"/>\n  </a>\n\nAt the time of this survey, version 0.14.2 was the latest stable release.\nIt's no wonder that it is the most commonly used release of Nim. It's good to\nsee that the older versions are not used as often. The high use of ``Git HEAD (devel)``\n(nightly builds) isn't surprising, Nim is still evolving rapidly and our\nrelease schedule is not regular or frequent.\n\nOnce we go past the 1.0 release, we expect to see much less use of the unstable\n``devel`` branch.\n\n### Has upgrading to a new version of the Nim compiler broken your code?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/breakage.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/breakage.png\" alt=\"Breakage\" style=\"width:100%\"/>\n  </a>\n\nDespite the unstable nature of Nim in the lead up to version 1.0, whenever\nwe make breaking changes we do our best to deprecate things and ensure that\nold code continues to work for our users. Of course sometimes this is not\npossible and other times it is simply easier to add a breaking change.\n\nThis question was asked to determine how much our user base is affected by\nbreaking changes between Nim versions. We decided to have three possible\nanswers for this question in order to give us an idea how frequent the\nbreakage was.\n\nIt's incredible to see that over 50% of our users have not experienced any\nbreakage after upgrading. We expect this number to increase significantly\nafter version 1.0 is released. Of the users that did experience breakage,\nover 80% of them said that it was a rare occurrence.\n\nIn comparison to Rust, our results show that there was a higher percentage of\nusers experiencing breakage as a result of an upgrade. This is to be expected,\nbecause Nim is still in its pre-1.0 period, whereas Rust 1.0 has been released\nover a year ago now.\n\nUnfortunately while we are still in this pre-1.0 period, releases will likely\nintroduce breaking changes as we refine certain aspects of Nim such as its\nstandard library, so the number of users experiencing breaking changes may\nincrease.\n\n### If so, how much work did it take to fix it?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/difficulty_fixing_breakage.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/difficulty_fixing_breakage.png\" alt=\"difficulty fixing breakage\" style=\"width:100%\"/>\n  </a>\n\nThankfully most of the breakage experienced by Nim users was very easy to fix.\n\n\n### If you used Nimble, do you like it?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nimble_opinion.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nimble_opinion.png\" alt=\"Do you like Nimble?\" style=\"width:100%\"/>\n  </a>\n\nNimble is the Nim package manager, a tool that is very important in Nim's\necosystem as it allows developers to easily install dependencies for their\nsoftware.\n\nThe majority of respondents rated it as a 4, showing us that the majority does\nlike Nimble. With over 55% rating it a 4 or 5. This percentage isn't as\noverwhelming as the 94.1% of users that rated Cargo a 4 or 5 in the Rust\nsurvey. Based on these results I think that we definitely need to do a\nbetter job with Nimble.\n\nIn our next survey, it might be a good idea to ask more questions about Nimble\nto determine how exactly it can be improved.\n\n### What aspects of Nim do you find most appealing?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_appeal.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_appeal.png\" alt=\"What aspects of Nim do you find most appealing?\" style=\"width:100%\"/>\n  </a>\n\nWe were interested to know the features of Nim that appeal most to our users.\nMore than 80% of our respondents selected \"Execution Speed\" as one of the\nfeatures that appeal to them. With \"Development Speed\" and \"Readability\"\ntying for second place and \"Metaprogramming\" at third place.\n\nThe options given to our respondents are rather predictable,\nthey do show us which of these features have the highest appeal though.\nWhat's more interesting are the \"Other\" answers.\n\nBy far the most popular \"Other\" answer was related to Nim's compilation to C.\nMany users mentioned that they like how easy it is to interface with C\nlibraries and the great portability that compiling to C offers.\n\n### What aspects of Nim do you find most displeasing?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/nim_displeasing.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/nim_displeasing.png\" alt=\"What aspects of Nim do you find most displeasing?\" style=\"width:100%\"/>\n  </a>\n\nIt was only natural to ask this question. The results are almost perfectly\nopposite to the previous question's answers, with almost 50% of respondents\nselecting \"Debugging Tools\"\nas the most displeasing aspect of Nim. With \"Documentation\" and \"Testing Tools\"\nin second and third place respectively. There is also a much larger number of\n\"Other\" answers to this question.\n\nThe \"Other\" answers for this question vary a lot. Here is a selection of\nthem, ordered by frequency:\n\n* Small community size.\n* Lack of in-depth tutorials.\n* Quality of error messages.\n* Forward declarations and no cyclic imports.\n* Bugs in the standard library.\n* No good IDE.\n* No REPL.\n* No major version.\n* Bugs in the compiler.\n* Lack of libraries.\n* Difficulty installing on Windows.\n* Non-intuitive semantics of various constructs.\n* Lack of immutable collections.\n* Async/await not being production ready.\n* Lack of shared collections for threads.\n* No Haxe target.\n* Memory safety.\n\nWe hope that we can improve these things with time. Many of these issues are\nalready being worked on, including the removal of the need for forward\ndeclarations. Some of these issues like our small community size are difficult\nto fix, but we will nonetheless do our best.\n\n\n## Previous Nim users\n\nFor users that have used Nim before but decided against using it, we asked just\none specific question. The proportion of our respondents that answered it\nwas 24%.\n\n### Why did you stop using Nim?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/ex_nim.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/ex_nim.png\" alt=\"I stopped using Nim because...\" style=\"width:100%\"/>\n  </a>\n\nAgain, this question got a lot of \"Other\" answers. Apart from that, the\nmost popular reason for leaving Nim is that it is not stable. Followed by the\na lack of needed libraries and packages and the instability of the\nstandard library.\n\n* Lack of IDE support.\n* Style insensitive.\n* Documentation.\n* Dislike the syntax.\n* Community is too small.\n* Missing language features (for example RAII).\n* No opportunities to use it at work.\n* Messy standard library.\n\nThe first item, \"Lack of IDE support\", was mentioned by multiple respondents.\nIn the future we should look into ensuring that major IDEs have plugins which\nenable easy Nim development.\n\nBased on some of the \"Other\" answers, it seems that many of the respondents\nhave not used Nim for very long, for example many respondents complained about\ninstallation issues which they would have run into before getting a chance to\nuse Nim. Because of this I would consider them not\nex-Nim users but developers that have not had a chance to try Nim fully.\nNext time we should also ask how long the respondent has used Nim for to get a\nbetter idea of whether they had a chance to use Nim for extended periods of\ntime.\n\n## Non-Nim users\n\nWe also wanted to know the reasons why developers decided against using Nim.\n\n### Why do you not use Nim?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/non_user.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/non_user.png\" alt=\"I don't use Nim because...\" style=\"width:100%\"/>\n  </a>\n\nThe most common reason that people have for not using Nim is that it is\nnot yet ready for production. Thankfully this will improve with time.\nIDE support is also a prominent factor just as we've seen in previous results.\n\nThere is also a lot of \"Other\" answers, let's have a look at a selection of\nthem. Some of the most prominent ones, in order of frequency, include:\n\n* No time to use/learn it\n* Syntax\n* Documentation is incomplete\n* Garbage Collection\n* Prefer functional paradigm\n* Small community\n* Style insensitivity/Case insensitivity\n\nOne respondent made a very good suggestion: they said that the\n\"Do you use Nim?\" question should have included \"No, but I intend to\" as\nan answer. Definitely something we will do in the next survey. Indeed, many\nrespondents mentioned that they were planning on trying out Nim but that they\njust have no time to do so, this is very encouraging!\n\n## Learning Resources\n\nWe wanted to get an idea of how Nim users are learning Nim. Every respondent\nanswered this question, no matter what they answered for the \"Do you use Nim?\"\nquestion.\n\n### Which learning resources, if any, did you use to learn Nim?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/learning_resources.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/learning_resources.png\" alt=\"learning resources\" style=\"width:100%\"/>\n  </a>\n\nThe idea behind this question was to understand which learning resources\nwere most popular among our user base. The\n[Nim tutorial](http://nim-lang.org/docs/tut1.html) is by far the most\npopular. In previous questions, we saw respondents mentioning that the Nim\ntutorial does not go into enough detail about Nim. Thanks to this information\nwe can come to the conclusion that the tutorial needs to be improved\nsignificantly to make sure that it gives our users the necessary information\nto use Nim effectively.\n\nIndeed, many users also use the\n[Nim manual](http://nim-lang.org/docs/manual.html) to learn Nim.\nThis manual has been\nwritten as a specification and so is not ideal for teaching Nim. Many of\nthe concepts in the Nim manual need to be explained in a lot more detail in\nthe Nim tutorial.\n\nOf course, it's exciting to see our respondents using other materials to learn\nNim. In particular I am excited to see that over 15% of the respondents have\nused\n[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)\nto learn Nim. I expect that more and more users will pick up the book after it\nis fully published.\n\n### Nim in Action\n\nAs the author of\n[Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81),\nI wanted to get some statistics surrounding\nmy book. With this in mind, I have created some questions relating to it.\n\n#### Have you read Nim in Action?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/book.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/book.png\" alt=\"Have you read Nim in Action?\" style=\"width:100%\"/>\n  </a>\n\nIt's good to see that over 50% of respondents have read the book or are at least\nplanning to read it. Keep in mind that this question was answered by all\nrespondents, not just Nim users.\n\n.. container:: standout\n\n  Are you interested in purchasing a copy of\n  [Nim in Action](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81)?\n  If so, you can use code ``wm090416lt`` to get 50% off the printed book today only!\n  If you purchase it now you will get access to an early access copy of\n  Nim in Action in eBook form and will be able to take part in the development\n  of this book.\n\n#### Did you enjoy Nim in Action?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/book_opinion.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/book_opinion.png\" alt=\"Did you enjoy Nim in Action?\" style=\"width:100%\"/>\n  </a>\n\nOf the people that read Nim in Action it's nice to see that almost 70% have\nenjoyed it.\n\n## Nim's future\n\n### What improvements are needed before Nim v1.0 can be released?\n\nWe were interested to know what our users believe is needed before\nNim version 1.0 can be released.\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/10_needs.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/10_needs.png\" alt=\"What is needed before 1.0 can be released?\" style=\"width:100%\"/>\n  </a>\n\nIt appears that the standard library is the biggest concern. With more than half\nof all respondents selecting \"The standard library needs to reviewed and\nany problems with it fixed\". This is in fact something we are already planning\nto address, so it's good to see that the majority agrees with us.\n\nA large proportion of users also believes that the language is great as-is\nand that we should focus on stabilising the compiler. This somewhat contradicts\nthe majority. But perhaps most of them thought that \"The language\" excludes the\nstandard library.\n\nFor this question, we decided to give our respondents a dedicated place to\ngive general feedback about what they feel is needed before v1.0 can be\nreleased. We received over 200 responses to that. Many of these responses\nreflect what we have already seen: that the documentation needs to improve,\nthat we need a good Nim IDE, stability for experimental features such as\nconcepts, the standard library needs to be cleaned up.\n\nUnfortunately many respondents used this question to say what needs to be fixed\nin Nim in general, not what is definitely necessary before 1.0 can be released.\n\n## Community demographics\n\n### What domain do you work in currently?\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/domains.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/domains.png\" alt=\"Work domains\" style=\"width:100%\"/>\n  </a>\n\n\nNim users are working in a wide variety of domains. It is encouraging to see\npeople from so many different backgrounds taking part in this survey.\n\n### What programming languages are you most comfortable with?\n\n\n\n\n  <a href=\"{{site.baseurl}}/assets/news/images/survey/languages.png\">\n    <img src=\"{{site.baseurl}}/assets/news/images/survey/languages.png\" alt=\"Programming languages\" style=\"width:100%\"/>\n  </a>\n\nPython and C are the top two programming languages that our respondents are\nmost comfortable with. This is not altogether surprising.\n\n## Last words\n\nAt the end of the survey we gave our respondents a chance to speak their mind\nabout anything they wish, with a simple question: \"Anything else you'd like\nto tell us?\"\n\nThere was a lot of great feedback given in this question from people who\nobviously really care deeply about Nim. There is too much to outline here,\nbut rest assurred that we will take it all into account and do our best to\nact on it.\n\nIn addition to feedback, we were also overwhelmed by the amount of positive\ncomments in the answers to this\nquestion. There was a lot of support from the community thanking us for our\nwork and determination.\n\nI'll let some quotes speak for themselves:\n\n<blockquote>You rock, seriously.</blockquote>\n<blockquote>Nim rocks! Keep it up! Thank you very much!</blockquote>\n<blockquote>You've made great progress on the language without any corporate backing, that is amazing. I wish Nim becomes one of the top used languages in a few years.</blockquote>\n<blockquote>Nim is elegant and wonderful! Keep at it!</blockquote>\n\nOur community is truly brilliant. We thank each and every one of you for\nfilling out this survey and hope that you will help us tackle some of the\nchallenges that face Nim.\n\nThis survey was a good place to give us feedback, but please don't wait for\nthe next one. We are always looking to hear more from you and we hope that you\nwill participate in discussions relating to this survey as well the future\nof Nim.\n\nThanks for reading, and have a good day!\n", "tags": ["nim", "python"], "published_at": "", "id": 31}, {"title": "Version 0.15.0 released", "slug": "version-released", "content": "We're happy to announce that the latest release of Nim, version 0.15.0, is nowavailable!As always, you can grab the latest version from the[downloads page]({{ site.baseurl }}/install.html).This release includes almost 180 bug fixes and improvements. To see a full listof changes, take a look at the detailed changelog[below](#changelog).Some of the most significant changes in this release include: improvements tothe documentation, addition of a new ``multisync`` macro, and a new``HttpClient`` implementation.## DocumentationAll pages in the documentation now contain a search box and a drop down toselect how procedures should be sorted. This allows you to search forprocedures, types, macros and more from any documentation page.<a href=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_search.gif\">  <img src=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_search.gif\" alt=\"Doc search\" style=\"width:100%\"/></a>Sorting the procedures by type shows a more natural table of contents. Thisshould also help you to find procedures and other identifiers.<a href=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_sort.gif\">  <img src=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_sort.gif\" alt=\"Doc sort\" style=\"width:100%\"/></a>## Multisync macroThe ``multisync`` macro was implemented to enable you to define bothsynchronous and asynchronous IO procedures without having to duplicate alot of code.As an example, consider the ``recvTwice`` procedure below:```nimproc recvTwice(socket: Socket | AsyncSocket): Future[string] {.multisync.} =  result = \"\"  result.add(await socket.recv(25))  result.add(await socket.recv(20))```The ``multisync`` macro will transform this procedure into the following:```nimproc recvTwice(socket: Socket): string =  result = \"\"  result.add(socket.recv(25))  result.add(socket.recv(20))proc recvTwice(socket: AsyncSocket): Future[string] {.async.} =  result = \"\"  result.add(await socket.recv(25))  result.add(await socket.recv(20))```Allowing you to use ``recvTwice`` with both synchronous and asynchronous sockets.## HttpClientMany of the ``httpclient`` module's procedures have been deprecated infavour of a new implementation using the ``multisync`` macro. There are nowtwo types: ``HttpClient`` and ``AsyncHttpClient``. Both of these implement thesame procedures and functionality, the only difference is timeout support andwhether they are blocking or not.See the [httpclient](http://nim-lang.org/docs/httpclient.html) moduledocumentation for more information.## Changelog### Changes affecting backwards compatibility- The ``json`` module now uses an ``OrderedTable`` rather than a ``Table``  for JSON objects.- The [`split`` `(doc)](http://nim-lang.org/docs/strutils.html#split,string,set[char],int)  procedure in the ``strutils`` module (with a delimiter of type  ``set[char]``) no longer strips and splits characters out of the target string  by the entire set of characters. Instead, it now behaves in a  similar fashion to ``split`` with ``string`` and ``char``  delimiters. Use ``splitWhitespace`` to get the old behaviour.- The command invocation syntax will soon apply to open brackets  and curlies too. This means that code like ``a [i]`` will be  interpreted as ``a([i])`` and not as ``a[i]`` anymore. Likewise  ``f (a, b)`` means that the tuple ``(a, b)`` is passed to ``f``.  The compiler produces a warning for ``a [i]``::    Warning: a [b] will be parsed as command syntax; spacing is deprecated  See [Issue #3898](https://github.com/nim-lang/Nim/issues/3898) for the  relevant discussion.- Overloading the special operators ``.``, ``.()``, ``.=``, ``()`` now  needs to be enabled via the ``{.experimental.}`` pragma.- ``immediate`` templates and macros are now deprecated.  Use ``untyped`` [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters)  parameters instead.- The metatype ``expr`` is deprecated. Use ``untyped``  [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters) instead.- The metatype ``stmt`` is deprecated. Use ``typed``  [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters) instead.- The compiler is now more picky when it comes to ``tuple`` types. The  following code used to compile, now it's rejected:  ```nim  import tables  var rocketaims = initOrderedTable[string, Table[tuple[k: int8, v: int8], int64]]()  rocketaims[\"hi\"] = {(-1.int8, 0.int8): 0.int64}.toTable()  ```  Instead be consistent in your tuple usage and use tuple names for named tuples:  ```nim  import tables  var rocketaims = initOrderedTable[string, Table[tuple[k: int8, v: int8], int64]]()  rocketaims[\"hi\"] = {(k: -1.int8, v: 0.int8): 0.int64}.toTable()  ```- Now when you compile console applications for Windows, console output  encoding is automatically set to UTF-8.- Unhandled exceptions in JavaScript are now thrown regardless of whether  ``noUnhandledHandler`` is defined. But the stack traces should be much more  readable now.- In JavaScript, the ``system.alert`` procedure has been deprecated.  Use ``dom.alert`` instead.- De-deprecated ``re.nim`` because there is too much code using it  and it got the basic API right.- The type of ``headers`` field in the ``AsyncHttpClient`` type  [(doc)](http://nim-lang.org/docs/httpclient.html#AsyncHttpClient)  has been changed  from a string table to the specialised ``HttpHeaders`` type.- The ``httpclient.request``  [(doc)](http://nim-lang.org/docs/httpclient.html#request,AsyncHttpClient,string,string,string)  procedure which takes the ``httpMethod`` as a string  value no longer requires it to be prefixed with ``\"http\"``  (or similar).- Converting a ``HttpMethod``  [(doc)](nim-lang.org/docs/httpcore.html#HttpMethod)  value to a string using the ``$`` operator will  give string values without the ``\"Http\"`` prefix now.- The ``Request``  [(doc)](http://nim-lang.org/docs/asynchttpserver.html#Request)  object defined in the ``asynchttpserver`` module now uses  the ``HttpMethod`` type for the request method.### Library Additions- Added ``readHeaderRow`` and ``rowEntry`` to the ``parsecsv``  [(doc)](http://nim-lang.org/docs/parsecsv.html) module  to provide  a lightweight alternative to python's ``csv.DictReader``.- Added ``setStdIoUnbuffered`` proc to the ``system`` module to enable  unbuffered I/O.- Added ``center`` and ``rsplit`` to the ``strutils``  [(doc)](http://nim-lang.org/docs/strutils.html) module  to provide similar Python functionality for Nim's strings.- Added ``isTitle``, ``title``, ``swapCase``, ``isUpper``, ``toUpper``,  ``isLower``, ``toLower``, ``isAlpha``, ``isSpace``, and ``capitalize``  to the ``unicode.nim``  [(doc)](http://nim-lang.org/docs/unicode.html) module  to provide unicode aware case manipulation and case  testing.- Added a new module ``strmisc``  [(doc)](http://nim-lang.org/docs/strmisc.html)  to hold uncommon string  operations. Currently contains ``partition``, ``rpartition``  and ``expandTabs``.- Split out ``walkFiles`` in the ``os``  [(doc)](http://nim-lang.org/docs/os.html) module to three separate procs  in order to make a clear distinction of functionality. ``walkPattern`` iterates  over both files and directories, while ``walkFiles`` now only iterates  over files and ``walkDirs`` only iterates over directories.- Added a synchronous ``HttpClient`` in the ``httpclient``  [(doc)](http://nim-lang.org/docs/httpclient.html)  module. The old  ``get``, ``post`` and similar procedures are now deprecated in favour of it.- Added a new macro called ``multisync`` allowing you to write procedures for  synchronous and asynchronous sockets with no duplication.- The ``async`` macro will now complete ``FutureVar[T]`` parameters  automatically unless they have been completed already.### Tool Additions- The documentation is now searchable and sortable by type.- Pragmas are now hidden by default in the documentation to reduce noise.- Edit links are now present in the documentation.### Compiler Additions- The ``-d/--define`` flag can now optionally take a value to be used  by code at compile time.  [(doc)](http://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-time-define-pragmas)### Nimscript Additions- It's possible to enable and disable specific hints and warnings in  Nimscript via the ``warning`` and ``hint`` procedures.- Nimscript exports  a proc named ``patchFile`` which can be used to  patch modules or include files for different Nimble packages, including  the ``stdlib`` package.### Language Additions- Added ``{.intdefine.}`` and ``{.strdefine.}`` macros to make use of  (optional) compile time defines.  [(doc)](http://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-time-define-pragmas)- If the first statement is an ``import system`` statement then ``system``  is not imported implicitly anymore. This allows for code like  ``import system except echo`` or ``from system import nil``.### BugfixesThe list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-06-22+..+2016-09-30%22+).- Fixed \"RFC: should startsWith and endsWith work with characters?\"  ([#4252](https://github.com/nim-lang/Nim/issues/4252))- Fixed \"Feature request: unbuffered I/O\"  ([#2146](https://github.com/nim-lang/Nim/issues/2146))- Fixed \"clear() not implemented for CountTableRef\"  ([#4325](https://github.com/nim-lang/Nim/issues/4325))- Fixed \"Cannot close file opened async\"  ([#4334](https://github.com/nim-lang/Nim/issues/4334))- Fixed \"Feature Request: IDNA support\"  ([#3045](https://github.com/nim-lang/Nim/issues/3045))- Fixed \"Async: wrong behavior of boolean operations on futures\"  ([#4333](https://github.com/nim-lang/Nim/issues/4333))- Fixed \"os.walkFiles yields directories\"  ([#4280](https://github.com/nim-lang/Nim/issues/4280))- Fixed \"Fix #4392 and progress on #4170\"  ([#4393](https://github.com/nim-lang/Nim/issues/4393))- Fixed \"Await unable to wait futures from objects fields\"  ([#4390](https://github.com/nim-lang/Nim/issues/4390))- Fixed \"TMP variable name generation should be more stable\"  ([#4364](https://github.com/nim-lang/Nim/issues/4364))- Fixed \"nativesockets doesn't compile for Android 4.x (API v19 or older) because of gethostbyaddr\"  ([#4376](https://github.com/nim-lang/Nim/issues/4376))- Fixed \"no generic parameters allowed for ref\"  ([#4395](https://github.com/nim-lang/Nim/issues/4395))- Fixed \"split proc in strutils inconsistent for set[char]\"  ([#4305](https://github.com/nim-lang/Nim/issues/4305))- Fixed \"Problem with sets in devel\"  ([#4412](https://github.com/nim-lang/Nim/issues/4412))- Fixed \"Compiler crash when using seq[PNimrodNode] in macros\"  ([#537](https://github.com/nim-lang/Nim/issues/537))- Fixed \"ospaths should be marked for nimscript use only\"  ([#4249](https://github.com/nim-lang/Nim/issues/4249))- Fixed \"Repeated deepCopy() on a recursive data structure eventually crashes\"  ([#4340](https://github.com/nim-lang/Nim/issues/4340))- Fixed \"Analyzing destructor\"  ([#4371](https://github.com/nim-lang/Nim/issues/4371))- Fixed \"getType does not work anymore on a typedesc\"  ([#4462](https://github.com/nim-lang/Nim/issues/4462))- Fixed \"Error in rendering empty JSON array\"  ([#4399](https://github.com/nim-lang/Nim/issues/4399))- Fixed \"Segmentation fault when using async pragma on generic procs\"  ([#2377](https://github.com/nim-lang/Nim/issues/2377))- Fixed \"Forwarding does not work for generics,  | produces an implicit generic\"  ([#3055](https://github.com/nim-lang/Nim/issues/3055))- Fixed \"Inside a macro, the length of the `seq` data inside a `queue` does not increase and crashes\"  ([#4422](https://github.com/nim-lang/Nim/issues/4422))- Fixed \"compiler sigsegv while processing varargs\"  ([#4475](https://github.com/nim-lang/Nim/issues/4475))- Fixed \"JS codegen - strings are assigned by reference\"  ([#4471](https://github.com/nim-lang/Nim/issues/4471))- Fixed \"when statement doesn't verify syntax\"  ([#4301](https://github.com/nim-lang/Nim/issues/4301))- Fixed \".this pragma doesn't work with .async procs\"  ([#4358](https://github.com/nim-lang/Nim/issues/4358))- Fixed \"type foo = range(...) crashes compiler\"  ([#4429](https://github.com/nim-lang/Nim/issues/4429))- Fixed \"Compiler crash\"  ([#2730](https://github.com/nim-lang/Nim/issues/2730))- Fixed \"Crash in compiler with static[int]\"  ([#3706](https://github.com/nim-lang/Nim/issues/3706))- Fixed \"Bad error message \"could not resolve\"\"  ([#3548](https://github.com/nim-lang/Nim/issues/3548))- Fixed \"Roof operator on string in template crashes compiler  (Error: unhandled exception: sons is not accessible [FieldError])\"  ([#3545](https://github.com/nim-lang/Nim/issues/3545))- Fixed \"SIGSEGV during compilation with parallel block\"  ([#2758](https://github.com/nim-lang/Nim/issues/2758))- Fixed \"Codegen error with template and implicit dereference\"  ([#4478](https://github.com/nim-lang/Nim/issues/4478))- Fixed \"@ in importcpp should work with no-argument functions\"  ([#4496](https://github.com/nim-lang/Nim/issues/4496))- Fixed \"Regression: findExe raises\"  ([#4497](https://github.com/nim-lang/Nim/issues/4497))- Fixed \"Linking error - repeated symbols when splitting into modules\"  ([#4485](https://github.com/nim-lang/Nim/issues/4485))- Fixed \"Error: method is not a base\"  ([#4428](https://github.com/nim-lang/Nim/issues/4428))- Fixed \"Casting from function returning a tuple fails\"  ([#4345](https://github.com/nim-lang/Nim/issues/4345))- Fixed \"clang error with default nil parameter\"  ([#4328](https://github.com/nim-lang/Nim/issues/4328))- Fixed \"internal compiler error: openArrayLoc\"  ([#888](https://github.com/nim-lang/Nim/issues/888))- Fixed \"Can't forward declare async procs\"  ([#1970](https://github.com/nim-lang/Nim/issues/1970))- Fixed \"unittest.check and sequtils.allIt do not work together\"  ([#4494](https://github.com/nim-lang/Nim/issues/4494))- Fixed \"httpclient package can't make SSL requests over an HTTP proxy\"  ([#4520](https://github.com/nim-lang/Nim/issues/4520))- Fixed \"False positive warning \"declared but not used\" for enums.\"  ([#4510](https://github.com/nim-lang/Nim/issues/4510))- Fixed \"Explicit conversions not using converters\"  ([#4432](https://github.com/nim-lang/Nim/issues/4432))- Fixed \"Unclear error message when importing\"  ([#4541](https://github.com/nim-lang/Nim/issues/4541))- Fixed \"Change console encoding to UTF-8 by default\"  ([#4417](https://github.com/nim-lang/Nim/issues/4417))- Fixed \"Typedesc ~= Generic notation does not work anymore!\"  ([#4534](https://github.com/nim-lang/Nim/issues/4534))- Fixed \"unittest broken?\"  ([#4555](https://github.com/nim-lang/Nim/issues/4555))- Fixed \"Operator \"or\" in converter types seems to crash the compiler.\"  ([#4537](https://github.com/nim-lang/Nim/issues/4537))- Fixed \"nimscript failed to compile/run -- Error: cannot 'importc' variable at compile time\"  ([#4561](https://github.com/nim-lang/Nim/issues/4561))- Fixed \"Regression: identifier expected, but found ...\"  ([#4564](https://github.com/nim-lang/Nim/issues/4564))- Fixed \"varargs with transformation that takes var argument creates invalid c code\"  ([#4545](https://github.com/nim-lang/Nim/issues/4545))- Fixed \"Type mismatch when using empty tuple as generic parameter\"  ([#4550](https://github.com/nim-lang/Nim/issues/4550))- Fixed \"strscans\"  ([#4562](https://github.com/nim-lang/Nim/issues/4562))- Fixed \"getTypeImpl crashes (SIGSEGV) on variant types\"  ([#4526](https://github.com/nim-lang/Nim/issues/4526))- Fixed \"Wrong result of sort in VM\"  ([#4065](https://github.com/nim-lang/Nim/issues/4065))- Fixed \"I can't call the random[T](x: Slice[T]): T\"  ([#4353](https://github.com/nim-lang/Nim/issues/4353))- Fixed \"invalid C code generated (function + block + empty tuple)\"  ([#4505](https://github.com/nim-lang/Nim/issues/4505))- Fixed \"performance issue: const Table make a copy at runtime lookup.\"  ([#4354](https://github.com/nim-lang/Nim/issues/4354))- Fixed \"Compiler issue: libraries without absolute paths cannot be found correctly\"  ([#4568](https://github.com/nim-lang/Nim/issues/4568))- Fixed \"Cannot use math.`^` with non-int types.\"  ([#4574](https://github.com/nim-lang/Nim/issues/4574))- Fixed \"C codegen fails when constructing an array using an object constructor.\"  ([#4582](https://github.com/nim-lang/Nim/issues/4582))- Fixed \"Visual Studio 10 unresolved external symbol _trunc(should we support VS2010?)\"  ([#4532](https://github.com/nim-lang/Nim/issues/4532))- Fixed \"Cannot pass generic subtypes to proc for generic supertype\"  ([#4528](https://github.com/nim-lang/Nim/issues/4528))- Fixed \"Lamda-lifting bug leading to crash.\"  ([#4551](https://github.com/nim-lang/Nim/issues/4551))- Fixed \"First-class iterators declared as inline are compiled at Nim side (no error message) and fail at C\"  ([#2094](https://github.com/nim-lang/Nim/issues/2094))- Fixed \"VS2010-warning C4090 : 'function' : different 'const' qualifiers\"  ([#4590](https://github.com/nim-lang/Nim/issues/4590))- Fixed \"Regression: type mismatch with generics\"  ([#4589](https://github.com/nim-lang/Nim/issues/4589))- Fixed \"„can raise an unlisted exception“ when assigning nil as default value\"  ([#4593](https://github.com/nim-lang/Nim/issues/4593))- Fixed \"upcoming asyncdispatch.closeSocket is not GC-safe\"  ([#4606](https://github.com/nim-lang/Nim/issues/4606))- Fixed \"Visual Studio 10.0 compiler errors, 12.0 warning\"  ([#4459](https://github.com/nim-lang/Nim/issues/4459))- Fixed \"Exception of net.newContext: result.extraInternalIndex == 0  [AssertionError]\"  ([#4406](https://github.com/nim-lang/Nim/issues/4406))- Fixed \"error: redeclaration of 'result_115076' with no linkage\"  ([#3221](https://github.com/nim-lang/Nim/issues/3221))- Fixed \"Compiler crashes on conversion from int to float at compile time\"  ([#4619](https://github.com/nim-lang/Nim/issues/4619))- Fixed \"wrong number of arguments regression in devel\"  ([#4600](https://github.com/nim-lang/Nim/issues/4600))- Fixed \"importc $ has broken error message (and is not documented)\"  ([#4579](https://github.com/nim-lang/Nim/issues/4579))- Fixed \"Compiler segfaults on simple importcpp in js mode [regression]\"  ([#4632](https://github.com/nim-lang/Nim/issues/4632))- Fixed \"Critical reference counting codegen problem\"  ([#4653](https://github.com/nim-lang/Nim/issues/4653))- Fixed \"tables.nim needs lots of {.noSideEffect.}\"  ([#4254](https://github.com/nim-lang/Nim/issues/4254))- Fixed \"Capture variable error when using ``=>`` macro\"  ([#4658](https://github.com/nim-lang/Nim/issues/4658))- Fixed \"Enum from char: internal error getInt\"  ([#3606](https://github.com/nim-lang/Nim/issues/3606))- Fixed \"Compiler crashes in debug mode (no error in release mode) with Natural discriminant in object variants\"  ([#2865](https://github.com/nim-lang/Nim/issues/2865))- Fixed \"SIGSEGV when access field in const object variants\"  ([#4253](https://github.com/nim-lang/Nim/issues/4253))- Fixed \"varargs cannot be used with template converter.\"  ([#4292](https://github.com/nim-lang/Nim/issues/4292))- Fixed \"Compiler crashes when borrowing $\"  ([#3928](https://github.com/nim-lang/Nim/issues/3928))- Fixed \"internal error: genMagicExpr: mArrPut\"  ([#4491](https://github.com/nim-lang/Nim/issues/4491))- Fixed \"Unhelpful error message on importc namespace collision\"  ([#4580](https://github.com/nim-lang/Nim/issues/4580))- Fixed \"Problem with openarrays and slices\"  ([#4179](https://github.com/nim-lang/Nim/issues/4179))- Fixed \"Removing lines from end of file then rebuilding does not rebuild [js only?]\"  ([#4656](https://github.com/nim-lang/Nim/issues/4656))- Fixed \"getCurrentException and getCurrentExceptionMsg do not work with JS\"  ([#4635](https://github.com/nim-lang/Nim/issues/4635))- Fixed \"generic proc parameter is not inferred if type parameter has specifier\"  ([#4672](https://github.com/nim-lang/Nim/issues/4672))- Fixed \"Cannot instantiate generic parameter when it is parent type parameter\"  ([#4673](https://github.com/nim-lang/Nim/issues/4673))- Fixed \"deepCopy doesn't work with inheritance after last commit\"  ([#4693](https://github.com/nim-lang/Nim/issues/4693))- Fixed \"Multi-methods don't work when passing ref to a different thread\"  ([#4689](https://github.com/nim-lang/Nim/issues/4689))- Fixed \"Infinite loop in effect analysis on generics\"  ([#4677](https://github.com/nim-lang/Nim/issues/4677))- Fixed \"SIGSEGV when compiling NimYAML tests\"  ([#4699](https://github.com/nim-lang/Nim/issues/4699))- Fixed \"Closing AsyncEvent now also unregisters it on non-Windows platforms\"  ([#4694](https://github.com/nim-lang/Nim/issues/4694))- Fixed \"Don't update handle in upcoming/asyncdispatch poll() if it was closed\"  ([#4697](https://github.com/nim-lang/Nim/issues/4697))- Fixed \"generated local variables declared outside block\"  ([#4721](https://github.com/nim-lang/Nim/issues/4721))- Fixed \"Footer Documentation links, & Community link point to the wrong place under news entries\"  ([#4529](https://github.com/nim-lang/Nim/issues/4529))- Fixed \"Jester's macro magic leads to incorrect C generation\"  ([#4088](https://github.com/nim-lang/Nim/issues/4088))- Fixed \"cas bug in atomics.nim\"  ([#3279](https://github.com/nim-lang/Nim/issues/3279))- Fixed \"nimgrep PEG not capturing the pattern 'A'\"  ([#4751](https://github.com/nim-lang/Nim/issues/4751))- Fixed \"GC assert triggers when assigning TableRef threadvar\"  ([#4640](https://github.com/nim-lang/Nim/issues/4640))- Fixed \".this pragma conflicts with experimental ptr dereferencing when names conflict\"  ([#4671](https://github.com/nim-lang/Nim/issues/4671))- Fixed \"Generic procs accepting var .importcpp type do not work [regression]\"  ([#4625](https://github.com/nim-lang/Nim/issues/4625))- Fixed \"C Error on tuple assignment with array\"  ([#4626](https://github.com/nim-lang/Nim/issues/4626))- Fixed \"module securehash not gcsafe\"  ([#4760](https://github.com/nim-lang/Nim/issues/4760))- Fixed \"Nimble installation failed on Windows x86.\"  ([#4764](https://github.com/nim-lang/Nim/issues/4764))- Fixed \"Recent changes to marshal module break old marshalled data\"  ([#4779](https://github.com/nim-lang/Nim/issues/4779))- Fixed \"tnewasyncudp.nim test loops forever\"  ([#4777](https://github.com/nim-lang/Nim/issues/4777))- Fixed \"Wrong poll timeout behavior in asyncdispatch\"  ([#4262](https://github.com/nim-lang/Nim/issues/4262))- Fixed \"Standalone await shouldn't read future\"  ([#4170](https://github.com/nim-lang/Nim/issues/4170))- Fixed \"Regression: httpclient fails to compile without -d:ssl\"  ([#4797](https://github.com/nim-lang/Nim/issues/4797))- Fixed \"C Error on declaring array of heritable objects with bitfields\"  ([#3567](https://github.com/nim-lang/Nim/issues/3567))- Fixed \"Corruption when using Channels and Threads\"  ([#4776](https://github.com/nim-lang/Nim/issues/4776))- Fixed \"Sometimes Channel tryRecv() erroneously reports no messages available on the first call on Windows\"  ([#4746](https://github.com/nim-lang/Nim/issues/4746))- Fixed \"Improve error message of functions called without parenthesis\"  ([#4813](https://github.com/nim-lang/Nim/issues/4813))- Fixed \"Docgen doesn't find doc comments in macro generated procs\"  ([#4803](https://github.com/nim-lang/Nim/issues/4803))- Fixed \"asynchttpserver may consume unbounded memory reading headers\"  ([#3847](https://github.com/nim-lang/Nim/issues/3847))- Fixed \"TLS connection to api.clashofclans.com hangs forever.\"  ([#4587](https://github.com/nim-lang/Nim/issues/4587))", "content_with_meta": "---\ntitle: \"Version 0.15.0 released\"\nauthor: [Dominik Picheta, Andreas Rumpf]\ntags: nim, python\n---\n\nWe're happy to announce that the latest release of Nim, version 0.15.0, is now\navailable!\n\nAs always, you can grab the latest version from the\n[downloads page]({{ site.baseurl }}/install.html).\n\nThis release includes almost 180 bug fixes and improvements. To see a full list\nof changes, take a look at the detailed changelog\n[below](#changelog).\n\nSome of the most significant changes in this release include: improvements to\nthe documentation, addition of a new ``multisync`` macro, and a new\n``HttpClient`` implementation.\n\n## Documentation\n\nAll pages in the documentation now contain a search box and a drop down to\nselect how procedures should be sorted. This allows you to search for\nprocedures, types, macros and more from any documentation page.\n\n<a href=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_search.gif\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_search.gif\" alt=\"Doc search\" style=\"width:100%\"/>\n</a>\n\nSorting the procedures by type shows a more natural table of contents. This\nshould also help you to find procedures and other identifiers.\n\n<a href=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_sort.gif\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/0.15.0/doc_sort.gif\" alt=\"Doc sort\" style=\"width:100%\"/>\n</a>\n\n## Multisync macro\n\nThe ``multisync`` macro was implemented to enable you to define both\nsynchronous and asynchronous IO procedures without having to duplicate a\nlot of code.\n\nAs an example, consider the ``recvTwice`` procedure below:\n\n```nim\nproc recvTwice(socket: Socket | AsyncSocket): Future[string] {.multisync.} =\n  result = \"\"\n  result.add(await socket.recv(25))\n  result.add(await socket.recv(20))\n```\n\nThe ``multisync`` macro will transform this procedure into the following:\n\n```nim\nproc recvTwice(socket: Socket): string =\n  result = \"\"\n  result.add(socket.recv(25))\n  result.add(socket.recv(20))\n\nproc recvTwice(socket: AsyncSocket): Future[string] {.async.} =\n  result = \"\"\n  result.add(await socket.recv(25))\n  result.add(await socket.recv(20))\n```\n\nAllowing you to use ``recvTwice`` with both synchronous and asynchronous sockets.\n\n## HttpClient\n\nMany of the ``httpclient`` module's procedures have been deprecated in\nfavour of a new implementation using the ``multisync`` macro. There are now\ntwo types: ``HttpClient`` and ``AsyncHttpClient``. Both of these implement the\nsame procedures and functionality, the only difference is timeout support and\nwhether they are blocking or not.\n\nSee the [httpclient](http://nim-lang.org/docs/httpclient.html) module\ndocumentation for more information.\n\n## Changelog\n\n### Changes affecting backwards compatibility\n\n- The ``json`` module now uses an ``OrderedTable`` rather than a ``Table``\n  for JSON objects.\n\n- The [`split`` `(doc)](http://nim-lang.org/docs/strutils.html#split,string,set[char],int)\n  procedure in the ``strutils`` module (with a delimiter of type\n  ``set[char]``) no longer strips and splits characters out of the target string\n  by the entire set of characters. Instead, it now behaves in a\n  similar fashion to ``split`` with ``string`` and ``char``\n  delimiters. Use ``splitWhitespace`` to get the old behaviour.\n\n- The command invocation syntax will soon apply to open brackets\n  and curlies too. This means that code like ``a [i]`` will be\n  interpreted as ``a([i])`` and not as ``a[i]`` anymore. Likewise\n  ``f (a, b)`` means that the tuple ``(a, b)`` is passed to ``f``.\n  The compiler produces a warning for ``a [i]``::\n\n    Warning: a [b] will be parsed as command syntax; spacing is deprecated\n\n  See [Issue #3898](https://github.com/nim-lang/Nim/issues/3898) for the\n  relevant discussion.\n\n- Overloading the special operators ``.``, ``.()``, ``.=``, ``()`` now\n  needs to be enabled via the ``{.experimental.}`` pragma.\n\n- ``immediate`` templates and macros are now deprecated.\n  Use ``untyped`` [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters)\n  parameters instead.\n\n- The metatype ``expr`` is deprecated. Use ``untyped``\n  [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters) instead.\n\n- The metatype ``stmt`` is deprecated. Use ``typed``\n  [(doc)](http://nim-lang.org/docs/manual.html#templates-typed-vs-untyped-parameters) instead.\n\n- The compiler is now more picky when it comes to ``tuple`` types. The\n  following code used to compile, now it's rejected:\n\n  ```nim\n  import tables\n  var rocketaims = initOrderedTable[string, Table[tuple[k: int8, v: int8], int64]]()\n  rocketaims[\"hi\"] = {(-1.int8, 0.int8): 0.int64}.toTable()\n  ```\n\n  Instead be consistent in your tuple usage and use tuple names for named tuples:\n\n  ```nim\n  import tables\n  var rocketaims = initOrderedTable[string, Table[tuple[k: int8, v: int8], int64]]()\n  rocketaims[\"hi\"] = {(k: -1.int8, v: 0.int8): 0.int64}.toTable()\n  ```\n\n- Now when you compile console applications for Windows, console output\n  encoding is automatically set to UTF-8.\n\n- Unhandled exceptions in JavaScript are now thrown regardless of whether\n  ``noUnhandledHandler`` is defined. But the stack traces should be much more\n  readable now.\n\n- In JavaScript, the ``system.alert`` procedure has been deprecated.\n  Use ``dom.alert`` instead.\n\n- De-deprecated ``re.nim`` because there is too much code using it\n  and it got the basic API right.\n\n- The type of ``headers`` field in the ``AsyncHttpClient`` type\n  [(doc)](http://nim-lang.org/docs/httpclient.html#AsyncHttpClient)\n  has been changed\n  from a string table to the specialised ``HttpHeaders`` type.\n\n- The ``httpclient.request``\n  [(doc)](http://nim-lang.org/docs/httpclient.html#request,AsyncHttpClient,string,string,string)\n  procedure which takes the ``httpMethod`` as a string\n  value no longer requires it to be prefixed with ``\"http\"``\n  (or similar).\n\n- Converting a ``HttpMethod``\n  [(doc)](nim-lang.org/docs/httpcore.html#HttpMethod)\n  value to a string using the ``$`` operator will\n  give string values without the ``\"Http\"`` prefix now.\n\n- The ``Request``\n  [(doc)](http://nim-lang.org/docs/asynchttpserver.html#Request)\n  object defined in the ``asynchttpserver`` module now uses\n  the ``HttpMethod`` type for the request method.\n\n### Library Additions\n\n- Added ``readHeaderRow`` and ``rowEntry`` to the ``parsecsv``\n  [(doc)](http://nim-lang.org/docs/parsecsv.html) module\n  to provide\n  a lightweight alternative to python's ``csv.DictReader``.\n\n- Added ``setStdIoUnbuffered`` proc to the ``system`` module to enable\n  unbuffered I/O.\n\n- Added ``center`` and ``rsplit`` to the ``strutils``\n  [(doc)](http://nim-lang.org/docs/strutils.html) module\n  to provide similar Python functionality for Nim's strings.\n\n- Added ``isTitle``, ``title``, ``swapCase``, ``isUpper``, ``toUpper``,\n  ``isLower``, ``toLower``, ``isAlpha``, ``isSpace``, and ``capitalize``\n  to the ``unicode.nim``\n  [(doc)](http://nim-lang.org/docs/unicode.html) module\n  to provide unicode aware case manipulation and case\n  testing.\n\n- Added a new module ``strmisc``\n  [(doc)](http://nim-lang.org/docs/strmisc.html)\n  to hold uncommon string\n  operations. Currently contains ``partition``, ``rpartition``\n  and ``expandTabs``.\n\n- Split out ``walkFiles`` in the ``os``\n  [(doc)](http://nim-lang.org/docs/os.html) module to three separate procs\n  in order to make a clear distinction of functionality. ``walkPattern`` iterates\n  over both files and directories, while ``walkFiles`` now only iterates\n  over files and ``walkDirs`` only iterates over directories.\n\n- Added a synchronous ``HttpClient`` in the ``httpclient``\n  [(doc)](http://nim-lang.org/docs/httpclient.html)\n  module. The old\n  ``get``, ``post`` and similar procedures are now deprecated in favour of it.\n\n- Added a new macro called ``multisync`` allowing you to write procedures for\n  synchronous and asynchronous sockets with no duplication.\n\n- The ``async`` macro will now complete ``FutureVar[T]`` parameters\n  automatically unless they have been completed already.\n\n### Tool Additions\n\n- The documentation is now searchable and sortable by type.\n- Pragmas are now hidden by default in the documentation to reduce noise.\n- Edit links are now present in the documentation.\n\n\n### Compiler Additions\n\n- The ``-d/--define`` flag can now optionally take a value to be used\n  by code at compile time.\n  [(doc)](http://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-time-define-pragmas)\n\n### Nimscript Additions\n\n- It's possible to enable and disable specific hints and warnings in\n  Nimscript via the ``warning`` and ``hint`` procedures.\n\n- Nimscript exports  a proc named ``patchFile`` which can be used to\n  patch modules or include files for different Nimble packages, including\n  the ``stdlib`` package.\n\n### Language Additions\n\n- Added ``{.intdefine.}`` and ``{.strdefine.}`` macros to make use of\n  (optional) compile time defines.\n  [(doc)](http://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compile-time-define-pragmas)\n\n- If the first statement is an ``import system`` statement then ``system``\n  is not imported implicitly anymore. This allows for code like\n  ``import system except echo`` or ``from system import nil``.\n\n### Bugfixes\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-06-22+..+2016-09-30%22+).\n\n- Fixed \"RFC: should startsWith and endsWith work with characters?\"\n  ([#4252](https://github.com/nim-lang/Nim/issues/4252))\n\n- Fixed \"Feature request: unbuffered I/O\"\n  ([#2146](https://github.com/nim-lang/Nim/issues/2146))\n- Fixed \"clear() not implemented for CountTableRef\"\n  ([#4325](https://github.com/nim-lang/Nim/issues/4325))\n- Fixed \"Cannot close file opened async\"\n  ([#4334](https://github.com/nim-lang/Nim/issues/4334))\n- Fixed \"Feature Request: IDNA support\"\n  ([#3045](https://github.com/nim-lang/Nim/issues/3045))\n- Fixed \"Async: wrong behavior of boolean operations on futures\"\n  ([#4333](https://github.com/nim-lang/Nim/issues/4333))\n- Fixed \"os.walkFiles yields directories\"\n  ([#4280](https://github.com/nim-lang/Nim/issues/4280))\n- Fixed \"Fix #4392 and progress on #4170\"\n  ([#4393](https://github.com/nim-lang/Nim/issues/4393))\n- Fixed \"Await unable to wait futures from objects fields\"\n  ([#4390](https://github.com/nim-lang/Nim/issues/4390))\n- Fixed \"TMP variable name generation should be more stable\"\n  ([#4364](https://github.com/nim-lang/Nim/issues/4364))\n- Fixed \"nativesockets doesn't compile for Android 4.x (API v19 or older) because of gethostbyaddr\"\n  ([#4376](https://github.com/nim-lang/Nim/issues/4376))\n- Fixed \"no generic parameters allowed for ref\"\n  ([#4395](https://github.com/nim-lang/Nim/issues/4395))\n- Fixed \"split proc in strutils inconsistent for set[char]\"\n  ([#4305](https://github.com/nim-lang/Nim/issues/4305))\n- Fixed \"Problem with sets in devel\"\n  ([#4412](https://github.com/nim-lang/Nim/issues/4412))\n- Fixed \"Compiler crash when using seq[PNimrodNode] in macros\"\n  ([#537](https://github.com/nim-lang/Nim/issues/537))\n- Fixed \"ospaths should be marked for nimscript use only\"\n  ([#4249](https://github.com/nim-lang/Nim/issues/4249))\n- Fixed \"Repeated deepCopy() on a recursive data structure eventually crashes\"\n  ([#4340](https://github.com/nim-lang/Nim/issues/4340))\n- Fixed \"Analyzing destructor\"\n  ([#4371](https://github.com/nim-lang/Nim/issues/4371))\n- Fixed \"getType does not work anymore on a typedesc\"\n  ([#4462](https://github.com/nim-lang/Nim/issues/4462))\n- Fixed \"Error in rendering empty JSON array\"\n  ([#4399](https://github.com/nim-lang/Nim/issues/4399))\n- Fixed \"Segmentation fault when using async pragma on generic procs\"\n  ([#2377](https://github.com/nim-lang/Nim/issues/2377))\n- Fixed \"Forwarding does not work for generics,  | produces an implicit generic\"\n  ([#3055](https://github.com/nim-lang/Nim/issues/3055))\n- Fixed \"Inside a macro, the length of the `seq` data inside a `queue` does not increase and crashes\"\n  ([#4422](https://github.com/nim-lang/Nim/issues/4422))\n- Fixed \"compiler sigsegv while processing varargs\"\n  ([#4475](https://github.com/nim-lang/Nim/issues/4475))\n- Fixed \"JS codegen - strings are assigned by reference\"\n  ([#4471](https://github.com/nim-lang/Nim/issues/4471))\n- Fixed \"when statement doesn't verify syntax\"\n  ([#4301](https://github.com/nim-lang/Nim/issues/4301))\n- Fixed \".this pragma doesn't work with .async procs\"\n  ([#4358](https://github.com/nim-lang/Nim/issues/4358))\n- Fixed \"type foo = range(...) crashes compiler\"\n  ([#4429](https://github.com/nim-lang/Nim/issues/4429))\n- Fixed \"Compiler crash\"\n  ([#2730](https://github.com/nim-lang/Nim/issues/2730))\n- Fixed \"Crash in compiler with static[int]\"\n  ([#3706](https://github.com/nim-lang/Nim/issues/3706))\n- Fixed \"Bad error message \"could not resolve\"\"\n  ([#3548](https://github.com/nim-lang/Nim/issues/3548))\n- Fixed \"Roof operator on string in template crashes compiler  (Error: unhandled exception: sons is not accessible [FieldError])\"\n  ([#3545](https://github.com/nim-lang/Nim/issues/3545))\n- Fixed \"SIGSEGV during compilation with parallel block\"\n  ([#2758](https://github.com/nim-lang/Nim/issues/2758))\n- Fixed \"Codegen error with template and implicit dereference\"\n  ([#4478](https://github.com/nim-lang/Nim/issues/4478))\n- Fixed \"@ in importcpp should work with no-argument functions\"\n  ([#4496](https://github.com/nim-lang/Nim/issues/4496))\n- Fixed \"Regression: findExe raises\"\n  ([#4497](https://github.com/nim-lang/Nim/issues/4497))\n- Fixed \"Linking error - repeated symbols when splitting into modules\"\n  ([#4485](https://github.com/nim-lang/Nim/issues/4485))\n- Fixed \"Error: method is not a base\"\n  ([#4428](https://github.com/nim-lang/Nim/issues/4428))\n- Fixed \"Casting from function returning a tuple fails\"\n  ([#4345](https://github.com/nim-lang/Nim/issues/4345))\n- Fixed \"clang error with default nil parameter\"\n  ([#4328](https://github.com/nim-lang/Nim/issues/4328))\n- Fixed \"internal compiler error: openArrayLoc\"\n  ([#888](https://github.com/nim-lang/Nim/issues/888))\n- Fixed \"Can't forward declare async procs\"\n  ([#1970](https://github.com/nim-lang/Nim/issues/1970))\n- Fixed \"unittest.check and sequtils.allIt do not work together\"\n  ([#4494](https://github.com/nim-lang/Nim/issues/4494))\n- Fixed \"httpclient package can't make SSL requests over an HTTP proxy\"\n  ([#4520](https://github.com/nim-lang/Nim/issues/4520))\n- Fixed \"False positive warning \"declared but not used\" for enums.\"\n  ([#4510](https://github.com/nim-lang/Nim/issues/4510))\n- Fixed \"Explicit conversions not using converters\"\n  ([#4432](https://github.com/nim-lang/Nim/issues/4432))\n\n- Fixed \"Unclear error message when importing\"\n  ([#4541](https://github.com/nim-lang/Nim/issues/4541))\n- Fixed \"Change console encoding to UTF-8 by default\"\n  ([#4417](https://github.com/nim-lang/Nim/issues/4417))\n\n- Fixed \"Typedesc ~= Generic notation does not work anymore!\"\n  ([#4534](https://github.com/nim-lang/Nim/issues/4534))\n- Fixed \"unittest broken?\"\n  ([#4555](https://github.com/nim-lang/Nim/issues/4555))\n- Fixed \"Operator \"or\" in converter types seems to crash the compiler.\"\n  ([#4537](https://github.com/nim-lang/Nim/issues/4537))\n- Fixed \"nimscript failed to compile/run -- Error: cannot 'importc' variable at compile time\"\n  ([#4561](https://github.com/nim-lang/Nim/issues/4561))\n- Fixed \"Regression: identifier expected, but found ...\"\n  ([#4564](https://github.com/nim-lang/Nim/issues/4564))\n- Fixed \"varargs with transformation that takes var argument creates invalid c code\"\n  ([#4545](https://github.com/nim-lang/Nim/issues/4545))\n- Fixed \"Type mismatch when using empty tuple as generic parameter\"\n  ([#4550](https://github.com/nim-lang/Nim/issues/4550))\n- Fixed \"strscans\"\n  ([#4562](https://github.com/nim-lang/Nim/issues/4562))\n- Fixed \"getTypeImpl crashes (SIGSEGV) on variant types\"\n  ([#4526](https://github.com/nim-lang/Nim/issues/4526))\n- Fixed \"Wrong result of sort in VM\"\n  ([#4065](https://github.com/nim-lang/Nim/issues/4065))\n- Fixed \"I can't call the random[T](x: Slice[T]): T\"\n  ([#4353](https://github.com/nim-lang/Nim/issues/4353))\n- Fixed \"invalid C code generated (function + block + empty tuple)\"\n  ([#4505](https://github.com/nim-lang/Nim/issues/4505))\n\n- Fixed \"performance issue: const Table make a copy at runtime lookup.\"\n  ([#4354](https://github.com/nim-lang/Nim/issues/4354))\n- Fixed \"Compiler issue: libraries without absolute paths cannot be found correctly\"\n  ([#4568](https://github.com/nim-lang/Nim/issues/4568))\n- Fixed \"Cannot use math.`^` with non-int types.\"\n  ([#4574](https://github.com/nim-lang/Nim/issues/4574))\n- Fixed \"C codegen fails when constructing an array using an object constructor.\"\n  ([#4582](https://github.com/nim-lang/Nim/issues/4582))\n- Fixed \"Visual Studio 10 unresolved external symbol _trunc(should we support VS2010?)\"\n  ([#4532](https://github.com/nim-lang/Nim/issues/4532))\n- Fixed \"Cannot pass generic subtypes to proc for generic supertype\"\n  ([#4528](https://github.com/nim-lang/Nim/issues/4528))\n- Fixed \"Lamda-lifting bug leading to crash.\"\n  ([#4551](https://github.com/nim-lang/Nim/issues/4551))\n- Fixed \"First-class iterators declared as inline are compiled at Nim side (no error message) and fail at C\"\n  ([#2094](https://github.com/nim-lang/Nim/issues/2094))\n- Fixed \"VS2010-warning C4090 : 'function' : different 'const' qualifiers\"\n  ([#4590](https://github.com/nim-lang/Nim/issues/4590))\n- Fixed \"Regression: type mismatch with generics\"\n  ([#4589](https://github.com/nim-lang/Nim/issues/4589))\n- Fixed \"„can raise an unlisted exception“ when assigning nil as default value\"\n  ([#4593](https://github.com/nim-lang/Nim/issues/4593))\n- Fixed \"upcoming asyncdispatch.closeSocket is not GC-safe\"\n  ([#4606](https://github.com/nim-lang/Nim/issues/4606))\n- Fixed \"Visual Studio 10.0 compiler errors, 12.0 warning\"\n  ([#4459](https://github.com/nim-lang/Nim/issues/4459))\n- Fixed \"Exception of net.newContext: result.extraInternalIndex == 0  [AssertionError]\"\n  ([#4406](https://github.com/nim-lang/Nim/issues/4406))\n- Fixed \"error: redeclaration of 'result_115076' with no linkage\"\n  ([#3221](https://github.com/nim-lang/Nim/issues/3221))\n- Fixed \"Compiler crashes on conversion from int to float at compile time\"\n  ([#4619](https://github.com/nim-lang/Nim/issues/4619))\n- Fixed \"wrong number of arguments regression in devel\"\n  ([#4600](https://github.com/nim-lang/Nim/issues/4600))\n- Fixed \"importc $ has broken error message (and is not documented)\"\n  ([#4579](https://github.com/nim-lang/Nim/issues/4579))\n- Fixed \"Compiler segfaults on simple importcpp in js mode [regression]\"\n  ([#4632](https://github.com/nim-lang/Nim/issues/4632))\n- Fixed \"Critical reference counting codegen problem\"\n  ([#4653](https://github.com/nim-lang/Nim/issues/4653))\n- Fixed \"tables.nim needs lots of {.noSideEffect.}\"\n  ([#4254](https://github.com/nim-lang/Nim/issues/4254))\n- Fixed \"Capture variable error when using ``=>`` macro\"\n  ([#4658](https://github.com/nim-lang/Nim/issues/4658))\n- Fixed \"Enum from char: internal error getInt\"\n  ([#3606](https://github.com/nim-lang/Nim/issues/3606))\n- Fixed \"Compiler crashes in debug mode (no error in release mode) with Natural discriminant in object variants\"\n  ([#2865](https://github.com/nim-lang/Nim/issues/2865))\n- Fixed \"SIGSEGV when access field in const object variants\"\n  ([#4253](https://github.com/nim-lang/Nim/issues/4253))\n- Fixed \"varargs cannot be used with template converter.\"\n  ([#4292](https://github.com/nim-lang/Nim/issues/4292))\n- Fixed \"Compiler crashes when borrowing $\"\n  ([#3928](https://github.com/nim-lang/Nim/issues/3928))\n- Fixed \"internal error: genMagicExpr: mArrPut\"\n  ([#4491](https://github.com/nim-lang/Nim/issues/4491))\n- Fixed \"Unhelpful error message on importc namespace collision\"\n  ([#4580](https://github.com/nim-lang/Nim/issues/4580))\n- Fixed \"Problem with openarrays and slices\"\n  ([#4179](https://github.com/nim-lang/Nim/issues/4179))\n- Fixed \"Removing lines from end of file then rebuilding does not rebuild [js only?]\"\n  ([#4656](https://github.com/nim-lang/Nim/issues/4656))\n- Fixed \"getCurrentException and getCurrentExceptionMsg do not work with JS\"\n  ([#4635](https://github.com/nim-lang/Nim/issues/4635))\n- Fixed \"generic proc parameter is not inferred if type parameter has specifier\"\n  ([#4672](https://github.com/nim-lang/Nim/issues/4672))\n- Fixed \"Cannot instantiate generic parameter when it is parent type parameter\"\n  ([#4673](https://github.com/nim-lang/Nim/issues/4673))\n- Fixed \"deepCopy doesn't work with inheritance after last commit\"\n  ([#4693](https://github.com/nim-lang/Nim/issues/4693))\n- Fixed \"Multi-methods don't work when passing ref to a different thread\"\n  ([#4689](https://github.com/nim-lang/Nim/issues/4689))\n- Fixed \"Infinite loop in effect analysis on generics\"\n  ([#4677](https://github.com/nim-lang/Nim/issues/4677))\n- Fixed \"SIGSEGV when compiling NimYAML tests\"\n  ([#4699](https://github.com/nim-lang/Nim/issues/4699))\n\n- Fixed \"Closing AsyncEvent now also unregisters it on non-Windows platforms\"\n  ([#4694](https://github.com/nim-lang/Nim/issues/4694))\n- Fixed \"Don't update handle in upcoming/asyncdispatch poll() if it was closed\"\n  ([#4697](https://github.com/nim-lang/Nim/issues/4697))\n- Fixed \"generated local variables declared outside block\"\n  ([#4721](https://github.com/nim-lang/Nim/issues/4721))\n- Fixed \"Footer Documentation links, & Community link point to the wrong place under news entries\"\n  ([#4529](https://github.com/nim-lang/Nim/issues/4529))\n- Fixed \"Jester's macro magic leads to incorrect C generation\"\n  ([#4088](https://github.com/nim-lang/Nim/issues/4088))\n- Fixed \"cas bug in atomics.nim\"\n  ([#3279](https://github.com/nim-lang/Nim/issues/3279))\n- Fixed \"nimgrep PEG not capturing the pattern 'A'\"\n  ([#4751](https://github.com/nim-lang/Nim/issues/4751))\n- Fixed \"GC assert triggers when assigning TableRef threadvar\"\n  ([#4640](https://github.com/nim-lang/Nim/issues/4640))\n- Fixed \".this pragma conflicts with experimental ptr dereferencing when names conflict\"\n  ([#4671](https://github.com/nim-lang/Nim/issues/4671))\n- Fixed \"Generic procs accepting var .importcpp type do not work [regression]\"\n  ([#4625](https://github.com/nim-lang/Nim/issues/4625))\n- Fixed \"C Error on tuple assignment with array\"\n  ([#4626](https://github.com/nim-lang/Nim/issues/4626))\n- Fixed \"module securehash not gcsafe\"\n  ([#4760](https://github.com/nim-lang/Nim/issues/4760))\n\n- Fixed \"Nimble installation failed on Windows x86.\"\n  ([#4764](https://github.com/nim-lang/Nim/issues/4764))\n- Fixed \"Recent changes to marshal module break old marshalled data\"\n  ([#4779](https://github.com/nim-lang/Nim/issues/4779))\n- Fixed \"tnewasyncudp.nim test loops forever\"\n  ([#4777](https://github.com/nim-lang/Nim/issues/4777))\n- Fixed \"Wrong poll timeout behavior in asyncdispatch\"\n  ([#4262](https://github.com/nim-lang/Nim/issues/4262))\n- Fixed \"Standalone await shouldn't read future\"\n  ([#4170](https://github.com/nim-lang/Nim/issues/4170))\n- Fixed \"Regression: httpclient fails to compile without -d:ssl\"\n  ([#4797](https://github.com/nim-lang/Nim/issues/4797))\n- Fixed \"C Error on declaring array of heritable objects with bitfields\"\n  ([#3567](https://github.com/nim-lang/Nim/issues/3567))\n- Fixed \"Corruption when using Channels and Threads\"\n  ([#4776](https://github.com/nim-lang/Nim/issues/4776))\n- Fixed \"Sometimes Channel tryRecv() erroneously reports no messages available on the first call on Windows\"\n  ([#4746](https://github.com/nim-lang/Nim/issues/4746))\n- Fixed \"Improve error message of functions called without parenthesis\"\n  ([#4813](https://github.com/nim-lang/Nim/issues/4813))\n- Fixed \"Docgen doesn't find doc comments in macro generated procs\"\n  ([#4803](https://github.com/nim-lang/Nim/issues/4803))\n- Fixed \"asynchttpserver may consume unbounded memory reading headers\"\n  ([#3847](https://github.com/nim-lang/Nim/issues/3847))\n- Fixed \"TLS connection to api.clashofclans.com hangs forever.\"\n  ([#4587](https://github.com/nim-lang/Nim/issues/4587))\n", "tags": ["nim", "python"], "published_at": "", "id": 32}, {"title": "Version 0.15.2 released", "slug": "version-released", "content": "We're happy to announce that the latest release of Nim, version 0.15.2, is nowavailable!As always, you can grab the latest version from the[downloads page]({{ site.baseurl }}/install.html).This release is a pure bugfix release fixing the most pressing issues andregressions of 0.15.0. For Windows we now provide zipfiles in addition to theNSIS based installer which proves to be hard to maintain and after all thesemonths still has serious issues. So we encourage you download the .zipfile instead of the .exe file! Unzip it somewhere, run ``finish.exe`` todetect your MingW installation, done. ``finish.exe`` can also set your PATHenvironment variable.Bugfixes--------The list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-09-30+..+2016-10-23%22+).- Fixed \"`NimMain` not exported in DLL, but `NimMainInner` is\"  ([#4840](https://github.com/nim-lang/Nim/issues/4840))- Fixed \"Tables clear seems to be broken\"  ([#4844](https://github.com/nim-lang/Nim/issues/4844))- Fixed \"compiler: internal error\"  ([#4845](https://github.com/nim-lang/Nim/issues/4845))- Fixed \"trivial macro breaks type checking in the compiler\"  ([#4608](https://github.com/nim-lang/Nim/issues/4608))- Fixed \"derived generic types with static[T] breaks type checking in v0.15.0 (worked in v0.14.2)\"  ([#4863](https://github.com/nim-lang/Nim/issues/4863))- Fixed \"xmlparser.parseXml is not recognised as GC-safe\"  ([#4899](https://github.com/nim-lang/Nim/issues/4899))- Fixed \"async makes generics instantiate only once\"  ([#4856](https://github.com/nim-lang/Nim/issues/4856))- Fixed \"db_common docs aren't generated\"  ([#4895](https://github.com/nim-lang/Nim/issues/4895))- Fixed \"rdstdin  disappeared from documentation index\"  ([#3755](https://github.com/nim-lang/Nim/issues/3755))- Fixed \"ICE on template call resolution\"  ([#4875](https://github.com/nim-lang/Nim/issues/4875))- Fixed \"Invisible code-block\"  ([#3078](https://github.com/nim-lang/Nim/issues/3078))- Fixed \"nim doc does not generate doc comments correctly\"  ([#4913](https://github.com/nim-lang/Nim/issues/4913))- Fixed \"nim doc2 fails on ARM when running against lib/pure/coro.nim\"  ([#4879](https://github.com/nim-lang/Nim/issues/4879))- Fixed \"xmlparser does not unescape correctly\"  ([#1518](https://github.com/nim-lang/Nim/issues/1518))- Fixed \"[docs] mysterious \"raise hook\"\"  ([#3485](https://github.com/nim-lang/Nim/issues/3485))- Fixed \"assertion failure in non-release Nim when compiling NimYAML\"  ([#4869](https://github.com/nim-lang/Nim/issues/4869))- Fixed \"A closure causes nimscript to fail with unhandled exception\"  ([#4906](https://github.com/nim-lang/Nim/issues/4906))- Fixed \"startProcess changes working directory\"  ([#4867](https://github.com/nim-lang/Nim/issues/4867))- Fixed \"bindsym to void template produces ICE\"  ([#4808](https://github.com/nim-lang/Nim/issues/4808))- Fixed \"readline(TFile, var string) segfaults if second argument is nil\"  ([#564](https://github.com/nim-lang/Nim/issues/564))- Fixed \"times.parse gives the wrong day of the week for the first hour of the day.\"  ([#4922](https://github.com/nim-lang/Nim/issues/4922))- Fixed \"Internal error when passing parameter proc inside .gcsafe closure\"  ([#4927](https://github.com/nim-lang/Nim/issues/4927))- Fixed \"Upcoming asyncdispatch doesn't compile with C++ backend on OS X\"  ([#4928](https://github.com/nim-lang/Nim/issues/4928))", "content_with_meta": "---\ntitle: \"Version 0.15.2 released\"\nauthor: Andreas Rumpf\ntags: nim, python\n---\n\nWe're happy to announce that the latest release of Nim, version 0.15.2, is now\navailable!\n\nAs always, you can grab the latest version from the\n[downloads page]({{ site.baseurl }}/install.html).\n\nThis release is a pure bugfix release fixing the most pressing issues and\nregressions of 0.15.0. For Windows we now provide zipfiles in addition to the\nNSIS based installer which proves to be hard to maintain and after all these\nmonths still has serious issues. So we encourage you download the .zip\nfile instead of the .exe file! Unzip it somewhere, run ``finish.exe`` to\ndetect your MingW installation, done. ``finish.exe`` can also set your PATH\nenvironment variable.\n\n\nBugfixes\n--------\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-09-30+..+2016-10-23%22+).\n\n\n- Fixed \"`NimMain` not exported in DLL, but `NimMainInner` is\"\n  ([#4840](https://github.com/nim-lang/Nim/issues/4840))\n- Fixed \"Tables clear seems to be broken\"\n  ([#4844](https://github.com/nim-lang/Nim/issues/4844))\n- Fixed \"compiler: internal error\"\n  ([#4845](https://github.com/nim-lang/Nim/issues/4845))\n- Fixed \"trivial macro breaks type checking in the compiler\"\n  ([#4608](https://github.com/nim-lang/Nim/issues/4608))\n- Fixed \"derived generic types with static[T] breaks type checking in v0.15.0 (worked in v0.14.2)\"\n  ([#4863](https://github.com/nim-lang/Nim/issues/4863))\n- Fixed \"xmlparser.parseXml is not recognised as GC-safe\"\n  ([#4899](https://github.com/nim-lang/Nim/issues/4899))\n- Fixed \"async makes generics instantiate only once\"\n  ([#4856](https://github.com/nim-lang/Nim/issues/4856))\n- Fixed \"db_common docs aren't generated\"\n  ([#4895](https://github.com/nim-lang/Nim/issues/4895))\n- Fixed \"rdstdin  disappeared from documentation index\"\n  ([#3755](https://github.com/nim-lang/Nim/issues/3755))\n- Fixed \"ICE on template call resolution\"\n  ([#4875](https://github.com/nim-lang/Nim/issues/4875))\n- Fixed \"Invisible code-block\"\n  ([#3078](https://github.com/nim-lang/Nim/issues/3078))\n- Fixed \"nim doc does not generate doc comments correctly\"\n  ([#4913](https://github.com/nim-lang/Nim/issues/4913))\n- Fixed \"nim doc2 fails on ARM when running against lib/pure/coro.nim\"\n  ([#4879](https://github.com/nim-lang/Nim/issues/4879))\n- Fixed \"xmlparser does not unescape correctly\"\n  ([#1518](https://github.com/nim-lang/Nim/issues/1518))\n- Fixed \"[docs] mysterious \"raise hook\"\"\n  ([#3485](https://github.com/nim-lang/Nim/issues/3485))\n- Fixed \"assertion failure in non-release Nim when compiling NimYAML\"\n  ([#4869](https://github.com/nim-lang/Nim/issues/4869))\n- Fixed \"A closure causes nimscript to fail with unhandled exception\"\n  ([#4906](https://github.com/nim-lang/Nim/issues/4906))\n- Fixed \"startProcess changes working directory\"\n  ([#4867](https://github.com/nim-lang/Nim/issues/4867))\n- Fixed \"bindsym to void template produces ICE\"\n  ([#4808](https://github.com/nim-lang/Nim/issues/4808))\n- Fixed \"readline(TFile, var string) segfaults if second argument is nil\"\n  ([#564](https://github.com/nim-lang/Nim/issues/564))\n- Fixed \"times.parse gives the wrong day of the week for the first hour of the day.\"\n  ([#4922](https://github.com/nim-lang/Nim/issues/4922))\n- Fixed \"Internal error when passing parameter proc inside .gcsafe closure\"\n  ([#4927](https://github.com/nim-lang/Nim/issues/4927))\n- Fixed \"Upcoming asyncdispatch doesn't compile with C++ backend on OS X\"\n  ([#4928](https://github.com/nim-lang/Nim/issues/4928))\n", "tags": ["nim", "python"], "published_at": "", "id": 33}, {"title": "Nim in Action is going into production!", "slug": "nim-in-action-in-production", "content": "<div class=\"center\">  <a href=\"https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81\">    <img src=\"{{ site.baseurl }}/assets/niminaction/banner2.png\" alt=\"A printed copy of Nim in Action should be available in March 2017!\" width=\"500\"/>  </a></div>I am very happy to say that just last week I have put the finishing toucheson Nim in Action. The final manuscript has been submitted to Manning (the book'spublisher), and the printed version is expected to start shipping in March2017 (give or take 1 month).The eBook is still available and now contains all of the book's chapters,including new ones dealing with the foreign function interface andmetaprogramming.That said, it may still take some time before the eBook is updated with thelatest corrections.I am incredibly thankful to everyone that purchased the book already. Many ofyou have also given me a lot of [brilliant](http://forum.nim-lang.org/t/1978)[feedback](https://forums.manning.com/forums/nim-in-action),thank you very much fortaking the time to do so. I have done my best to act on thisfeedback and I hope you will agree that the book has risen in quality as aresult.Writing this book has been both exhausting and incredible at the same time.I look forwardto having a physical copy of it in my hands, and I'm sure many of you do aswell. I can safely say that without your support this book would not havehappened, even if you did not purchase a copy your interest in Nim has made itpossible and I thank you for that.As always, you can make a purchase on[Manning's website](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81).Both eBook's and printed books are available, and purchasing a printed book willget you an eBook for free.You can now also pre-order Nim in Action on[Amazon](https://www.amazon.co.uk/Nim-Action-Dominik-Picheta/dp/1617293431/ref=sr_1_1?ie=UTF8&qid=1479663850&sr=8-1&keywords=nim+in+action)!If you would like updates about the book then please feel free tofollow either [myself](https://twitter.com/d0m96) or[@nim_lang](https://twitter.com/nim_lang) on Twitter. Finally, if you have anyquestions, do get in touch via [Twitter, NimForum,IRC or Gitter](http://nim-lang.org/community.html).Thanks for reading!", "content_with_meta": "---\ntitle: \"Nim in Action is going into production!\"\nexcerpt: \"I am very happy to say that just last week I have put the finishing touches\non Nim in Action. The final manuscript has been submitted to Manning (the book's\npublisher), and the printed version is expected to start shipping in March\n2017 (give or take 1 month).\"\nauthor: Dominik Picheta\ntags: nim, python\n\n---\n\n<div class=\"center\">\n  <a href=\"https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81\">\n    <img src=\"{{ site.baseurl }}/assets/niminaction/banner2.png\" alt=\"A printed copy of Nim in Action should be available in March 2017!\" width=\"500\"/>\n  </a>\n</div>\n\nI am very happy to say that just last week I have put the finishing touches\non Nim in Action. The final manuscript has been submitted to Manning (the book's\npublisher), and the printed version is expected to start shipping in March\n2017 (give or take 1 month).\n\nThe eBook is still available and now contains all of the book's chapters,\nincluding new ones dealing with the foreign function interface and\nmetaprogramming.\nThat said, it may still take some time before the eBook is updated with the\nlatest corrections.\n\nI am incredibly thankful to everyone that purchased the book already. Many of\nyou have also given me a lot of [brilliant](http://forum.nim-lang.org/t/1978)\n[feedback](https://forums.manning.com/forums/nim-in-action),\nthank you very much for\ntaking the time to do so. I have done my best to act on this\nfeedback and I hope you will agree that the book has risen in quality as a\nresult.\n\nWriting this book has been both exhausting and incredible at the same time.\nI look forward\nto having a physical copy of it in my hands, and I'm sure many of you do as\nwell. I can safely say that without your support this book would not have\nhappened, even if you did not purchase a copy your interest in Nim has made it\npossible and I thank you for that.\n\nAs always, you can make a purchase on\n[Manning's website](https://manning.com/books/nim-in-action?a_aid=niminaction&a_bid=78a27e81).\nBoth eBook's and printed books are available, and purchasing a printed book will\nget you an eBook for free.\nYou can now also pre-order Nim in Action on\n[Amazon](https://www.amazon.co.uk/Nim-Action-Dominik-Picheta/dp/1617293431/ref=sr_1_1?ie=UTF8&qid=1479663850&sr=8-1&keywords=nim+in+action)!\n\nIf you would like updates about the book then please feel free to\nfollow either [myself](https://twitter.com/d0m96) or\n[@nim_lang](https://twitter.com/nim_lang) on Twitter. Finally, if you have any\nquestions, do get in touch via [Twitter, NimForum,\nIRC or Gitter](http://nim-lang.org/community.html).\n\nThanks for reading!\n", "tags": [""], "published_at": "", "id": 34}, {"title": "Version 0.16.0 released", "slug": "version-released", "content": "We're happy to announce that the latest release of Nim, version 0.16.0, is nowavailable!As always, you can grab the latest version from the[downloads page]({{site.baseurl}}/install.html).This release includes over 80 bug fixes and improvements. To see a full listof changes, take a look at the detailed changelog[below](#changelog).Some of the most significant changes in this release include: a major newNimble release, an improved import syntax, and the stabilisation ofname mangling rules enabling faster compile times.The new Nimble release that is included with Nim 0.16.0 includes a variety ofnew features and bug fixes. The most prominent of which is the improved outputsystem, as shown in the figure below.<a href=\"{{ site.baseurl }}/assets/news/images/0.16.0/nimble.png\">  <img src=\"{{ site.baseurl }}/assets/news/images/0.16.0/nimble.png\" alt=\"Nimble 0.8.0\" style=\"width:100%\"/></a>For a full list of changes in Nimble, see its[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#080---05012017).The new import syntax makes it easier to import multiple modules from the samepackage or directory. For example:```nimimport compiler/ast, compiler/parser, compiler/lexerimport compiler / [ast, parser, lexer]```The two are equivalent, but the new latter syntax is less redundant.Finally, the code responsible for name mangling in the generated C and C++ codehas been improved to reduce compile times. In particular, compile-time forthe common edit-compile-run cycles have been reduced.# Changelog## Changes affecting backwards compatibility- ``staticExec`` now uses the directory of the nim file that contains the  ``staticExec`` call as the current working directory.- ``TimeInfo.tzname`` has been removed from ``times`` module because it was  broken. Because of this, the option ``\"ZZZ\"`` will no longer work in format  strings for formatting and parsing.## Library Additions- Added new parameter to ``error`` proc of ``macro`` module to provide better  error message- Added new ``deques`` module intended to replace ``queues``.  ``deques`` provides a superset of ``queues`` API with clear naming.  ``queues`` module is now deprecated and will be removed in the future.- Added ``hideCursor``, ``showCursor``, ``terminalWidth``,  ``terminalWidthIoctl`` and ``terminalSize`` to the ``terminal``  [(doc)](http://nim-lang.org/docs/terminal.html) module.- Added new module ``distros``  [(doc)](http://nim-lang.org/docs/distros.html)  that can be used in Nimble  packages to aid in supporting the OS's native package managers.## Tool Additions## Compiler Additions- The C/C++ code generator has been rewritten to use stable  name mangling rules. This means that compile times for  edit-compile-run cycles are much reduced.## Language Additions- The ``emit`` pragma now takes a list of Nim expressions instead  of a single string literal. This list can easily contain non-strings  like template parameters. This means ``emit`` works out of the  box with templates and no new quoting rules needed to be introduced.  The old way with backtick quoting is still supported but will be  deprecated.  ```nim  type Vector* {.importcpp: \"std::vector\", header: \"<vector>\".}[T] = object  template `[]=`*[T](v: var Vector[T], key: int, val: T) =    {.emit: [v, \"[\", key, \"] = \", val, \";\"].}  proc setLen*[T](v: var Vector[T]; size: int) {.importcpp: \"resize\", nodecl.}  proc `[]`*[T](v: var Vector[T], key: int): T {.importcpp: \"(#[#])\", nodecl.}  proc main =    var v: Vector[float]    v.setLen 1    v[0] = 6.0    echo v[0]  ```- The ``import`` statement now supports importing multiple modules from  the same directory:  ```nim  import compiler / [ast, parser, lexer]  ```  Is a shortcut for:  ```nim  import compiler / ast, compiler / parser, compiler / lexer  ```## BugfixesThe list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-10-23+..+2017-01-07%22+).- Fixed \"staticRead and staticExec have different working directories\"  ([#4871](https://github.com/nim-lang/Nim/issues/4871))- Fixed \"CountTable doesn't support the '==' operator\"  ([#4901](https://github.com/nim-lang/Nim/issues/4901))- Fixed \"documentation for module sequtls apply proc\"  ([#4386](https://github.com/nim-lang/Nim/issues/4386))- Fixed \"Operator `==` for CountTable does not work.\"  ([#4946](https://github.com/nim-lang/Nim/issues/4946))- Fixed \"sysFatal (IndexError) with parseUri and the / operator\"  ([#4959](https://github.com/nim-lang/Nim/issues/4959))- Fixed \"initialSize parameter does not work in OrderedTableRef\"  ([#4940](https://github.com/nim-lang/Nim/issues/4940))- Fixed \"error proc from macro library could have a node parameter\"  ([#4915](https://github.com/nim-lang/Nim/issues/4915))- Fixed \"Segfault when comparing OrderedTableRef with nil\"  ([#4974](https://github.com/nim-lang/Nim/issues/4974))- Fixed \"Bad codegen when comparing isNil results\"  ([#4975](https://github.com/nim-lang/Nim/issues/4975))- Fixed \"OrderedTable cannot delete entry with empty string or 0 key\"  ([#5035](https://github.com/nim-lang/Nim/issues/5035))- Fixed \"Deleting specific keys from ordered table leaves it in invalid state.\"  ([#5057](https://github.com/nim-lang/Nim/issues/5057))- Fixed \"Paths are converted to lowercase on Windows\"  ([#5076](https://github.com/nim-lang/Nim/issues/5076))- Fixed \"toTime(getGMTime(...)) doesn't work correctly when local timezone is not UTC\"  ([#5065](https://github.com/nim-lang/Nim/issues/5065))- Fixed \"out of memory error from `test=` type proc call when parameter is a call to a table's `[]` proc\"  ([#5079](https://github.com/nim-lang/Nim/issues/5079))- Fixed \"Incorrect field order in object construction\"  ([#5055](https://github.com/nim-lang/Nim/issues/5055))- Fixed \"Incorrect codegen when importing nre with C++ backend (commit 8494338)\"  ([#5081](https://github.com/nim-lang/Nim/issues/5081))- Fixed \"Templates, {.emit.}, and backtick interpolation do not work together\"  ([#4730](https://github.com/nim-lang/Nim/issues/4730))- Fixed \"Regression: getType fails in certain cases\"  ([#5129](https://github.com/nim-lang/Nim/issues/5129))- Fixed \"CreateThread doesn't accept functions with generics\"  ([#43](https://github.com/nim-lang/Nim/issues/43))- Fixed \"No instantiation information when template has error\"  ([#4308](https://github.com/nim-lang/Nim/issues/4308))- Fixed \"realloc leaks\"  ([#4818](https://github.com/nim-lang/Nim/issues/4818))- Fixed \"Regression: getType\"  ([#5131](https://github.com/nim-lang/Nim/issues/5131))- Fixed \"Code generation for generics broken by sighashes\"  ([#5135](https://github.com/nim-lang/Nim/issues/5135))- Fixed \"Regression: importc functions are not declared in generated C code\"  ([#5136](https://github.com/nim-lang/Nim/issues/5136))- Fixed \"Calling split(\"\") on string hangs program\"  ([#5119](https://github.com/nim-lang/Nim/issues/5119))- Fixed \"Building dynamic library: undefined references (Linux)\"  ([#4775](https://github.com/nim-lang/Nim/issues/4775))- Fixed \"Bad codegen for distinct + importc - sighashes regression\"  ([#5137](https://github.com/nim-lang/Nim/issues/5137))- Fixed \"C++ codegen regression: memset called on a result variable of `importcpp` type\"  ([#5140](https://github.com/nim-lang/Nim/issues/5140))- Fixed \"C++ codegen regression: using channels leads to broken C++ code\"  ([#5142](https://github.com/nim-lang/Nim/issues/5142))- Fixed \"Ambiguous call when overloading var and non-var with generic type\"  ([#4519](https://github.com/nim-lang/Nim/issues/4519))- Fixed \"[Debian]: build.sh error: unknown processor: aarch64\"  ([#2147](https://github.com/nim-lang/Nim/issues/2147))- Fixed \"RFC: asyncdispatch.poll behaviour\"  ([#5155](https://github.com/nim-lang/Nim/issues/5155))- Fixed \"Can't access enum members through alias (possible sighashes regression)\"  ([#5148](https://github.com/nim-lang/Nim/issues/5148))- Fixed \"Type, declared in generic proc body, leads to incorrect codegen (sighashes regression)\"  ([#5147](https://github.com/nim-lang/Nim/issues/5147))- Fixed \"Compiler SIGSEGV when mixing method and proc\"  ([#5161](https://github.com/nim-lang/Nim/issues/5161))- Fixed \"Compile-time SIGSEGV when declaring .importcpp method with return value \"  ([#3848](https://github.com/nim-lang/Nim/issues/3848))- Fixed \"Variable declaration incorrectly parsed\"  ([#2050](https://github.com/nim-lang/Nim/issues/2050))- Fixed \"Invalid C code when naming a object member \"linux\"\"  ([#5171](https://github.com/nim-lang/Nim/issues/5171))- Fixed \"[Windows] MinGW within Nim install is missing libraries\"  ([#2723](https://github.com/nim-lang/Nim/issues/2723))- Fixed \"async: annoying warning for future.finished\"  ([#4948](https://github.com/nim-lang/Nim/issues/4948))- Fixed \"new import syntax doesn't work?\"  ([#5185](https://github.com/nim-lang/Nim/issues/5185))- Fixed \"Fixes #1994\"  ([#4874](https://github.com/nim-lang/Nim/issues/4874))- Fixed \"Can't tell return value of programs with staticExec\"  ([#1994](https://github.com/nim-lang/Nim/issues/1994))- Fixed \"startProcess() on Windows with poInteractive: Second call fails (\"Alle Pipeinstanzen sind ausgelastet\")\"  ([#5179](https://github.com/nim-lang/Nim/issues/5179))", "content_with_meta": "---\ntitle: \"Version 0.16.0 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nWe're happy to announce that the latest release of Nim, version 0.16.0, is now\navailable!\n\nAs always, you can grab the latest version from the\n[downloads page]({{site.baseurl}}/install.html).\n\nThis release includes over 80 bug fixes and improvements. To see a full list\nof changes, take a look at the detailed changelog\n[below](#changelog).\n\nSome of the most significant changes in this release include: a major new\nNimble release, an improved import syntax, and the stabilisation of\nname mangling rules enabling faster compile times.\n\nThe new Nimble release that is included with Nim 0.16.0 includes a variety of\nnew features and bug fixes. The most prominent of which is the improved output\nsystem, as shown in the figure below.\n\n<a href=\"{{ site.baseurl }}/assets/news/images/0.16.0/nimble.png\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/0.16.0/nimble.png\" alt=\"Nimble 0.8.0\" style=\"width:100%\"/>\n</a>\n\nFor a full list of changes in Nimble, see its\n[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#080---05012017).\n\nThe new import syntax makes it easier to import multiple modules from the same\npackage or directory. For example:\n\n```nim\nimport compiler/ast, compiler/parser, compiler/lexer\nimport compiler / [ast, parser, lexer]\n```\n\nThe two are equivalent, but the new latter syntax is less redundant.\n\nFinally, the code responsible for name mangling in the generated C and C++ code\nhas been improved to reduce compile times. In particular, compile-time for\nthe common edit-compile-run cycles have been reduced.\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n\n- ``staticExec`` now uses the directory of the nim file that contains the\n  ``staticExec`` call as the current working directory.\n- ``TimeInfo.tzname`` has been removed from ``times`` module because it was\n  broken. Because of this, the option ``\"ZZZ\"`` will no longer work in format\n  strings for formatting and parsing.\n\n## Library Additions\n\n- Added new parameter to ``error`` proc of ``macro`` module to provide better\n  error message\n- Added new ``deques`` module intended to replace ``queues``.\n  ``deques`` provides a superset of ``queues`` API with clear naming.\n  ``queues`` module is now deprecated and will be removed in the future.\n\n- Added ``hideCursor``, ``showCursor``, ``terminalWidth``,\n  ``terminalWidthIoctl`` and ``terminalSize`` to the ``terminal``\n  [(doc)](http://nim-lang.org/docs/terminal.html) module.\n\n- Added new module ``distros``\n  [(doc)](http://nim-lang.org/docs/distros.html)  that can be used in Nimble\n  packages to aid in supporting the OS's native package managers.\n\n\n## Tool Additions\n\n\n## Compiler Additions\n\n\n- The C/C++ code generator has been rewritten to use stable\n  name mangling rules. This means that compile times for\n  edit-compile-run cycles are much reduced.\n\n\n## Language Additions\n\n\n- The ``emit`` pragma now takes a list of Nim expressions instead\n  of a single string literal. This list can easily contain non-strings\n  like template parameters. This means ``emit`` works out of the\n  box with templates and no new quoting rules needed to be introduced.\n  The old way with backtick quoting is still supported but will be\n  deprecated.\n\n  ```nim\n  type Vector* {.importcpp: \"std::vector\", header: \"<vector>\".}[T] = object\n\n  template `[]=`*[T](v: var Vector[T], key: int, val: T) =\n    {.emit: [v, \"[\", key, \"] = \", val, \";\"].}\n\n  proc setLen*[T](v: var Vector[T]; size: int) {.importcpp: \"resize\", nodecl.}\n  proc `[]`*[T](v: var Vector[T], key: int): T {.importcpp: \"(#[#])\", nodecl.}\n\n  proc main =\n    var v: Vector[float]\n    v.setLen 1\n    v[0] = 6.0\n    echo v[0]\n  ```\n\n- The ``import`` statement now supports importing multiple modules from\n  the same directory:\n\n  ```nim\n  import compiler / [ast, parser, lexer]\n  ```\n\n  Is a shortcut for:\n\n  ```nim\n  import compiler / ast, compiler / parser, compiler / lexer\n  ```\n\n## Bugfixes\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222016-10-23+..+2017-01-07%22+).\n\n- Fixed \"staticRead and staticExec have different working directories\"\n  ([#4871](https://github.com/nim-lang/Nim/issues/4871))\n- Fixed \"CountTable doesn't support the '==' operator\"\n  ([#4901](https://github.com/nim-lang/Nim/issues/4901))\n- Fixed \"documentation for module sequtls apply proc\"\n  ([#4386](https://github.com/nim-lang/Nim/issues/4386))\n- Fixed \"Operator `==` for CountTable does not work.\"\n  ([#4946](https://github.com/nim-lang/Nim/issues/4946))\n- Fixed \"sysFatal (IndexError) with parseUri and the / operator\"\n  ([#4959](https://github.com/nim-lang/Nim/issues/4959))\n- Fixed \"initialSize parameter does not work in OrderedTableRef\"\n  ([#4940](https://github.com/nim-lang/Nim/issues/4940))\n- Fixed \"error proc from macro library could have a node parameter\"\n  ([#4915](https://github.com/nim-lang/Nim/issues/4915))\n- Fixed \"Segfault when comparing OrderedTableRef with nil\"\n  ([#4974](https://github.com/nim-lang/Nim/issues/4974))\n- Fixed \"Bad codegen when comparing isNil results\"\n  ([#4975](https://github.com/nim-lang/Nim/issues/4975))\n- Fixed \"OrderedTable cannot delete entry with empty string or 0 key\"\n  ([#5035](https://github.com/nim-lang/Nim/issues/5035))\n- Fixed \"Deleting specific keys from ordered table leaves it in invalid state.\"\n  ([#5057](https://github.com/nim-lang/Nim/issues/5057))\n- Fixed \"Paths are converted to lowercase on Windows\"\n  ([#5076](https://github.com/nim-lang/Nim/issues/5076))\n- Fixed \"toTime(getGMTime(...)) doesn't work correctly when local timezone is not UTC\"\n  ([#5065](https://github.com/nim-lang/Nim/issues/5065))\n- Fixed \"out of memory error from `test=` type proc call when parameter is a call to a table's `[]` proc\"\n  ([#5079](https://github.com/nim-lang/Nim/issues/5079))\n- Fixed \"Incorrect field order in object construction\"\n  ([#5055](https://github.com/nim-lang/Nim/issues/5055))\n- Fixed \"Incorrect codegen when importing nre with C++ backend (commit 8494338)\"\n  ([#5081](https://github.com/nim-lang/Nim/issues/5081))\n- Fixed \"Templates, {.emit.}, and backtick interpolation do not work together\"\n  ([#4730](https://github.com/nim-lang/Nim/issues/4730))\n- Fixed \"Regression: getType fails in certain cases\"\n  ([#5129](https://github.com/nim-lang/Nim/issues/5129))\n- Fixed \"CreateThread doesn't accept functions with generics\"\n  ([#43](https://github.com/nim-lang/Nim/issues/43))\n- Fixed \"No instantiation information when template has error\"\n  ([#4308](https://github.com/nim-lang/Nim/issues/4308))\n- Fixed \"realloc leaks\"\n  ([#4818](https://github.com/nim-lang/Nim/issues/4818))\n- Fixed \"Regression: getType\"\n  ([#5131](https://github.com/nim-lang/Nim/issues/5131))\n- Fixed \"Code generation for generics broken by sighashes\"\n  ([#5135](https://github.com/nim-lang/Nim/issues/5135))\n- Fixed \"Regression: importc functions are not declared in generated C code\"\n  ([#5136](https://github.com/nim-lang/Nim/issues/5136))\n- Fixed \"Calling split(\"\") on string hangs program\"\n  ([#5119](https://github.com/nim-lang/Nim/issues/5119))\n- Fixed \"Building dynamic library: undefined references (Linux)\"\n  ([#4775](https://github.com/nim-lang/Nim/issues/4775))\n- Fixed \"Bad codegen for distinct + importc - sighashes regression\"\n  ([#5137](https://github.com/nim-lang/Nim/issues/5137))\n- Fixed \"C++ codegen regression: memset called on a result variable of `importcpp` type\"\n  ([#5140](https://github.com/nim-lang/Nim/issues/5140))\n- Fixed \"C++ codegen regression: using channels leads to broken C++ code\"\n  ([#5142](https://github.com/nim-lang/Nim/issues/5142))\n- Fixed \"Ambiguous call when overloading var and non-var with generic type\"\n  ([#4519](https://github.com/nim-lang/Nim/issues/4519))\n- Fixed \"[Debian]: build.sh error: unknown processor: aarch64\"\n  ([#2147](https://github.com/nim-lang/Nim/issues/2147))\n- Fixed \"RFC: asyncdispatch.poll behaviour\"\n  ([#5155](https://github.com/nim-lang/Nim/issues/5155))\n- Fixed \"Can't access enum members through alias (possible sighashes regression)\"\n  ([#5148](https://github.com/nim-lang/Nim/issues/5148))\n- Fixed \"Type, declared in generic proc body, leads to incorrect codegen (sighashes regression)\"\n  ([#5147](https://github.com/nim-lang/Nim/issues/5147))\n- Fixed \"Compiler SIGSEGV when mixing method and proc\"\n  ([#5161](https://github.com/nim-lang/Nim/issues/5161))\n- Fixed \"Compile-time SIGSEGV when declaring .importcpp method with return value \"\n  ([#3848](https://github.com/nim-lang/Nim/issues/3848))\n- Fixed \"Variable declaration incorrectly parsed\"\n  ([#2050](https://github.com/nim-lang/Nim/issues/2050))\n- Fixed \"Invalid C code when naming a object member \"linux\"\"\n  ([#5171](https://github.com/nim-lang/Nim/issues/5171))\n- Fixed \"[Windows] MinGW within Nim install is missing libraries\"\n  ([#2723](https://github.com/nim-lang/Nim/issues/2723))\n- Fixed \"async: annoying warning for future.finished\"\n  ([#4948](https://github.com/nim-lang/Nim/issues/4948))\n- Fixed \"new import syntax doesn't work?\"\n  ([#5185](https://github.com/nim-lang/Nim/issues/5185))\n- Fixed \"Fixes #1994\"\n  ([#4874](https://github.com/nim-lang/Nim/issues/4874))\n- Fixed \"Can't tell return value of programs with staticExec\"\n  ([#1994](https://github.com/nim-lang/Nim/issues/1994))\n- Fixed \"startProcess() on Windows with poInteractive: Second call fails (\"Alle Pipeinstanzen sind ausgelastet\")\"\n  ([#5179](https://github.com/nim-lang/Nim/issues/5179))\n", "tags": ["nim", "python"], "published_at": "", "id": 35}, {"title": "Version 0.17.0 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.17.0, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.This release fixes the most important regressions introduced in version 0.16.0.In particular memory manager and channel bugs have been fixed. There was alsomany significant improvements to the language, in particular a lot of work wasput into concepts. Zahary has been leading this effort and we thank him forhis hard work. Be sure to check out the changelog [below](#changelog) fora comprehensive list of changes.The NSIS basedinstaller is not provided anymore as the Nim website moved to ``https`` andthis caused NSIS downloads to fail. The latest version of Nim for Windows canstill be downloaded as a zip archive from the[downloads page]({{site.baseurl}}/install.html).We would also like to invite you to test a brand new tool that aims to makethe installation and management of multiple Nim versions much easier. This toolis called ``choosenim`` and allows you to install the latest version of Nimwith a single command.Check out the[installation instructions](https://github.com/dom96/choosenim#installation)on GitHub to give it a go, but keep in mind that this tool is stillexperimental.This release also includes version 0.8.6 of the Nimble package manager,be sure to check out its[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)for a list of changes since its last release.# Changelog## Changes affecting backwards compatibility- There are now two different HTTP response types, ``Response`` and  ``AsyncResponse``. ``AsyncResponse``'s ``body`` accessor returns a  ``Future[string]``!  Due to this change you may need to add another ``await`` in your code.- ``httpclient.request`` now respects the ``maxRedirects`` option. Previously  redirects were handled only by ``get`` and ``post`` procs.- The IO routines now raise ``EOFError`` for the \"end of file\" condition.  ``EOFError`` is a subtype of ``IOError`` and so it's easier to distinguish  between \"error during read\" and \"error due to EOF\".- A hash procedure has been added for ``cstring`` type in ``hashes`` module.  Previously, hash of a ``cstring`` would be calculated as a hash of the  pointer. Now the hash is calculated from the contents of the string, assuming  ``cstring`` is a null-terminated string. Equal ``string`` and ``cstring``  values produce an equal hash value.- Macros accepting `varargs` arguments will now receive a node having the  `nkArgList` node kind. Previous code expecting the node kind to be `nkBracket`  may have to be updated.- ``memfiles.open`` now closes file handles/fds by default.  Passing  ``allowRemap=true`` to ``memfiles.open`` recovers the old behavior.  The old  behavior is only needed to call ``mapMem`` on the resulting ``MemFile``.- ``posix.nim``: For better C++ interop the field  ``sa_sigaction*: proc (x: cint, y: var SigInfo, z: pointer) {.noconv.}`` was  changed  to ``sa_sigaction*: proc (x: cint, y: ptr SigInfo, z: pointer) {.noconv.}``.- The compiler doesn't infer effects for ``.base`` methods anymore. This means  you need to annotate them with ``.gcsafe`` or similar to clearly declare  upfront every implementation needs to fulfill these contracts.- ``system.getAst templateCall(x, y)`` now typechecks the ``templateCall``  properly. You need to patch your code accordingly.- ``macros.getType`` and ``macros.getTypeImpl`` for an enum will now return an  AST that is the same as what is used to define an enum.  Previously the AST  returned had a repeated ``EnumTy`` node and was missing the initial pragma  node (which is currently empty for an enum).- ``macros.getTypeImpl`` now correctly returns the implementation for a symbol  of type ``tyGenericBody``.- If the dispatcher parameter's value used in multi method is ``nil``,  a ``NilError`` exception is raised. The old behavior was that the method  would be a ``nop`` then.- ``posix.nim``: the family of ``ntohs`` procs now takes unsigned integers  instead of signed integers.- In Nim identifiers en-dash (Unicode point U+2013) is not an alias for the  underscore anymore. Use underscores instead.- When the ``requiresInit`` pragma is applied to a record type, future versions  of Nim will also require you to initialize all the fields of the type during  object construction. For now, only a warning will be produced.- The Object construction syntax now performs a number of additional safety  checks. When fields within case objects are initialized, the compiler will  now demand that the respective discriminator field has a matching known  compile-time value.- On posix, the results of `waitForExit`, `peekExitCode`, `execCmd` will return  128 + signal number if the application terminates via signal.- ``ospaths.getConfigDir`` now conforms to the XDG Base Directory specification  on non-Windows OSs. It returns the value of the ``XDG_CONFIG_DIR`` environment  variable if it is set, and returns the default configuration directory,  \"~/.config/\", otherwise.- Renamed the line info node parameter for ``newNimNode`` procedure.- The parsing rules of ``do`` changed.    ```nim    foo bar do:      baz    ```  Used to be parsed as:    ```nim    foo(bar(do:      baz))    ```  Now it is parsed as:    ```nim    foo(bar, do:      baz)    ```Library Additions------------------ Added ``system.onThreadDestruction``.- Added ``dial`` procedure to networking modules: ``net``, ``asyncdispatch``,  ``asyncnet``. It merges socket creation, address resolution, and connection  into single step. When using ``dial``, you don't have to worry about the  IPv4 vs IPv6 problem. ``httpclient`` now supports IPv6.- Added `to` macro which allows JSON to be unmarshalled into a type.    ```nim    import json    type      Person = object        name: string        age: int    let data = \"\"\"      {        \"name\": \"Amy\",        \"age\": 4      }    \"\"\"    let node = parseJson(data)    let obj = node.to(Person)    echo(obj)    ```Tool Additions--------------- The ``finish`` tool can now download MingW for you should it not find a  working MingW installation.Compiler Additions------------------- The name mangling rules used by the C code generator changed. Most of the time  local variables and parameters are not mangled at all anymore. This improves  the debugging experience.- The compiler produces explicit name mangling files when ``--debugger:native``  is enabled. Debuggers can read these ``.ndi`` files in order to improve  debugging Nim code.Language Additions------------------- The ``try`` statement's ``except`` branches now support the binding of acaught exception to a variable:    ```nim      try:        raise newException(Exception, \"Hello World\")      except Exception as exc:        echo(exc.msg)    ```    This replaces the ``getCurrentException`` and ``getCurrentExceptionMsg()``    procedures, although these procedures will remain in the stdlib for the    foreseeable future. This new language feature is actually implemented using    these procedures.    In the near future we will be converting all exception types to refs to    remove the need for the ``newException`` template.- A new pragma ``.used`` can be used for symbols to preventthe \"declared but not used\" warning. More details can befound [here](http://nim-lang.org/docs/manual.html#pragmas-used-pragma).- The popular \"colon block of statements\" syntax is now also supported for  ``let`` and ``var`` statements and assignments:    ```nim    template ve(value, effect): untyped =      effect      value    let x = ve(4):      echo \"welcome to Nim!\"    ```    This is particularly useful for DSLs that help in tree construction.## Language changes- The ``.procvar`` annotation is not required anymore. That doesn't mean you  can pass ``system.$`` to ``map`` just yet though.## BugfixesThe list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222017-01-07+..+2017-05-16%22+).- Fixed \"Weird compilation bug\"  ([#4884](https://github.com/nim-lang/Nim/issues/4884))- Fixed \"Return by arg optimization does not set result to default value\"  ([#5098](https://github.com/nim-lang/Nim/issues/5098))- Fixed \"upcoming asyncdispatch doesn't remove recv callback if remote side closed socket\"  ([#5128](https://github.com/nim-lang/Nim/issues/5128))- Fixed \"compiler bug, executable writes into wrong memory\"  ([#5218](https://github.com/nim-lang/Nim/issues/5218))- Fixed \"Module aliasing fails when multiple modules have the same original name\"  ([#5112](https://github.com/nim-lang/Nim/issues/5112))- Fixed \"JS: var argument + case expr with arg = bad codegen\"  ([#5244](https://github.com/nim-lang/Nim/issues/5244))- Fixed \"compiler reject proc's param shadowing inside template\"  ([#5225](https://github.com/nim-lang/Nim/issues/5225))- Fixed \"const value not accessible in proc\"  ([#3434](https://github.com/nim-lang/Nim/issues/3434))- Fixed \"Compilation regression 0.13.0 vs 0.16.0 in compile-time evaluation\"  ([#5237](https://github.com/nim-lang/Nim/issues/5237))- Fixed \"Regression: JS: wrong field-access codegen\"  ([#5234](https://github.com/nim-lang/Nim/issues/5234))- Fixed \"fixes #5234\"  ([#5240](https://github.com/nim-lang/Nim/issues/5240))- Fixed \"JS Codegen: duplicated fields in object constructor\"  ([#5271](https://github.com/nim-lang/Nim/issues/5271))- Fixed \"RFC: improving JavaScript FFI\"  ([#4873](https://github.com/nim-lang/Nim/issues/4873))- Fixed \"Wrong result type when using bitwise and\"  ([#5216](https://github.com/nim-lang/Nim/issues/5216))- Fixed \"upcoming.asyncdispatch is prone to memory leaks\"  ([#5290](https://github.com/nim-lang/Nim/issues/5290))- Fixed \"Using threadvars leads to crash on Windows when threads are created/destroyed\"  ([#5301](https://github.com/nim-lang/Nim/issues/5301))- Fixed \"Type inferring templates do not work with non-ref types.\"  ([#4973](https://github.com/nim-lang/Nim/issues/4973))- Fixed \"Nimble package list no longer works on lib.html\"  ([#5318](https://github.com/nim-lang/Nim/issues/5318))- Fixed \"Missing file name and line number in error message\"  ([#4992](https://github.com/nim-lang/Nim/issues/4992))- Fixed \"ref type can't be converted to var parameter in VM\"  ([#5327](https://github.com/nim-lang/Nim/issues/5327))- Fixed \"nimweb ignores the value of --parallelBuild\"  ([#5328](https://github.com/nim-lang/Nim/issues/5328))- Fixed \"Cannot unregister/close AsyncEvent from within its handler\"  ([#5331](https://github.com/nim-lang/Nim/issues/5331))- Fixed \"name collision with template instanciated generic inline function with inlined iterator specialization used from different modules\"  ([#5285](https://github.com/nim-lang/Nim/issues/5285))- Fixed \"object in VM does not have value semantic\"  ([#5269](https://github.com/nim-lang/Nim/issues/5269))- Fixed \"Unstable tuple destructuring behavior in Nim VM\"  ([#5221](https://github.com/nim-lang/Nim/issues/5221))- Fixed \"nre module breaks os templates\"  ([#4996](https://github.com/nim-lang/Nim/issues/4996))- Fixed \"Cannot implement distinct seq with setLen\"  ([#5090](https://github.com/nim-lang/Nim/issues/5090))- Fixed \"await inside array/dict literal produces invalid code\"  ([#5314](https://github.com/nim-lang/Nim/issues/5314))- Fixed \"asyncdispatch.accept() can raise exception inside poll() instead of failing future on Windows\"  ([#5279](https://github.com/nim-lang/Nim/issues/5279))- Fixed \"VM: A crash report should be more informative\"  ([#5352](https://github.com/nim-lang/Nim/issues/5352))- Fixed \"IO routines are poor at handling errors\"  ([#5349](https://github.com/nim-lang/Nim/issues/5349))- Fixed \"new import syntax doesn't work?\"  ([#5185](https://github.com/nim-lang/Nim/issues/5185))- Fixed \"Seq of object literals skips unmentioned fields\"  ([#5339](https://github.com/nim-lang/Nim/issues/5339))- Fixed \"``sym is not accessible`` in compile time\"  ([#5354](https://github.com/nim-lang/Nim/issues/5354))- Fixed \"the matching is broken in re.nim\"  ([#5382](https://github.com/nim-lang/Nim/issues/5382))- Fixed \"development branch breaks in my c wrapper\"  ([#5392](https://github.com/nim-lang/Nim/issues/5392))- Fixed \"Bad codegen: toSeq + tuples + generics\"  ([#5383](https://github.com/nim-lang/Nim/issues/5383))- Fixed \"Bad codegen: toSeq + tuples + generics\"  ([#5383](https://github.com/nim-lang/Nim/issues/5383))- Fixed \"Codegen error when using container of containers\"  ([#5402](https://github.com/nim-lang/Nim/issues/5402))- Fixed \"sizeof(RangeType) is not available in static context\"  ([#5399](https://github.com/nim-lang/Nim/issues/5399))- Fixed \"Regression: ICE: expr: var not init ex_263713\"  ([#5405](https://github.com/nim-lang/Nim/issues/5405))- Fixed \"Stack trace is wrong when assignment operator fails with template\"  ([#5400](https://github.com/nim-lang/Nim/issues/5400))- Fixed \"SIGSEGV in compiler\"  ([#5391](https://github.com/nim-lang/Nim/issues/5391))- Fixed \"Compiler regression with struct member names\"  ([#5404](https://github.com/nim-lang/Nim/issues/5404))- Fixed \"Regression: compiler segfault\"  ([#5419](https://github.com/nim-lang/Nim/issues/5419))- Fixed \"The compilation of jester routes is broken on devel\"  ([#5417](https://github.com/nim-lang/Nim/issues/5417))- Fixed \"Non-generic return type produces \"method is not a base\"\"  ([#5432](https://github.com/nim-lang/Nim/issues/5432))- Fixed \"Confusing error behavior when calling slice[T].random\"  ([#5430](https://github.com/nim-lang/Nim/issues/5430))- Fixed \"Wrong method called\"  ([#5439](https://github.com/nim-lang/Nim/issues/5439))- Fixed \"Attempt to document the strscans.scansp macro\"  ([#5154](https://github.com/nim-lang/Nim/issues/5154))- Fixed \"[Regression] Invalid C code for _ symbol inside jester routes\"  ([#5452](https://github.com/nim-lang/Nim/issues/5452))- Fixed \"StdLib base64 encodeInternal crashes with out of bound exception\"  ([#5457](https://github.com/nim-lang/Nim/issues/5457))- Fixed \"Nim hangs forever in infinite loop in nre library\"  ([#5444](https://github.com/nim-lang/Nim/issues/5444))- Fixed \"Tester passes test although individual test in suite fails\"  ([#5472](https://github.com/nim-lang/Nim/issues/5472))- Fixed \"terminal.nim documentation\"  ([#5483](https://github.com/nim-lang/Nim/issues/5483))- Fixed \"Codegen error - expected identifier before ')' token (probably regression)\"  ([#5481](https://github.com/nim-lang/Nim/issues/5481))- Fixed \"mixin not works inside generic proc generated by template\"  ([#5478](https://github.com/nim-lang/Nim/issues/5478))- Fixed \"var not init (converter + template + macro)\"  ([#5467](https://github.com/nim-lang/Nim/issues/5467))- Fixed \"`==` for OrderedTable should consider equal content but different size as equal.\"  ([#5487](https://github.com/nim-lang/Nim/issues/5487))- Fixed \"Fixed tests/tester.nim\"  ([#45](https://github.com/nim-lang/Nim/issues/45))- Fixed \"template instanciation crashes compiler\"  ([#5428](https://github.com/nim-lang/Nim/issues/5428))- Fixed \"Internal compiler error in handleGenericInvocation\"  ([#5167](https://github.com/nim-lang/Nim/issues/5167))- Fixed \"compiler crash in forwarding template\"  ([#5455](https://github.com/nim-lang/Nim/issues/5455))- Fixed \"Doc query re public/private + suggestion re deprecated\"  ([#5529](https://github.com/nim-lang/Nim/issues/5529))- Fixed \"inheritance not work for generic object whose parent is parameterized\"  ([#5264](https://github.com/nim-lang/Nim/issues/5264))- Fixed \"weird inheritance rule restriction\"  ([#5231](https://github.com/nim-lang/Nim/issues/5231))- Fixed \"Enum with holes broken in JS\"  ([#5062](https://github.com/nim-lang/Nim/issues/5062))- Fixed \"enum type and aliased enum type inequality when tested with operator `is` involving template\"  ([#5360](https://github.com/nim-lang/Nim/issues/5360))- Fixed \"logging: problem with console logger caused by the latest changes in sysio\"  ([#5546](https://github.com/nim-lang/Nim/issues/5546))- Fixed \"Crash if proc and caller doesn't define seq type - HEAD\"  ([#4756](https://github.com/nim-lang/Nim/issues/4756))- Fixed \"`path` config option doesn't work when compilation is invoked from a different directory\"  ([#5228](https://github.com/nim-lang/Nim/issues/5228))- Fixed \"segfaults module doesn't compile with C++ backend\"  ([#5550](https://github.com/nim-lang/Nim/issues/5550))- Fixed \"Improve `joinThreads` for windows\"  ([#4972](https://github.com/nim-lang/Nim/issues/4972))- Fixed \"Compiling in release mode prevents valid code execution.\"  ([#5296](https://github.com/nim-lang/Nim/issues/5296))- Fixed \"Forward declaration of generic procs or iterators doesn't work\"  ([#4104](https://github.com/nim-lang/Nim/issues/4104))- Fixed \"cant create thread after join\"  ([#4719](https://github.com/nim-lang/Nim/issues/4719))- Fixed \"can't compile with var name \"near\" and --threads:on\"  ([#5598](https://github.com/nim-lang/Nim/issues/5598))- Fixed \"inconsistent behavior when calling parent's proc of generic object\"  ([#5241](https://github.com/nim-lang/Nim/issues/5241))- Fixed \"The problem with import order of asyncdispatch and unittest modules\"  ([#5597](https://github.com/nim-lang/Nim/issues/5597))- Fixed \"Generic code fails to compile in unexpected ways\"  ([#976](https://github.com/nim-lang/Nim/issues/976))- Fixed \"Another 'User defined type class' issue\"  ([#1128](https://github.com/nim-lang/Nim/issues/1128))- Fixed \"compiler fails to compile user defined typeclass\"  ([#1147](https://github.com/nim-lang/Nim/issues/1147))- Fixed \"Type class membership testing doesn't work on instances of generic object types\"  ([#1570](https://github.com/nim-lang/Nim/issues/1570))- Fixed \"Strange overload resolution behavior for procedures with typeclass arguments\"  ([#1991](https://github.com/nim-lang/Nim/issues/1991))- Fixed \"The same UDTC can't constrain two type parameters in the same procedure\"  ([#2018](https://github.com/nim-lang/Nim/issues/2018))- Fixed \"More trait/concept issues\"  ([#2423](https://github.com/nim-lang/Nim/issues/2423))- Fixed \"Bugs with concepts?\"  ([#2882](https://github.com/nim-lang/Nim/issues/2882))- Fixed \"Improve error messages for concepts\"    ([#3330](https://github.com/nim-lang/Nim/issues/3330))- Fixed \"Dynamic dispatch is not working correctly\"    ([#5599](https://github.com/nim-lang/Nim/issues/5599))- Fixed \"asynchttpserver may consume unbounded memory reading headers\"    ([#3847](https://github.com/nim-lang/Nim/issues/3847))- Fixed \"nim check crash due to missing var keyword\"    ([#5618](https://github.com/nim-lang/Nim/issues/5618))- Fixed \"Unexpected template resolution\"    ([#5625](https://github.com/nim-lang/Nim/issues/5625))- Fixed \"Installer fails to download mingw.zip\"    ([#5422](https://github.com/nim-lang/Nim/issues/5422))- Fixed \"Exception name and parent get lost after reraising\"    ([#5628](https://github.com/nim-lang/Nim/issues/5628))- Fixed \"generic ref object typeRel problem\"    ([#5621](https://github.com/nim-lang/Nim/issues/5621))- Fixed \"typedesc typeRel regression\"    ([#5632](https://github.com/nim-lang/Nim/issues/5632))- Fixed \"http client respects only one \"Set-Cookie\" header\"    ([#5611](https://github.com/nim-lang/Nim/issues/5611))- Fixed \"Internal assert when using ``compiles``\"    ([#5638](https://github.com/nim-lang/Nim/issues/5638))- Fixed \"Compiler crash for variant type.\"    ([#4556](https://github.com/nim-lang/Nim/issues/4556))- Fixed \"MultipartData in httpclient.Post appears to break header\"    ([#5710](https://github.com/nim-lang/Nim/issues/5710))- Fixed \"setCookie incorrect timestamp format\"    ([#5718](https://github.com/nim-lang/Nim/issues/5718))- Fixed \"[Regression] strdefine consts cannot be passed to a procvar\"    ([#5729](https://github.com/nim-lang/Nim/issues/5729))- Fixed \"Nim's --nimblepaths picks 1.0 over #head\"    ([#5752](https://github.com/nim-lang/Nim/issues/5752))- Fixed \"Async writes are not queued up on Windows\"    ([#5532](https://github.com/nim-lang/Nim/issues/5532))- Fixed \"float32 literals are translated to double literals in C\"  ([#5821](https://github.com/nim-lang/Nim/issues/5821))- Fixed \"LibreSSL isn't recognized as legit SSL library\"  ([#4893](https://github.com/nim-lang/Nim/issues/4893))- Fixed \"exception when using json \"to\" proc\"  ([#5761](https://github.com/nim-lang/Nim/issues/5761))", "content_with_meta": "---\ntitle: \"Version 0.17.0 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.17.0, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\nThis release fixes the most important regressions introduced in version 0.16.0.\nIn particular memory manager and channel bugs have been fixed. There was also\nmany significant improvements to the language, in particular a lot of work was\nput into concepts. Zahary has been leading this effort and we thank him for\nhis hard work. Be sure to check out the changelog [below](#changelog) for\na comprehensive list of changes.\n\nThe NSIS based\ninstaller is not provided anymore as the Nim website moved to ``https`` and\nthis caused NSIS downloads to fail. The latest version of Nim for Windows can\nstill be downloaded as a zip archive from the\n[downloads page]({{site.baseurl}}/install.html).\n\nWe would also like to invite you to test a brand new tool that aims to make\nthe installation and management of multiple Nim versions much easier. This tool\nis called ``choosenim`` and allows you to install the latest version of Nim\nwith a single command.\nCheck out the\n[installation instructions](https://github.com/dom96/choosenim#installation)\non GitHub to give it a go, but keep in mind that this tool is still\nexperimental.\n\nThis release also includes version 0.8.6 of the Nimble package manager,\nbe sure to check out its\n[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)\nfor a list of changes since its last release.\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n- There are now two different HTTP response types, ``Response`` and\n  ``AsyncResponse``. ``AsyncResponse``'s ``body`` accessor returns a\n  ``Future[string]``!\n\n  Due to this change you may need to add another ``await`` in your code.\n- ``httpclient.request`` now respects the ``maxRedirects`` option. Previously\n  redirects were handled only by ``get`` and ``post`` procs.\n- The IO routines now raise ``EOFError`` for the \"end of file\" condition.\n  ``EOFError`` is a subtype of ``IOError`` and so it's easier to distinguish\n  between \"error during read\" and \"error due to EOF\".\n- A hash procedure has been added for ``cstring`` type in ``hashes`` module.\n  Previously, hash of a ``cstring`` would be calculated as a hash of the\n  pointer. Now the hash is calculated from the contents of the string, assuming\n  ``cstring`` is a null-terminated string. Equal ``string`` and ``cstring``\n  values produce an equal hash value.\n- Macros accepting `varargs` arguments will now receive a node having the\n  `nkArgList` node kind. Previous code expecting the node kind to be `nkBracket`\n  may have to be updated.\n- ``memfiles.open`` now closes file handles/fds by default.  Passing\n  ``allowRemap=true`` to ``memfiles.open`` recovers the old behavior.  The old\n  behavior is only needed to call ``mapMem`` on the resulting ``MemFile``.\n- ``posix.nim``: For better C++ interop the field\n  ``sa_sigaction*: proc (x: cint, y: var SigInfo, z: pointer) {.noconv.}`` was\n  changed\n  to ``sa_sigaction*: proc (x: cint, y: ptr SigInfo, z: pointer) {.noconv.}``.\n- The compiler doesn't infer effects for ``.base`` methods anymore. This means\n  you need to annotate them with ``.gcsafe`` or similar to clearly declare\n  upfront every implementation needs to fulfill these contracts.\n- ``system.getAst templateCall(x, y)`` now typechecks the ``templateCall``\n  properly. You need to patch your code accordingly.\n- ``macros.getType`` and ``macros.getTypeImpl`` for an enum will now return an\n  AST that is the same as what is used to define an enum.  Previously the AST\n  returned had a repeated ``EnumTy`` node and was missing the initial pragma\n  node (which is currently empty for an enum).\n- ``macros.getTypeImpl`` now correctly returns the implementation for a symbol\n  of type ``tyGenericBody``.\n- If the dispatcher parameter's value used in multi method is ``nil``,\n  a ``NilError`` exception is raised. The old behavior was that the method\n  would be a ``nop`` then.\n- ``posix.nim``: the family of ``ntohs`` procs now takes unsigned integers\n  instead of signed integers.\n- In Nim identifiers en-dash (Unicode point U+2013) is not an alias for the\n  underscore anymore. Use underscores instead.\n- When the ``requiresInit`` pragma is applied to a record type, future versions\n  of Nim will also require you to initialize all the fields of the type during\n  object construction. For now, only a warning will be produced.\n- The Object construction syntax now performs a number of additional safety\n  checks. When fields within case objects are initialized, the compiler will\n  now demand that the respective discriminator field has a matching known\n  compile-time value.\n- On posix, the results of `waitForExit`, `peekExitCode`, `execCmd` will return\n  128 + signal number if the application terminates via signal.\n- ``ospaths.getConfigDir`` now conforms to the XDG Base Directory specification\n  on non-Windows OSs. It returns the value of the ``XDG_CONFIG_DIR`` environment\n  variable if it is set, and returns the default configuration directory,\n  \"~/.config/\", otherwise.\n- Renamed the line info node parameter for ``newNimNode`` procedure.\n- The parsing rules of ``do`` changed.\n\n    ```nim\n    foo bar do:\n      baz\n    ```\n\n  Used to be parsed as:\n\n    ```nim\n    foo(bar(do:\n      baz))\n    ```\n\n  Now it is parsed as:\n\n    ```nim\n    foo(bar, do:\n      baz)\n    ```\n\n\nLibrary Additions\n-----------------\n\n- Added ``system.onThreadDestruction``.\n\n- Added ``dial`` procedure to networking modules: ``net``, ``asyncdispatch``,\n  ``asyncnet``. It merges socket creation, address resolution, and connection\n  into single step. When using ``dial``, you don't have to worry about the\n  IPv4 vs IPv6 problem. ``httpclient`` now supports IPv6.\n\n- Added `to` macro which allows JSON to be unmarshalled into a type.\n\n    ```nim\n    import json\n\n    type\n      Person = object\n        name: string\n        age: int\n\n    let data = \"\"\"\n      {\n        \"name\": \"Amy\",\n        \"age\": 4\n      }\n    \"\"\"\n\n    let node = parseJson(data)\n    let obj = node.to(Person)\n    echo(obj)\n    ```\n\nTool Additions\n--------------\n\n- The ``finish`` tool can now download MingW for you should it not find a\n  working MingW installation.\n\n\nCompiler Additions\n------------------\n\n- The name mangling rules used by the C code generator changed. Most of the time\n  local variables and parameters are not mangled at all anymore. This improves\n  the debugging experience.\n- The compiler produces explicit name mangling files when ``--debugger:native``\n  is enabled. Debuggers can read these ``.ndi`` files in order to improve\n  debugging Nim code.\n\n\nLanguage Additions\n------------------\n\n- The ``try`` statement's ``except`` branches now support the binding of a\ncaught exception to a variable:\n\n    ```nim\n      try:\n        raise newException(Exception, \"Hello World\")\n      except Exception as exc:\n        echo(exc.msg)\n    ```\n\n    This replaces the ``getCurrentException`` and ``getCurrentExceptionMsg()``\n    procedures, although these procedures will remain in the stdlib for the\n    foreseeable future. This new language feature is actually implemented using\n    these procedures.\n\n    In the near future we will be converting all exception types to refs to\n    remove the need for the ``newException`` template.\n\n- A new pragma ``.used`` can be used for symbols to prevent\nthe \"declared but not used\" warning. More details can be\nfound [here](http://nim-lang.org/docs/manual.html#pragmas-used-pragma).\n- The popular \"colon block of statements\" syntax is now also supported for\n  ``let`` and ``var`` statements and assignments:\n\n    ```nim\n    template ve(value, effect): untyped =\n      effect\n      value\n\n    let x = ve(4):\n      echo \"welcome to Nim!\"\n    ```\n\n    This is particularly useful for DSLs that help in tree construction.\n\n\n## Language changes\n\n- The ``.procvar`` annotation is not required anymore. That doesn't mean you\n  can pass ``system.$`` to ``map`` just yet though.\n\n\n## Bugfixes\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222017-01-07+..+2017-05-16%22+).\n\n- Fixed \"Weird compilation bug\"\n  ([#4884](https://github.com/nim-lang/Nim/issues/4884))\n- Fixed \"Return by arg optimization does not set result to default value\"\n  ([#5098](https://github.com/nim-lang/Nim/issues/5098))\n- Fixed \"upcoming asyncdispatch doesn't remove recv callback if remote side closed socket\"\n  ([#5128](https://github.com/nim-lang/Nim/issues/5128))\n- Fixed \"compiler bug, executable writes into wrong memory\"\n  ([#5218](https://github.com/nim-lang/Nim/issues/5218))\n- Fixed \"Module aliasing fails when multiple modules have the same original name\"\n  ([#5112](https://github.com/nim-lang/Nim/issues/5112))\n- Fixed \"JS: var argument + case expr with arg = bad codegen\"\n  ([#5244](https://github.com/nim-lang/Nim/issues/5244))\n- Fixed \"compiler reject proc's param shadowing inside template\"\n  ([#5225](https://github.com/nim-lang/Nim/issues/5225))\n- Fixed \"const value not accessible in proc\"\n  ([#3434](https://github.com/nim-lang/Nim/issues/3434))\n- Fixed \"Compilation regression 0.13.0 vs 0.16.0 in compile-time evaluation\"\n  ([#5237](https://github.com/nim-lang/Nim/issues/5237))\n- Fixed \"Regression: JS: wrong field-access codegen\"\n  ([#5234](https://github.com/nim-lang/Nim/issues/5234))\n- Fixed \"fixes #5234\"\n  ([#5240](https://github.com/nim-lang/Nim/issues/5240))\n- Fixed \"JS Codegen: duplicated fields in object constructor\"\n  ([#5271](https://github.com/nim-lang/Nim/issues/5271))\n- Fixed \"RFC: improving JavaScript FFI\"\n  ([#4873](https://github.com/nim-lang/Nim/issues/4873))\n- Fixed \"Wrong result type when using bitwise and\"\n  ([#5216](https://github.com/nim-lang/Nim/issues/5216))\n- Fixed \"upcoming.asyncdispatch is prone to memory leaks\"\n  ([#5290](https://github.com/nim-lang/Nim/issues/5290))\n- Fixed \"Using threadvars leads to crash on Windows when threads are created/destroyed\"\n  ([#5301](https://github.com/nim-lang/Nim/issues/5301))\n- Fixed \"Type inferring templates do not work with non-ref types.\"\n  ([#4973](https://github.com/nim-lang/Nim/issues/4973))\n- Fixed \"Nimble package list no longer works on lib.html\"\n  ([#5318](https://github.com/nim-lang/Nim/issues/5318))\n- Fixed \"Missing file name and line number in error message\"\n  ([#4992](https://github.com/nim-lang/Nim/issues/4992))\n- Fixed \"ref type can't be converted to var parameter in VM\"\n  ([#5327](https://github.com/nim-lang/Nim/issues/5327))\n- Fixed \"nimweb ignores the value of --parallelBuild\"\n  ([#5328](https://github.com/nim-lang/Nim/issues/5328))\n- Fixed \"Cannot unregister/close AsyncEvent from within its handler\"\n  ([#5331](https://github.com/nim-lang/Nim/issues/5331))\n- Fixed \"name collision with template instanciated generic inline function with inlined iterator specialization used from different modules\"\n  ([#5285](https://github.com/nim-lang/Nim/issues/5285))\n- Fixed \"object in VM does not have value semantic\"\n  ([#5269](https://github.com/nim-lang/Nim/issues/5269))\n- Fixed \"Unstable tuple destructuring behavior in Nim VM\"\n  ([#5221](https://github.com/nim-lang/Nim/issues/5221))\n- Fixed \"nre module breaks os templates\"\n  ([#4996](https://github.com/nim-lang/Nim/issues/4996))\n- Fixed \"Cannot implement distinct seq with setLen\"\n  ([#5090](https://github.com/nim-lang/Nim/issues/5090))\n- Fixed \"await inside array/dict literal produces invalid code\"\n  ([#5314](https://github.com/nim-lang/Nim/issues/5314))\n\n- Fixed \"asyncdispatch.accept() can raise exception inside poll() instead of failing future on Windows\"\n  ([#5279](https://github.com/nim-lang/Nim/issues/5279))\n- Fixed \"VM: A crash report should be more informative\"\n  ([#5352](https://github.com/nim-lang/Nim/issues/5352))\n- Fixed \"IO routines are poor at handling errors\"\n  ([#5349](https://github.com/nim-lang/Nim/issues/5349))\n- Fixed \"new import syntax doesn't work?\"\n  ([#5185](https://github.com/nim-lang/Nim/issues/5185))\n- Fixed \"Seq of object literals skips unmentioned fields\"\n  ([#5339](https://github.com/nim-lang/Nim/issues/5339))\n- Fixed \"``sym is not accessible`` in compile time\"\n  ([#5354](https://github.com/nim-lang/Nim/issues/5354))\n- Fixed \"the matching is broken in re.nim\"\n  ([#5382](https://github.com/nim-lang/Nim/issues/5382))\n- Fixed \"development branch breaks in my c wrapper\"\n  ([#5392](https://github.com/nim-lang/Nim/issues/5392))\n- Fixed \"Bad codegen: toSeq + tuples + generics\"\n  ([#5383](https://github.com/nim-lang/Nim/issues/5383))\n- Fixed \"Bad codegen: toSeq + tuples + generics\"\n  ([#5383](https://github.com/nim-lang/Nim/issues/5383))\n- Fixed \"Codegen error when using container of containers\"\n  ([#5402](https://github.com/nim-lang/Nim/issues/5402))\n- Fixed \"sizeof(RangeType) is not available in static context\"\n  ([#5399](https://github.com/nim-lang/Nim/issues/5399))\n- Fixed \"Regression: ICE: expr: var not init ex_263713\"\n  ([#5405](https://github.com/nim-lang/Nim/issues/5405))\n- Fixed \"Stack trace is wrong when assignment operator fails with template\"\n  ([#5400](https://github.com/nim-lang/Nim/issues/5400))\n- Fixed \"SIGSEGV in compiler\"\n  ([#5391](https://github.com/nim-lang/Nim/issues/5391))\n- Fixed \"Compiler regression with struct member names\"\n  ([#5404](https://github.com/nim-lang/Nim/issues/5404))\n- Fixed \"Regression: compiler segfault\"\n  ([#5419](https://github.com/nim-lang/Nim/issues/5419))\n- Fixed \"The compilation of jester routes is broken on devel\"\n  ([#5417](https://github.com/nim-lang/Nim/issues/5417))\n- Fixed \"Non-generic return type produces \"method is not a base\"\"\n  ([#5432](https://github.com/nim-lang/Nim/issues/5432))\n- Fixed \"Confusing error behavior when calling slice[T].random\"\n  ([#5430](https://github.com/nim-lang/Nim/issues/5430))\n- Fixed \"Wrong method called\"\n  ([#5439](https://github.com/nim-lang/Nim/issues/5439))\n- Fixed \"Attempt to document the strscans.scansp macro\"\n  ([#5154](https://github.com/nim-lang/Nim/issues/5154))\n- Fixed \"[Regression] Invalid C code for _ symbol inside jester routes\"\n  ([#5452](https://github.com/nim-lang/Nim/issues/5452))\n- Fixed \"StdLib base64 encodeInternal crashes with out of bound exception\"\n  ([#5457](https://github.com/nim-lang/Nim/issues/5457))\n- Fixed \"Nim hangs forever in infinite loop in nre library\"\n  ([#5444](https://github.com/nim-lang/Nim/issues/5444))\n\n- Fixed \"Tester passes test although individual test in suite fails\"\n  ([#5472](https://github.com/nim-lang/Nim/issues/5472))\n- Fixed \"terminal.nim documentation\"\n  ([#5483](https://github.com/nim-lang/Nim/issues/5483))\n- Fixed \"Codegen error - expected identifier before ')' token (probably regression)\"\n  ([#5481](https://github.com/nim-lang/Nim/issues/5481))\n- Fixed \"mixin not works inside generic proc generated by template\"\n  ([#5478](https://github.com/nim-lang/Nim/issues/5478))\n- Fixed \"var not init (converter + template + macro)\"\n  ([#5467](https://github.com/nim-lang/Nim/issues/5467))\n- Fixed \"`==` for OrderedTable should consider equal content but different size as equal.\"\n  ([#5487](https://github.com/nim-lang/Nim/issues/5487))\n- Fixed \"Fixed tests/tester.nim\"\n  ([#45](https://github.com/nim-lang/Nim/issues/45))\n- Fixed \"template instanciation crashes compiler\"\n  ([#5428](https://github.com/nim-lang/Nim/issues/5428))\n- Fixed \"Internal compiler error in handleGenericInvocation\"\n  ([#5167](https://github.com/nim-lang/Nim/issues/5167))\n- Fixed \"compiler crash in forwarding template\"\n  ([#5455](https://github.com/nim-lang/Nim/issues/5455))\n- Fixed \"Doc query re public/private + suggestion re deprecated\"\n  ([#5529](https://github.com/nim-lang/Nim/issues/5529))\n- Fixed \"inheritance not work for generic object whose parent is parameterized\"\n  ([#5264](https://github.com/nim-lang/Nim/issues/5264))\n- Fixed \"weird inheritance rule restriction\"\n  ([#5231](https://github.com/nim-lang/Nim/issues/5231))\n- Fixed \"Enum with holes broken in JS\"\n  ([#5062](https://github.com/nim-lang/Nim/issues/5062))\n- Fixed \"enum type and aliased enum type inequality when tested with operator `is` involving template\"\n  ([#5360](https://github.com/nim-lang/Nim/issues/5360))\n- Fixed \"logging: problem with console logger caused by the latest changes in sysio\"\n  ([#5546](https://github.com/nim-lang/Nim/issues/5546))\n- Fixed \"Crash if proc and caller doesn't define seq type - HEAD\"\n  ([#4756](https://github.com/nim-lang/Nim/issues/4756))\n- Fixed \"`path` config option doesn't work when compilation is invoked from a different directory\"\n  ([#5228](https://github.com/nim-lang/Nim/issues/5228))\n- Fixed \"segfaults module doesn't compile with C++ backend\"\n  ([#5550](https://github.com/nim-lang/Nim/issues/5550))\n- Fixed \"Improve `joinThreads` for windows\"\n  ([#4972](https://github.com/nim-lang/Nim/issues/4972))\n- Fixed \"Compiling in release mode prevents valid code execution.\"\n  ([#5296](https://github.com/nim-lang/Nim/issues/5296))\n- Fixed \"Forward declaration of generic procs or iterators doesn't work\"\n  ([#4104](https://github.com/nim-lang/Nim/issues/4104))\n- Fixed \"cant create thread after join\"\n  ([#4719](https://github.com/nim-lang/Nim/issues/4719))\n- Fixed \"can't compile with var name \"near\" and --threads:on\"\n  ([#5598](https://github.com/nim-lang/Nim/issues/5598))\n- Fixed \"inconsistent behavior when calling parent's proc of generic object\"\n  ([#5241](https://github.com/nim-lang/Nim/issues/5241))\n- Fixed \"The problem with import order of asyncdispatch and unittest modules\"\n  ([#5597](https://github.com/nim-lang/Nim/issues/5597))\n- Fixed \"Generic code fails to compile in unexpected ways\"\n  ([#976](https://github.com/nim-lang/Nim/issues/976))\n- Fixed \"Another 'User defined type class' issue\"\n  ([#1128](https://github.com/nim-lang/Nim/issues/1128))\n- Fixed \"compiler fails to compile user defined typeclass\"\n  ([#1147](https://github.com/nim-lang/Nim/issues/1147))\n- Fixed \"Type class membership testing doesn't work on instances of generic object types\"\n  ([#1570](https://github.com/nim-lang/Nim/issues/1570))\n- Fixed \"Strange overload resolution behavior for procedures with typeclass arguments\"\n  ([#1991](https://github.com/nim-lang/Nim/issues/1991))\n- Fixed \"The same UDTC can't constrain two type parameters in the same procedure\"\n  ([#2018](https://github.com/nim-lang/Nim/issues/2018))\n- Fixed \"More trait/concept issues\"\n  ([#2423](https://github.com/nim-lang/Nim/issues/2423))\n- Fixed \"Bugs with concepts?\"\n  ([#2882](https://github.com/nim-lang/Nim/issues/2882))\n\n- Fixed \"Improve error messages for concepts\"\n    ([#3330](https://github.com/nim-lang/Nim/issues/3330))\n- Fixed \"Dynamic dispatch is not working correctly\"\n    ([#5599](https://github.com/nim-lang/Nim/issues/5599))\n- Fixed \"asynchttpserver may consume unbounded memory reading headers\"\n    ([#3847](https://github.com/nim-lang/Nim/issues/3847))\n- Fixed \"nim check crash due to missing var keyword\"\n    ([#5618](https://github.com/nim-lang/Nim/issues/5618))\n- Fixed \"Unexpected template resolution\"\n    ([#5625](https://github.com/nim-lang/Nim/issues/5625))\n- Fixed \"Installer fails to download mingw.zip\"\n    ([#5422](https://github.com/nim-lang/Nim/issues/5422))\n- Fixed \"Exception name and parent get lost after reraising\"\n    ([#5628](https://github.com/nim-lang/Nim/issues/5628))\n- Fixed \"generic ref object typeRel problem\"\n    ([#5621](https://github.com/nim-lang/Nim/issues/5621))\n- Fixed \"typedesc typeRel regression\"\n    ([#5632](https://github.com/nim-lang/Nim/issues/5632))\n- Fixed \"http client respects only one \"Set-Cookie\" header\"\n    ([#5611](https://github.com/nim-lang/Nim/issues/5611))\n- Fixed \"Internal assert when using ``compiles``\"\n    ([#5638](https://github.com/nim-lang/Nim/issues/5638))\n- Fixed \"Compiler crash for variant type.\"\n    ([#4556](https://github.com/nim-lang/Nim/issues/4556))\n- Fixed \"MultipartData in httpclient.Post appears to break header\"\n    ([#5710](https://github.com/nim-lang/Nim/issues/5710))\n\n- Fixed \"setCookie incorrect timestamp format\"\n    ([#5718](https://github.com/nim-lang/Nim/issues/5718))\n- Fixed \"[Regression] strdefine consts cannot be passed to a procvar\"\n    ([#5729](https://github.com/nim-lang/Nim/issues/5729))\n- Fixed \"Nim's --nimblepaths picks 1.0 over #head\"\n    ([#5752](https://github.com/nim-lang/Nim/issues/5752))\n- Fixed \"Async writes are not queued up on Windows\"\n    ([#5532](https://github.com/nim-lang/Nim/issues/5532))\n- Fixed \"float32 literals are translated to double literals in C\"\n  ([#5821](https://github.com/nim-lang/Nim/issues/5821))\n- Fixed \"LibreSSL isn't recognized as legit SSL library\"\n  ([#4893](https://github.com/nim-lang/Nim/issues/4893))\n- Fixed \"exception when using json \"to\" proc\"\n  ([#5761](https://github.com/nim-lang/Nim/issues/5761))\n", "tags": ["nim", "python"], "published_at": "", "id": 36}, {"title": "Faster Command Line Tools in Nim", "slug": "faster-command-line-tools-in-nim", "content": "*This is a guest post by Euan Torano cross-posted from [Faster Command Line Tools in Nim](https://www.euantorano.co.uk/posts/faster-command-line-tools-in-nim/). If you would like to publish articles as a guest author on nim-lang.org then get in touch with us via [Twitter](https://twitter.com/nim_lang) or [otherwise](https://github.com/nim-lang/website/issues).*After having read the blog post titled [`Faster Command Line Tools in D` by Jon Degenhardt](http://dlang.org/blog/2017/05/24/faster-command-line-tools-in-d/) on the D Blog, I was interested to see how Nim would stack up performing the same task.Rather than explain the task again, I might as well quote the reference post that inspired me:> It’s a common programming task: Take a data file with fields separated by a delimiter (comma, tab, etc), and run a mathematical calculation involving several of the fields. Often these programs are one-time use scripts, other times they have longer shelf life. Speed is of course appreciated when the program is used more than a few times on large files.>> The specific exercise we’ll explore starts with files having keys in one field, integer values in another. The task is to sum the values for each key and print the key with the largest sum.>> With the first field as key, second field as value, the key with the max sum is B, with a total of 13.>> Fields are delimited by a TAB, and there may be any number of fields on a line. The file name and field numbers of the key and value are passed as command line arguments.## Implementing the Nim program, first tryThis is quite a simple program. All that we need to do is read a file, parse it as CSV data with a tab delimiter and sum the counts.Luckily, Nim's standard library has many useful modules to help with common tasks like these:- The [streams](https://nim-lang.org/docs/streams.html) module provides a `FileStream` type for reading from and writing to files.- The [parsecsv](https://nim-lang.org/docs/parsecsv.html) module provides a simple high performance CSV parser.- The [tables](https://nim-lang.org/docs/tables.html) module provides a `CountTable` type designed to map a key to its number of occurrences - precisely the task we're trying to accomplish!The code is pretty simple, so let's start by looking at it in its entirety:```nimimport os, strutils, streams, tables, parsecsvconst  Delim = '\\t'proc main() =  if paramCount() < 3:    quit(\"synopsis: \" & getAppFilename() & \" filename keyfield valuefield\")  let    filename = paramStr(1)    keyFieldIndex = parseInt(paramStr(2))    valueFieldIndex = parseInt(paramStr(3))    maxFieldIndex = max(keyFieldIndex, valueFieldIndex)  var    sumByKey = newCountTable[string]()    file = newFileStream(filename, fmRead)  if file == nil:    quit(\"cannot open the file \" & filename)  defer: file.close()  var csv: CsvParser  open(csv, file, filename, separator=Delim)  while csv.readRow():    if len(csv.row) > maxFieldIndex:      sumByKey.inc(csv.row[keyFieldIndex], parseInt(csv.row[valueFieldIndex]))  if sumByKey.len() == 0:    echo \"No entries\"  else:    let largest = sumByKey.largest()    echo \"max_key: \", largest[0], \" sum: \", largest[1]main()```Most of this should be pretty self explanatory. I've used the same names as those used in the D code samples provided in the original blog post to keep things looking similar.Obviously the start of the program is all about making sure we have enough command line arguments, and collecting them up. In Nim, we use `paramStr()` from the [os](https://nim-lang.org/docs/os.html) module to access command line arguments.From there, we create a new count table, open the CSV file for reading (`fmRead` opens the file in read mode) and start the CSV parser.We then read through all of the rows in the CSV file, and if the row has enough fields to be a valid row, we increment its entry within the count table.## Benchmarking SpeedWith this initial implementation complete, I built it in release mode (`nim c -d:release test_csv.nim`) and benchmarked it against the Python implementation and the final optimised D implementation (`max_column_sum_by_key_v4b.d`).The versions of the tools used in this post are as follows:- **Python**: `Python 2.7.13`- **DMD**: `DMD64 D Compiler v2.074.0`- **LDC**: `LDC - the LLVM D compiler (1.2.0): based on DMD v2.072.2 and LLVM 4.0.0`- **Nim**: `Nim Compiler Version 0.17.0 (2017-05-18) [MacOSX: amd64]`- **Clang**: `Apple LLVM version 8.1.0 (clang-802.0.42)`Testing was performed against the D version compiled using both the reference `DMD` D compiler, and the `LDC` LLVM based D compiler. The compilation switches used for the D versions were as follows:- **DMD**: `dmd -O -release -inline -boundscheck=off -of=./D/csv_test ./D/csv_test.d`- **LDC**: `ldc2 -of=./D/csv_test_ldc -O -release -boundscheck=off ./D/csv_test.d`I then ran all of these implementations against [the same ngram file from the Google Books project](https://storage.googleapis.com/books/ngrams/books/googlebooks-eng-all-1gram-20120701-0.gz), making sure I got the expected output, which is as follows:```max_key: 2006 sum: 22569013```The benchmark was ran on my mid 2014 MacBook Pro with a 2.8GHz Intel Core i7 running macOS Sierra 10.12.4. The benchmark made use of the `repeat.rb` script from [Kostya's benchmarks project](https://github.com/kostya/benchmarks) to run each version 10 times and report the fastest run time. This script also provides the added bonus of providing the peak amount of memory used by each version. Here are the results:```Python...max_key: 2006 sum: 2256901321.70smax_key: 2006 sum: 2256901332.06smax_key: 2006 sum: 2256901317.83smax_key: 2006 sum: 2256901318.29smax_key: 2006 sum: 2256901323.73smax_key: 2006 sum: 2256901318.09smax_key: 2006 sum: 2256901317.58smax_key: 2006 sum: 2256901317.86smax_key: 2006 sum: 2256901316.92smax_key: 2006 sum: 2256901315.98sMIN TIME: 15.98sPEAK MEM: 7.9MbD (DMD)...max_key: 2006 sum: 225690132.45smax_key: 2006 sum: 225690132.33smax_key: 2006 sum: 225690132.24smax_key: 2006 sum: 225690132.36smax_key: 2006 sum: 225690132.28smax_key: 2006 sum: 225690132.21smax_key: 2006 sum: 225690132.28smax_key: 2006 sum: 225690132.21smax_key: 2006 sum: 225690132.28smax_key: 2006 sum: 225690132.30sMIN TIME: 2.21sPEAK MEM: 2.3MbD (LDC)...max_key: 2006 sum: 225690131.42smax_key: 2006 sum: 225690131.34smax_key: 2006 sum: 225690131.34smax_key: 2006 sum: 225690131.33smax_key: 2006 sum: 225690131.88smax_key: 2006 sum: 225690131.31smax_key: 2006 sum: 225690131.35smax_key: 2006 sum: 225690131.36smax_key: 2006 sum: 225690131.29smax_key: 2006 sum: 225690131.26sMIN TIME: 1.26sPEAK MEM: 2.4MbNim...max_key: 2006 sum: 225690131.36smax_key: 2006 sum: 225690131.30smax_key: 2006 sum: 225690131.31smax_key: 2006 sum: 225690131.35smax_key: 2006 sum: 225690131.36smax_key: 2006 sum: 225690131.45smax_key: 2006 sum: 225690131.47smax_key: 2006 sum: 225690131.50smax_key: 2006 sum: 225690131.53smax_key: 2006 sum: 225690131.56sMIN TIME: 1.30sPEAK MEM: 1.9Mb```D (compiled with LDC and using the fifth iteration of the code from the original blog post) comes in fastest at 1.26 seconds. Nim comes in second, at 1.30 seconds - only 0.04 seconds behind.Nim does use 0.5Mb less memory than the D version built with LDC, and is doing slightly more work - the `parsecsv` module will handle escaped values, unlike the naive approach of simply splitting strings on the tab character.Python is clearly the loser, taking 12 times as long to complete the processing as the Nim version does and using 4 times the memory to do so.This test also shows the gulf between the DMD and LDC compilers. The same code compiled with the DMD compiler takes almost a whole second longer to execute than it does when compiled with LDC, though it does use 0.1Mb less memory at its peak.I'm sure that with some tuning, I could get the Nim version to perform even quicker, but for a 0.04 second time difference, I decided not to put that effort in.## Benchmarking compilation timesHaving come this far, I though I might as well benchmark how long compilation times are for the two D implementations and the Nim implementation. Obviously, the Python implementation is excluded from this test.I cleared out all build artefacts (such as the `*.o` files for D and the `nimcache` folder for Nim) along with the built executables, then simply timed each build. Here are the results:- **DMD**: `real 0m0.947s`- **LDC**: `real 0m2.296s`- **Nim**: `real 0m0.955s`It turns out that the DMD compiler is much quicker than the LDC compiler. Obviously all the optimisations that LLVM makes take a little while longer to complete.## ConclusionAnd that was the end of my little test. It turns out that Nim can certainly hold its own when it comes to parsing CSV files.I'd be interested to see how things run on other machines and operating systems to see how things are across platforms. I'm also sure there are far better ways I could benchmark these implementations, which is why I've [posted the project publicly on GitHub](https://github.com/euantorano/faster-command-line-tools-in-nim) - I'd welcome any enhancements to any of the versions or the benchmarking scripts, and would certainly welcome some more results to see how things stack up!", "content_with_meta": "---\ntitle: \"Faster Command Line Tools in Nim\"\nauthor: Euan Torano\ntags: nim, python\n---\n\n*This is a guest post by Euan Torano cross-posted from [Faster Command Line Tools in Nim](https://www.euantorano.co.uk/posts/faster-command-line-tools-in-nim/). If you would like to publish articles as a guest author on nim-lang.org then get in touch with us via [Twitter](https://twitter.com/nim_lang) or [otherwise](https://github.com/nim-lang/website/issues).*\n\nAfter having read the blog post titled [`Faster Command Line Tools in D` by Jon Degenhardt](http://dlang.org/blog/2017/05/24/faster-command-line-tools-in-d/) on the D Blog, I was interested to see how Nim would stack up performing the same task.\n\nRather than explain the task again, I might as well quote the reference post that inspired me:\n\n> It’s a common programming task: Take a data file with fields separated by a delimiter (comma, tab, etc), and run a mathematical calculation involving several of the fields. Often these programs are one-time use scripts, other times they have longer shelf life. Speed is of course appreciated when the program is used more than a few times on large files.\n>\n> The specific exercise we’ll explore starts with files having keys in one field, integer values in another. The task is to sum the values for each key and print the key with the largest sum.\n>\n> With the first field as key, second field as value, the key with the max sum is B, with a total of 13.\n>\n> Fields are delimited by a TAB, and there may be any number of fields on a line. The file name and field numbers of the key and value are passed as command line arguments.\n\n## Implementing the Nim program, first try\n\nThis is quite a simple program. All that we need to do is read a file, parse it as CSV data with a tab delimiter and sum the counts.\n\nLuckily, Nim's standard library has many useful modules to help with common tasks like these:\n\n- The [streams](https://nim-lang.org/docs/streams.html) module provides a `FileStream` type for reading from and writing to files.\n- The [parsecsv](https://nim-lang.org/docs/parsecsv.html) module provides a simple high performance CSV parser.\n- The [tables](https://nim-lang.org/docs/tables.html) module provides a `CountTable` type designed to map a key to its number of occurrences - precisely the task we're trying to accomplish!\n\nThe code is pretty simple, so let's start by looking at it in its entirety:\n\n```nim\nimport os, strutils, streams, tables, parsecsv\n\nconst\n  Delim = '\\t'\n\nproc main() =\n  if paramCount() < 3:\n    quit(\"synopsis: \" & getAppFilename() & \" filename keyfield valuefield\")\n\n  let\n    filename = paramStr(1)\n    keyFieldIndex = parseInt(paramStr(2))\n    valueFieldIndex = parseInt(paramStr(3))\n    maxFieldIndex = max(keyFieldIndex, valueFieldIndex)\n\n  var\n    sumByKey = newCountTable[string]()\n    file = newFileStream(filename, fmRead)\n\n  if file == nil:\n    quit(\"cannot open the file \" & filename)\n\n  defer: file.close()\n\n  var csv: CsvParser\n  open(csv, file, filename, separator=Delim)\n\n  while csv.readRow():\n    if len(csv.row) > maxFieldIndex:\n      sumByKey.inc(csv.row[keyFieldIndex], parseInt(csv.row[valueFieldIndex]))\n\n  if sumByKey.len() == 0:\n    echo \"No entries\"\n  else:\n    let largest = sumByKey.largest()\n    echo \"max_key: \", largest[0], \" sum: \", largest[1]\n\nmain()\n```\n\nMost of this should be pretty self explanatory. I've used the same names as those used in the D code samples provided in the original blog post to keep things looking similar.\n\nObviously the start of the program is all about making sure we have enough command line arguments, and collecting them up. In Nim, we use `paramStr()` from the [os](https://nim-lang.org/docs/os.html) module to access command line arguments.\n\nFrom there, we create a new count table, open the CSV file for reading (`fmRead` opens the file in read mode) and start the CSV parser.\n\nWe then read through all of the rows in the CSV file, and if the row has enough fields to be a valid row, we increment its entry within the count table.\n\n## Benchmarking Speed\n\nWith this initial implementation complete, I built it in release mode (`nim c -d:release test_csv.nim`) and benchmarked it against the Python implementation and the final optimised D implementation (`max_column_sum_by_key_v4b.d`).\n\nThe versions of the tools used in this post are as follows:\n\n- **Python**: `Python 2.7.13`\n- **DMD**: `DMD64 D Compiler v2.074.0`\n- **LDC**: `LDC - the LLVM D compiler (1.2.0): based on DMD v2.072.2 and LLVM 4.0.0`\n- **Nim**: `Nim Compiler Version 0.17.0 (2017-05-18) [MacOSX: amd64]`\n- **Clang**: `Apple LLVM version 8.1.0 (clang-802.0.42)`\n\nTesting was performed against the D version compiled using both the reference `DMD` D compiler, and the `LDC` LLVM based D compiler. The compilation switches used for the D versions were as follows:\n\n- **DMD**: `dmd -O -release -inline -boundscheck=off -of=./D/csv_test ./D/csv_test.d`\n- **LDC**: `ldc2 -of=./D/csv_test_ldc -O -release -boundscheck=off ./D/csv_test.d`\n\nI then ran all of these implementations against [the same ngram file from the Google Books project](https://storage.googleapis.com/books/ngrams/books/googlebooks-eng-all-1gram-20120701-0.gz), making sure I got the expected output, which is as follows:\n\n```\nmax_key: 2006 sum: 22569013\n```\n\nThe benchmark was ran on my mid 2014 MacBook Pro with a 2.8GHz Intel Core i7 running macOS Sierra 10.12.4. The benchmark made use of the `repeat.rb` script from [Kostya's benchmarks project](https://github.com/kostya/benchmarks) to run each version 10 times and report the fastest run time. This script also provides the added bonus of providing the peak amount of memory used by each version. Here are the results:\n\n```\nPython...\nmax_key: 2006 sum: 22569013\n21.70s\nmax_key: 2006 sum: 22569013\n32.06s\nmax_key: 2006 sum: 22569013\n17.83s\nmax_key: 2006 sum: 22569013\n18.29s\nmax_key: 2006 sum: 22569013\n23.73s\nmax_key: 2006 sum: 22569013\n18.09s\nmax_key: 2006 sum: 22569013\n17.58s\nmax_key: 2006 sum: 22569013\n17.86s\nmax_key: 2006 sum: 22569013\n16.92s\nmax_key: 2006 sum: 22569013\n15.98s\n\nMIN TIME: 15.98s\nPEAK MEM: 7.9Mb\n\nD (DMD)...\nmax_key: 2006 sum: 22569013\n2.45s\nmax_key: 2006 sum: 22569013\n2.33s\nmax_key: 2006 sum: 22569013\n2.24s\nmax_key: 2006 sum: 22569013\n2.36s\nmax_key: 2006 sum: 22569013\n2.28s\nmax_key: 2006 sum: 22569013\n2.21s\nmax_key: 2006 sum: 22569013\n2.28s\nmax_key: 2006 sum: 22569013\n2.21s\nmax_key: 2006 sum: 22569013\n2.28s\nmax_key: 2006 sum: 22569013\n2.30s\n\nMIN TIME: 2.21s\nPEAK MEM: 2.3Mb\n\nD (LDC)...\nmax_key: 2006 sum: 22569013\n1.42s\nmax_key: 2006 sum: 22569013\n1.34s\nmax_key: 2006 sum: 22569013\n1.34s\nmax_key: 2006 sum: 22569013\n1.33s\nmax_key: 2006 sum: 22569013\n1.88s\nmax_key: 2006 sum: 22569013\n1.31s\nmax_key: 2006 sum: 22569013\n1.35s\nmax_key: 2006 sum: 22569013\n1.36s\nmax_key: 2006 sum: 22569013\n1.29s\nmax_key: 2006 sum: 22569013\n1.26s\n\nMIN TIME: 1.26s\nPEAK MEM: 2.4Mb\n\nNim...\nmax_key: 2006 sum: 22569013\n1.36s\nmax_key: 2006 sum: 22569013\n1.30s\nmax_key: 2006 sum: 22569013\n1.31s\nmax_key: 2006 sum: 22569013\n1.35s\nmax_key: 2006 sum: 22569013\n1.36s\nmax_key: 2006 sum: 22569013\n1.45s\nmax_key: 2006 sum: 22569013\n1.47s\nmax_key: 2006 sum: 22569013\n1.50s\nmax_key: 2006 sum: 22569013\n1.53s\nmax_key: 2006 sum: 22569013\n1.56s\n\nMIN TIME: 1.30s\nPEAK MEM: 1.9Mb\n```\n\nD (compiled with LDC and using the fifth iteration of the code from the original blog post) comes in fastest at 1.26 seconds. Nim comes in second, at 1.30 seconds - only 0.04 seconds behind.\n\nNim does use 0.5Mb less memory than the D version built with LDC, and is doing slightly more work - the `parsecsv` module will handle escaped values, unlike the naive approach of simply splitting strings on the tab character.\n\nPython is clearly the loser, taking 12 times as long to complete the processing as the Nim version does and using 4 times the memory to do so.\n\nThis test also shows the gulf between the DMD and LDC compilers. The same code compiled with the DMD compiler takes almost a whole second longer to execute than it does when compiled with LDC, though it does use 0.1Mb less memory at its peak.\n\nI'm sure that with some tuning, I could get the Nim version to perform even quicker, but for a 0.04 second time difference, I decided not to put that effort in.\n\n## Benchmarking compilation times\n\nHaving come this far, I though I might as well benchmark how long compilation times are for the two D implementations and the Nim implementation. Obviously, the Python implementation is excluded from this test.\n\nI cleared out all build artefacts (such as the `*.o` files for D and the `nimcache` folder for Nim) along with the built executables, then simply timed each build. Here are the results:\n\n- **DMD**: `real 0m0.947s`\n- **LDC**: `real 0m2.296s`\n- **Nim**: `real 0m0.955s`\n\nIt turns out that the DMD compiler is much quicker than the LDC compiler. Obviously all the optimisations that LLVM makes take a little while longer to complete.\n\n## Conclusion\n\nAnd that was the end of my little test. It turns out that Nim can certainly hold its own when it comes to parsing CSV files.\n\nI'd be interested to see how things run on other machines and operating systems to see how things are across platforms. I'm also sure there are far better ways I could benchmark these implementations, which is why I've [posted the project publicly on GitHub](https://github.com/euantorano/faster-command-line-tools-in-nim) - I'd welcome any enhancements to any of the versions or the benchmarking scripts, and would certainly welcome some more results to see how things stack up!", "tags": ["nim", "python"], "published_at": "", "id": 37}, {"title": "Launching the 2017 Nim Community Survey", "slug": "community-survey-2017", "content": "We are proud to announce the launch of the official[2017 Nim Community Survey](https://goo.gl/forms/0dxgbGFSnPpYlnCY2)! No matterwhether you use Nim today, have used Nim previously, or never used Nim before;we want to know your opinions.Your feedback will help the Nim project understand its strengths andweaknesses, and to determine development priorities for the future.It shouldn't take you much longer than 5 to 10 minutes to complete this survey.Submissions will be accepted until around the 23rd of July, depending on theresponse rates. If you have any questions or feedback, please don't hesitateto get in touch with us via email at survey@nim-lang.org or on the[Nim Forum](http://forum.nim-lang.org).We would appreciate your help in spreading the word about this survey. Sharethe above link on your social network feeds, with your colleagues and inother communities.Thank you to everyone that helped develop and test the survey! Once thesubmission period ends, the results will be shown here and publicised viaTwitter, the Nim Forum and IRC.Thanks for your time!", "content_with_meta": "---\ntitle: \"Launching the 2017 Nim Community Survey\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe are proud to announce the launch of the official\n[2017 Nim Community Survey](https://goo.gl/forms/0dxgbGFSnPpYlnCY2)! No matter\nwhether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\n\nIt shouldn't take you much longer than 5 to 10 minutes to complete this survey.\nSubmissions will be accepted until around the 23rd of July, depending on the\nresponse rates. If you have any questions or feedback, please don't hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\n[Nim Forum](http://forum.nim-lang.org).\n\nWe would appreciate your help in spreading the word about this survey. Share\nthe above link on your social network feeds, with your colleagues and in\nother communities.\n\nThank you to everyone that helped develop and test the survey! Once the\nsubmission period ends, the results will be shown here and publicised via\nTwitter, the Nim Forum and IRC.\n\nThanks for your time!\n", "tags": ["nim", "python"], "published_at": "", "id": 38}, {"title": "Version 0.17.2 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.17.2, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.The major new feature in this release is the support for ``.nimble-link`` files.This has been added in order to support the latest Nimble version with its \"develop\" feature. For more information, see [``nimble``](https://github.com/nim-lang/nimble#nimble-develop).This is however primarily a bug fix release, with the most important bugfixesincluding the long standing codegen bugs that triggered GC crashes.Updating is recommended!Be sure to check out the changelog [below](#changelog) fora comprehensive list of changes.This release also includes version 0.8.8 of the Nimble package manager,be sure to check out its[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)for a list of changes since its last release.You can download the latest release of Nim from the [download](download.html)page. If you're using [``choosenim``](https://github.com/dom96/choosenim)then you can easily update to the latest version by running the following:```$ choosenim update stable```# Changelog## Changes affecting backwards compatibility- The changes made to the `do` notation parsing rules in v0.17.0 have beenreverted.## BugfixesThe list below has been generated based on the commits in Nim's gitrepository. As such it lists only the issues which have been closedvia a commit, for a full list see[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222017-05-16+..+2017-09-10%22+).- Fixed \"Fixed syslocks for ios\"  ([#5804](https://github.com/nim-lang/Nim/issues/5804))- Fixed \"OpenBSD pthread issue\"  ([#5920](https://github.com/nim-lang/Nim/issues/5920))- Fixed \"JS backend doesn't copy 'object' when adding to 'seq'\"  ([#4139](https://github.com/nim-lang/Nim/issues/4139))- Fixed \"sequtils insert produces wrong result in a case of sequence of objects in JS\"  ([#5933](https://github.com/nim-lang/Nim/issues/5933))- Fixed \"Index out of bounds error while using sets with cstring in JS\"  ([#5969](https://github.com/nim-lang/Nim/issues/5969))- Fixed \"Compiler crash when a proc marked as gcsafe moves around non-gcsafe closures\"  ([#5959](https://github.com/nim-lang/Nim/issues/5959))- Fixed \"type with packed pragma is not properly packed\"  ([#5824](https://github.com/nim-lang/Nim/issues/5824))- Fixed \"httpclient Docs Wrong\"  ([#5863](https://github.com/nim-lang/Nim/issues/5863))- Fixed \"{.async.} doesn't work with do notation\"  ([#5995](https://github.com/nim-lang/Nim/issues/5995))- Fixed \"Sigmatch error in fitting anonymous tuples to generic types\"  ([#5890](https://github.com/nim-lang/Nim/issues/5890))- Fixed \"Nested array alias type leads to compile-time and run-time bugs\"  ([#5962](https://github.com/nim-lang/Nim/issues/5962))- Fixed \"Static - Default value for static arg - Cannot instantiate\"  ([#5864](https://github.com/nim-lang/Nim/issues/5864))- Fixed \"constant of generic type becomes all zero when assigning to a local value\"  ([#5756](https://github.com/nim-lang/Nim/issues/5756))- Fixed \"User defined arithemetic in generic types\"  ([#5106](https://github.com/nim-lang/Nim/issues/5106))- Fixed \"Overloading with static[] leads to strange error\"  ([#5017](https://github.com/nim-lang/Nim/issues/5017))- Fixed \"Compiler crash\"  ([#2730](https://github.com/nim-lang/Nim/issues/2730))- Fixed \"Compiler segfaults on non-recursive code\"  ([#4524](https://github.com/nim-lang/Nim/issues/4524))- Fixed \"static[T] generic type cause `invalid type`\"  ([#3784](https://github.com/nim-lang/Nim/issues/3784))- Fixed \"Using static generic params on procs often fails to compile\"  ([#1017](https://github.com/nim-lang/Nim/issues/1017))- Fixed \"Inferring nested `static[T]` \"  ([#3153](https://github.com/nim-lang/Nim/issues/3153))- Fixed \"another static_t problem\"  ([#3152](https://github.com/nim-lang/Nim/issues/3152))- Fixed \"Generic code can cause attempts to use constructors for unrelated types to fail\"  ([#1051](https://github.com/nim-lang/Nim/issues/1051))- Fixed \"Internal Error with with static generic parameters\"  ([#1082](https://github.com/nim-lang/Nim/issues/1082))- Fixed \"Internal error with enumerable concept and map proc\"  ([#5968](https://github.com/nim-lang/Nim/issues/5968))- Fixed \"Concept - strange behaviour\"  ([#4020](https://github.com/nim-lang/Nim/issues/4020))- Fixed \"Compiler crash while wrapping concepts\"  ([#5127](https://github.com/nim-lang/Nim/issues/5127))- Fixed \"Using generic concept parameter causes stack overflow\"  ([#4737](https://github.com/nim-lang/Nim/issues/4737))- Fixed \"About ambiguous ``concept``\"  ([#5888](https://github.com/nim-lang/Nim/issues/5888))- Fixed \"Concepts don't play well with distinct primitive types, e.g. distinct float or string\"  ([#5983](https://github.com/nim-lang/Nim/issues/5983))- Fixed \"Error with generic concepts\"  ([#5084](https://github.com/nim-lang/Nim/issues/5084))- Fixed \"the `^` operator fails on floats\"  ([#5966](https://github.com/nim-lang/Nim/issues/5966))- Fixed \"Documentation: times.nim\"  ([#6010](https://github.com/nim-lang/Nim/issues/6010))- Fixed \"[Regression] Nim js crashes\"  ([#5946](https://github.com/nim-lang/Nim/issues/5946))- Fixed \"Times module compiled in JS failed to compare values\"  ([#6021](https://github.com/nim-lang/Nim/issues/6021))- Fixed \"JS: tables assignment breaks with importcpp's in scope (internal error: genAddr: nkDerefExpr)\"  ([#5846](https://github.com/nim-lang/Nim/issues/5846))- Fixed \"Object constructor violates copy semantics, allows modifying immutable [js only]\"  ([#4703](https://github.com/nim-lang/Nim/issues/4703))- Fixed \"No bounds checking in JS target?\"  ([#5563](https://github.com/nim-lang/Nim/issues/5563))- Fixed \"js: genDeref compiler crash\"  ([#5974](https://github.com/nim-lang/Nim/issues/5974))- Fixed \"JS: internal error in genDeref\"  ([#5379](https://github.com/nim-lang/Nim/issues/5379))- Fixed \"JS: compiler internal error\"  ([#5517](https://github.com/nim-lang/Nim/issues/5517))- Fixed \"JS codegen produces circular structure\"  ([#6035](https://github.com/nim-lang/Nim/issues/6035))- Fixed \"\"nim doc\" SIGSEGV when foo*(a: proc)\"  ([#6030](https://github.com/nim-lang/Nim/issues/6030))- Fixed \"Value redefinition not detected in {.pure.} enum\"  ([#6008](https://github.com/nim-lang/Nim/issues/6008))- Fixed \"unexpected option : '-o'\"  ([#6069](https://github.com/nim-lang/Nim/issues/6069))- Fixed \"Nimsuggest crashes in sempass2.useVar\"  ([#6067](https://github.com/nim-lang/Nim/issues/6067))- Fixed \"Nim compiler generates variables for discarded proc return values\"  ([#6037](https://github.com/nim-lang/Nim/issues/6037))- Fixed \"js target bug with operator +=\"  ([#5608](https://github.com/nim-lang/Nim/issues/5608))- Fixed \"Nim Tutorial (Part I) need update\"  ([#6062](https://github.com/nim-lang/Nim/issues/6062))- Fixed \"Error after codegen when shadowing template arg\"  ([#4898](https://github.com/nim-lang/Nim/issues/4898))- Fixed \"Threadpool doesn't work after sync\"  ([#6090](https://github.com/nim-lang/Nim/issues/6090))- Fixed \"parsecfg silently fails to store and retrieve negative integers\"  ([#6046](https://github.com/nim-lang/Nim/issues/6046))- Fixed \"async + threads:on + globals = error\"  ([#5738](https://github.com/nim-lang/Nim/issues/5738))- Fixed \"Strange behaviour when importing `locks` for use in a generic type\"  ([#6049](https://github.com/nim-lang/Nim/issues/6049))- Fixed \"js backend failed to compile try...except new syntax\"  ([#5986](https://github.com/nim-lang/Nim/issues/5986))- Fixed \"Different handling of .emit with and without native debugger\"  ([#5989](https://github.com/nim-lang/Nim/issues/5989))- Fixed \"Structure packing and alignment issue on Windows.\"  ([#4763](https://github.com/nim-lang/Nim/issues/4763))- Fixed \"ICE on discard seq.len\"  ([#6118](https://github.com/nim-lang/Nim/issues/6118))- Fixed \"ICE: genRecordField 3\"  ([#5892](https://github.com/nim-lang/Nim/issues/5892))- Fixed \"JS exportc regression?\"  ([#6096](https://github.com/nim-lang/Nim/issues/6096))- Fixed \"ReraiseError when using try/except within finally block\"  ([#5871](https://github.com/nim-lang/Nim/issues/5871))- Fixed \"Inconsistent os:standalone behavior\"  ([#6131](https://github.com/nim-lang/Nim/issues/6131))- Fixed \".cfg files (, parsecfg) and quoting\"  ([#499](https://github.com/nim-lang/Nim/issues/499))- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"  ([#6127](https://github.com/nim-lang/Nim/issues/6127))- Fixed \"Nim Tutorial doc bugs\"  ([#6125](https://github.com/nim-lang/Nim/issues/6125))- Fixed \"union type compile error..\"  ([#6016](https://github.com/nim-lang/Nim/issues/6016))- Fixed \"Failure to compile stdlib/system with VCC, C++ and threads:on on i386\"  ([#6196](https://github.com/nim-lang/Nim/issues/6196))- Fixed \"GC bug resulting in random crashes\"  ([#6234](https://github.com/nim-lang/Nim/issues/6234))- Fixed \"deque.nim: Doc says removeLast proc, but not defined \"  ([#6110](https://github.com/nim-lang/Nim/issues/6110))- Fixed \"Nim crashes when instancing with incorrect arg sintax\"  ([#5965](https://github.com/nim-lang/Nim/issues/5965))- Fixed \"Equality of OrderedTable is incorrect\"  ([#6250](https://github.com/nim-lang/Nim/issues/6250))- Fixed \"0.17.0 Regression: Statement macro from tutorial does not compile anymore\"  ([#5918](https://github.com/nim-lang/Nim/issues/5918))- Fixed \"httpclient crash when performing get request\"  ([#6284](https://github.com/nim-lang/Nim/issues/6284))- Fixed \"GC bug\"  ([#6279](https://github.com/nim-lang/Nim/issues/6279))- Fixed \"Minor typo in system.nim\"  ([#6288](https://github.com/nim-lang/Nim/issues/6288))- Fixed \"Incorrect render of GenericParams\"  ([#6295](https://github.com/nim-lang/Nim/issues/6295))- Fixed \"Wrong [XDeclaredButNotUsed] hint\"  ([#3583](https://github.com/nim-lang/Nim/issues/3583))- Fixed \"Segfault when using reorder pragma\"  ([#6306](https://github.com/nim-lang/Nim/issues/6306))- Fixed \"execvpe not available on older linux versions\"  ([#1734](https://github.com/nim-lang/Nim/issues/1734))- Fixed \"tables.`[]=`[A](t: var CountTable[A]; key: A; val: int) should support val = 0\"  ([#4366](https://github.com/nim-lang/Nim/issues/4366))- Fixed \"nimble and koch executables in win32 distribution are x64, not x86\"  ([#6147](https://github.com/nim-lang/Nim/issues/6147))- Fixed \"nim-0.17.0_x32.zip contains some 64-bit binaries\"  ([#6028](https://github.com/nim-lang/Nim/issues/6028))- Fixed \"Inherited fields are not set in some cases, using object literals\"  ([#6294](https://github.com/nim-lang/Nim/issues/6294))- Fixed \"existsEnv declared twice in develop branch ospaths and nimscript\"  ([#6327](https://github.com/nim-lang/Nim/issues/6327))", "content_with_meta": "---\ntitle: \"Version 0.17.2 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.17.2, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\nThe major new feature in this release is the support for ``.nimble-link`` files.\nThis has been added in order to support the latest Nimble version with its \"develop\" feature. For more information, see [``nimble``](https://github.com/nim-lang/nimble#nimble-develop).\n\nThis is however primarily a bug fix release, with the most important bugfixes\nincluding the long standing codegen bugs that triggered GC crashes.\nUpdating is recommended!\n\nBe sure to check out the changelog [below](#changelog) for\na comprehensive list of changes.\n\nThis release also includes version 0.8.8 of the Nimble package manager,\nbe sure to check out its\n[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)\nfor a list of changes since its last release.\n\nYou can download the latest release of Nim from the [download](download.html)\npage. If you're using [``choosenim``](https://github.com/dom96/choosenim)\nthen you can easily update to the latest version by running the following:\n\n```\n$ choosenim update stable\n```\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n- The changes made to the `do` notation parsing rules in v0.17.0 have been\nreverted.\n\n## Bugfixes\n\nThe list below has been generated based on the commits in Nim's git\nrepository. As such it lists only the issues which have been closed\nvia a commit, for a full list see\n[this link on Github](https://github.com/nim-lang/Nim/issues?utf8=%E2%9C%93&q=is%3Aissue+closed%3A%222017-05-16+..+2017-09-10%22+).\n\n- Fixed \"Fixed syslocks for ios\"\n  ([#5804](https://github.com/nim-lang/Nim/issues/5804))\n- Fixed \"OpenBSD pthread issue\"\n  ([#5920](https://github.com/nim-lang/Nim/issues/5920))\n- Fixed \"JS backend doesn't copy 'object' when adding to 'seq'\"\n  ([#4139](https://github.com/nim-lang/Nim/issues/4139))\n- Fixed \"sequtils insert produces wrong result in a case of sequence of objects in JS\"\n  ([#5933](https://github.com/nim-lang/Nim/issues/5933))\n- Fixed \"Index out of bounds error while using sets with cstring in JS\"\n  ([#5969](https://github.com/nim-lang/Nim/issues/5969))\n- Fixed \"Compiler crash when a proc marked as gcsafe moves around non-gcsafe closures\"\n  ([#5959](https://github.com/nim-lang/Nim/issues/5959))\n- Fixed \"type with packed pragma is not properly packed\"\n  ([#5824](https://github.com/nim-lang/Nim/issues/5824))\n- Fixed \"httpclient Docs Wrong\"\n  ([#5863](https://github.com/nim-lang/Nim/issues/5863))\n- Fixed \"{.async.} doesn't work with do notation\"\n  ([#5995](https://github.com/nim-lang/Nim/issues/5995))\n- Fixed \"Sigmatch error in fitting anonymous tuples to generic types\"\n  ([#5890](https://github.com/nim-lang/Nim/issues/5890))\n- Fixed \"Nested array alias type leads to compile-time and run-time bugs\"\n  ([#5962](https://github.com/nim-lang/Nim/issues/5962))\n- Fixed \"Static - Default value for static arg - Cannot instantiate\"\n  ([#5864](https://github.com/nim-lang/Nim/issues/5864))\n- Fixed \"constant of generic type becomes all zero when assigning to a local value\"\n  ([#5756](https://github.com/nim-lang/Nim/issues/5756))\n- Fixed \"User defined arithemetic in generic types\"\n  ([#5106](https://github.com/nim-lang/Nim/issues/5106))\n- Fixed \"Overloading with static[] leads to strange error\"\n  ([#5017](https://github.com/nim-lang/Nim/issues/5017))\n- Fixed \"Compiler crash\"\n  ([#2730](https://github.com/nim-lang/Nim/issues/2730))\n- Fixed \"Compiler segfaults on non-recursive code\"\n  ([#4524](https://github.com/nim-lang/Nim/issues/4524))\n- Fixed \"static[T] generic type cause `invalid type`\"\n  ([#3784](https://github.com/nim-lang/Nim/issues/3784))\n- Fixed \"Using static generic params on procs often fails to compile\"\n  ([#1017](https://github.com/nim-lang/Nim/issues/1017))\n- Fixed \"Inferring nested `static[T]` \"\n  ([#3153](https://github.com/nim-lang/Nim/issues/3153))\n- Fixed \"another static_t problem\"\n  ([#3152](https://github.com/nim-lang/Nim/issues/3152))\n- Fixed \"Generic code can cause attempts to use constructors for unrelated types to fail\"\n  ([#1051](https://github.com/nim-lang/Nim/issues/1051))\n- Fixed \"Internal Error with with static generic parameters\"\n  ([#1082](https://github.com/nim-lang/Nim/issues/1082))\n- Fixed \"Internal error with enumerable concept and map proc\"\n  ([#5968](https://github.com/nim-lang/Nim/issues/5968))\n- Fixed \"Concept - strange behaviour\"\n  ([#4020](https://github.com/nim-lang/Nim/issues/4020))\n- Fixed \"Compiler crash while wrapping concepts\"\n  ([#5127](https://github.com/nim-lang/Nim/issues/5127))\n- Fixed \"Using generic concept parameter causes stack overflow\"\n  ([#4737](https://github.com/nim-lang/Nim/issues/4737))\n- Fixed \"About ambiguous ``concept``\"\n  ([#5888](https://github.com/nim-lang/Nim/issues/5888))\n- Fixed \"Concepts don't play well with distinct primitive types, e.g. distinct float or string\"\n  ([#5983](https://github.com/nim-lang/Nim/issues/5983))\n- Fixed \"Error with generic concepts\"\n  ([#5084](https://github.com/nim-lang/Nim/issues/5084))\n- Fixed \"the `^` operator fails on floats\"\n  ([#5966](https://github.com/nim-lang/Nim/issues/5966))\n- Fixed \"Documentation: times.nim\"\n  ([#6010](https://github.com/nim-lang/Nim/issues/6010))\n- Fixed \"[Regression] Nim js crashes\"\n  ([#5946](https://github.com/nim-lang/Nim/issues/5946))\n- Fixed \"Times module compiled in JS failed to compare values\"\n  ([#6021](https://github.com/nim-lang/Nim/issues/6021))\n- Fixed \"JS: tables assignment breaks with importcpp's in scope (internal error: genAddr: nkDerefExpr)\"\n  ([#5846](https://github.com/nim-lang/Nim/issues/5846))\n- Fixed \"Object constructor violates copy semantics, allows modifying immutable [js only]\"\n  ([#4703](https://github.com/nim-lang/Nim/issues/4703))\n- Fixed \"No bounds checking in JS target?\"\n  ([#5563](https://github.com/nim-lang/Nim/issues/5563))\n- Fixed \"js: genDeref compiler crash\"\n  ([#5974](https://github.com/nim-lang/Nim/issues/5974))\n- Fixed \"JS: internal error in genDeref\"\n  ([#5379](https://github.com/nim-lang/Nim/issues/5379))\n- Fixed \"JS: compiler internal error\"\n  ([#5517](https://github.com/nim-lang/Nim/issues/5517))\n- Fixed \"JS codegen produces circular structure\"\n  ([#6035](https://github.com/nim-lang/Nim/issues/6035))\n- Fixed \"\"nim doc\" SIGSEGV when foo*(a: proc)\"\n  ([#6030](https://github.com/nim-lang/Nim/issues/6030))\n- Fixed \"Value redefinition not detected in {.pure.} enum\"\n  ([#6008](https://github.com/nim-lang/Nim/issues/6008))\n- Fixed \"unexpected option : '-o'\"\n  ([#6069](https://github.com/nim-lang/Nim/issues/6069))\n- Fixed \"Nimsuggest crashes in sempass2.useVar\"\n  ([#6067](https://github.com/nim-lang/Nim/issues/6067))\n- Fixed \"Nim compiler generates variables for discarded proc return values\"\n  ([#6037](https://github.com/nim-lang/Nim/issues/6037))\n- Fixed \"js target bug with operator +=\"\n  ([#5608](https://github.com/nim-lang/Nim/issues/5608))\n- Fixed \"Nim Tutorial (Part I) need update\"\n  ([#6062](https://github.com/nim-lang/Nim/issues/6062))\n- Fixed \"Error after codegen when shadowing template arg\"\n  ([#4898](https://github.com/nim-lang/Nim/issues/4898))\n- Fixed \"Threadpool doesn't work after sync\"\n  ([#6090](https://github.com/nim-lang/Nim/issues/6090))\n- Fixed \"parsecfg silently fails to store and retrieve negative integers\"\n  ([#6046](https://github.com/nim-lang/Nim/issues/6046))\n- Fixed \"async + threads:on + globals = error\"\n  ([#5738](https://github.com/nim-lang/Nim/issues/5738))\n- Fixed \"Strange behaviour when importing `locks` for use in a generic type\"\n  ([#6049](https://github.com/nim-lang/Nim/issues/6049))\n- Fixed \"js backend failed to compile try...except new syntax\"\n  ([#5986](https://github.com/nim-lang/Nim/issues/5986))\n- Fixed \"Different handling of .emit with and without native debugger\"\n  ([#5989](https://github.com/nim-lang/Nim/issues/5989))\n- Fixed \"Structure packing and alignment issue on Windows.\"\n  ([#4763](https://github.com/nim-lang/Nim/issues/4763))\n- Fixed \"ICE on discard seq.len\"\n  ([#6118](https://github.com/nim-lang/Nim/issues/6118))\n- Fixed \"ICE: genRecordField 3\"\n  ([#5892](https://github.com/nim-lang/Nim/issues/5892))\n- Fixed \"JS exportc regression?\"\n  ([#6096](https://github.com/nim-lang/Nim/issues/6096))\n- Fixed \"ReraiseError when using try/except within finally block\"\n  ([#5871](https://github.com/nim-lang/Nim/issues/5871))\n\n- Fixed \"Inconsistent os:standalone behavior\"\n  ([#6131](https://github.com/nim-lang/Nim/issues/6131))\n- Fixed \".cfg files (, parsecfg) and quoting\"\n  ([#499](https://github.com/nim-lang/Nim/issues/499))\n- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\n  ([#6127](https://github.com/nim-lang/Nim/issues/6127))\n- Fixed \"Nim Tutorial doc bugs\"\n  ([#6125](https://github.com/nim-lang/Nim/issues/6125))\n\n- Fixed \"union type compile error..\"\n  ([#6016](https://github.com/nim-lang/Nim/issues/6016))\n- Fixed \"Failure to compile stdlib/system with VCC, C++ and threads:on on i386\"\n  ([#6196](https://github.com/nim-lang/Nim/issues/6196))\n- Fixed \"GC bug resulting in random crashes\"\n  ([#6234](https://github.com/nim-lang/Nim/issues/6234))\n- Fixed \"deque.nim: Doc says removeLast proc, but not defined \"\n  ([#6110](https://github.com/nim-lang/Nim/issues/6110))\n- Fixed \"Nim crashes when instancing with incorrect arg sintax\"\n  ([#5965](https://github.com/nim-lang/Nim/issues/5965))\n- Fixed \"Equality of OrderedTable is incorrect\"\n  ([#6250](https://github.com/nim-lang/Nim/issues/6250))\n- Fixed \"0.17.0 Regression: Statement macro from tutorial does not compile anymore\"\n  ([#5918](https://github.com/nim-lang/Nim/issues/5918))\n\n- Fixed \"httpclient crash when performing get request\"\n  ([#6284](https://github.com/nim-lang/Nim/issues/6284))\n- Fixed \"GC bug\"\n  ([#6279](https://github.com/nim-lang/Nim/issues/6279))\n- Fixed \"Minor typo in system.nim\"\n  ([#6288](https://github.com/nim-lang/Nim/issues/6288))\n- Fixed \"Incorrect render of GenericParams\"\n  ([#6295](https://github.com/nim-lang/Nim/issues/6295))\n- Fixed \"Wrong [XDeclaredButNotUsed] hint\"\n  ([#3583](https://github.com/nim-lang/Nim/issues/3583))\n- Fixed \"Segfault when using reorder pragma\"\n  ([#6306](https://github.com/nim-lang/Nim/issues/6306))\n- Fixed \"execvpe not available on older linux versions\"\n  ([#1734](https://github.com/nim-lang/Nim/issues/1734))\n- Fixed \"tables.`[]=`[A](t: var CountTable[A]; key: A; val: int) should support val = 0\"\n  ([#4366](https://github.com/nim-lang/Nim/issues/4366))\n- Fixed \"nimble and koch executables in win32 distribution are x64, not x86\"\n  ([#6147](https://github.com/nim-lang/Nim/issues/6147))\n- Fixed \"nim-0.17.0_x32.zip contains some 64-bit binaries\"\n  ([#6028](https://github.com/nim-lang/Nim/issues/6028))\n- Fixed \"Inherited fields are not set in some cases, using object literals\"\n  ([#6294](https://github.com/nim-lang/Nim/issues/6294))\n- Fixed \"existsEnv declared twice in develop branch ospaths and nimscript\"\n  ([#6327](https://github.com/nim-lang/Nim/issues/6327))\n", "tags": ["nim", "python"], "published_at": "", "id": 39}, {"title": "Nim Community Survey 2017 Results", "slug": "community-survey-results-2017", "content": "We have recently closed the 2017 Nim Community Survey. I am happy tosay that we have received exactly 603 responses, huge thanks go to the peoplethat took the time to respond. We're incredibly thankful for this very valuablefeedback.For the results of the previous year's survey, take a look at the[2016 results analysis](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html).Our survey ran from the 23rd of June 2017 until the 14th of August 2017.The goal of this survey was to primarily determine how our community is usingNim, in order to better understand how we should be improving it. In particular,we wanted to know what people feel is missing from Nim in the lead up toversion 1.0. We have also asked our respondents about how well the Nim toolsworked, the challenges of adopting Nim, the resources that they used to learnNim and more. We repeated the survey with the same questions this year tosee how we did over the past year.Unlike in the last year, this analysis will not go over all the results. Insteadit will only go over the most interesting answers.# A word on the response countIn comparison to last year we unfortunately received 187 less responses.I suspect the reason for this decrease was the fact that we were notable to advertise the survey as well as the previous year, I got lucky last yearby sharing a link to our survey in the Rust community survey results HackerNews thread. This year Rust's results were late and so I didn't get thesame opportunity.But with that in mind I think the number of responses is still good.# Do you use Nim?Like last year we split up our respondents into three groups:* Current users of Nim* Ex-Nim users* Those that never used NimThis allowed us to ask each group specific questions. For example, weasked ex-Nim users why they've stopped using Nim.<a href=\"{{site.baseurl}}/assets/news/images/survey2017/do_you_use_nim.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/></a>This year the proportion of responses from current Nim users has grownfrom 39% to 44%, and as a result of this there is less responses from thosethat never used Nim (decrease from 37% to 30%). This is likely due toa higher proportion of responses from the Nim community.But this isn't the whole story, the number of ex-Nim users went up from 24% to26%.# Nim usersThis section includes answers from current Nim users only (44% of respondents).## How long have you been using Nim?<a href=\"{{site.baseurl}}/assets/news/images/survey2017/nim_time.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/nim_time.png\" alt=\"How long have you been using Nim?\" style=\"width:100%\"/></a>Just like last year, a large proportion of our Nim users are new. This suggeststhat our community is growing and is a good sign. On the other end of thespectrum we can see that there is a significantly higher number of Nim usersthat have been using Nim for more than 24 months.## Nim at work and project sizeThe questions related to these topics got very similar results to last year:* 57.1% of Nim users' projects are less than 1,000 lines of code.* 24.6% of Nim users' work with Nim either full-time or part-time.* 52.5% of Nim users plan to use Nim at work.### How is Nim being used at work?This was a free-form question so I will just pick out some of the common andinteresting answers. According to the respondents, Nim is used at work for:* Command-line applications* Server-side analytics* DevOps* Scientific computing* Speeding up Python### How could we help make Nim more accepted at your company?Another free-form question, I will pick out some of the things that respondentshave identified:* **Release of version 1.0 (_a common theme_)*** **Mature libraries and stability (_a common theme_)*** **Up to date documentation of every feature, with examples (_a common theme_)**  * More tutorials and videos* Enhance the stdlib, it needs to be more complete* Corporate sponsor* Visual Studio plugin* Lowering the barrier to entry for working with cross-compilers and interop  with C* Free book* Compelling use cases* Porting to ARM cortex M (_already done?_)* \"change cocky logo\"* More informative errors* Lockfile support* Interfaces* More data processing tools* GUI creator for Windows* \"idk lol\"## Nim and its toolsIn this section of the survey, we wanted to find out the tools that Nim users are utilising when developing Nim applications.### What editor(s) do you use when writing Nim?Programmers swear by their editors. What does the Nim community prefer?<a href=\"{{site.baseurl}}/assets/news/images/survey2017/editors_used.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/></a>There is still a large number of Vim users, but now they are overwhelmed bythe Visual Studio Code users. VS Code has gone from 16.5% to 35.5%!### Operating systems, Nim version and Nim code breakageAgain, the results for these questions are very similar to last year. I willsimply provide a summary:* Linux is still the most popular development platform, with Windows second and  macOS third.* The same is true for the target platform. But in addition to this, a large  19% of respondents are targeting Android, 16.7% are targeting JavaScript,  10.5% are targeting iOS and 10.1% are targeting embedded platforms.* The current release of Nim (0.17.0) is the most used at 68.8%, with Git HEAD  second at 33.1%.* 52.2% of respondent's code was never broken by a Nim upgrade.* Of those whose code was broken, for 29.3% of the respondent's it was little  work to fix.### Install methodWe wanted to find out how users are installing Nim. In particular I wanted tofind out whether ``choosenim`` was getting adopted.<a href=\"{{site.baseurl}}/assets/news/images/survey2017/install_method.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/install_method.png\" alt=\"Installation method\" style=\"width:100%\"/></a>It seems that the majority are still in fact installing Nim by cloning theNim repo manually. This makes sense as Nim is still evolving quickly, formost people it makes sense to stay on the bleeding edge.### What critical libraries are missing in the Nim ecosystem?This is a good list of projects for the Nim community to take up. The respondent'swere asked to freely give libraries that they need, here are their (mostly raw)answers (duplicates left in to show popularity):* High-level HTTP library (like \"requests\" in Python)* First-class libraries rather than C wrappers.* Bass audio library* Distributed computing libraries* REPL* Stabilsing async libraries* Rails-like framework, ORM, webdriver, Electron-like thing* KD-Tree, Blas/Lapack* Qt GUI bindings* Excel XLSX Read/Write* Pandas-like, more statistical libraries* Linear algebra, plotting, science* UI* Simple gui, like tkinter or wxwidgets.* Db/queues high level connectors* Pandas like dataframes, a well documented web framework, ORM* Gui* html5 parser* excel reader, dataframe. numpy/scipy-like scientific calculation lib.* python2nim converter* OpenPGP* Easier way to add a language backend* parsing* multithreaded web framework* embedded I/O  * I think the libraries are there but the documentation is abit lacking.* oracle oci* Kerberos auth library (c wrapping), pandas like lib (there is one more features will be nice)* native support for big numbers* iterutils, date (native nim excluding time, usable at compile time in const), asyncdb* a wysiwyg for guis* cancelable async timers, gui, random, collections (unified), and would be nice to redesign the whole stdlib* Android support* OpenGL, Vulkan (all API for game development)* Maybe theese exists already but for network equipment SSH, Expect tooling I'd love, and also parsing of config    files libraries.* Interfaces* Lib to make working with dates and times more easy, like pytz for Python.* I'm always amazed at how complete the standard lib for such a (still) small  project; more libs for data   processing would be great (Neo seems to be a very good start)* GUI, I would like Qt* orm* Machine Learning, Pandas-like* More object oriented paradigms, especially interfaces, that is a languageconstruct informing you that you forgot to implement a function required toconform to an interface, it doesn't really need to be a \"classic\" example, because i know Nim developers think out of the box (I love the vtable system, which is not tied to a particular class ;) )* Machine learning and scientific computing libraries* Qt bindings* Thrift, Cassandra drivers, Scientific computing* scientific plotting* GUI, Matrix works* I like the libs, but I wish there was a wrapper for the steamsdk from Valve.* The only thing that i've been missing so far as a good ORM for working with  relational data in an Object Oriented manner. I always want to help improve the MongoDb driver.* Numerical/scientific computing (features like Numpy/Scipy)* CGAL, Boost, Qt* simple cross-platform UI* fltk (for me personally), pandas like lib* wrapper of Microsoft RPC (rpc4), easy to use Windows GUI* concurrent data structures* more trees: tries, quad/octrees, more macro utilities* Maybe something more related to scientific computing (linalg libraries, etc.)* Self aligned SIMD vector types.* A database driver for Cassandra* Better redis client* It would be good to have some sort of GUI support* Built in efficient vec2/3/4 types, everyone duplicates that* compile time reflection* websockets* I'd like to see a Nim implementation of multiformats and other IPFS technologies* Although there are libraries, better support for linear algebra/scientific  computing/data plotting would be very nice. Similarly, a standardized game  library would be wonderful.* Numerical computing/Data Science tools* Standard and production-ready async support* More GUI and networking suppport* multithreading* GUI* web framework* charting/plotting libraries, numerical libraries, graphics libraries...some  of these exist or can easily be created by binding to C or C++, but that  is hard for a noobie, so perhaps better doc in that area with frequent  examples would help* A good cross platform graphics library and a UI library built on top of it,  but I'm intending to start working on these in the future as open source projects (based on OpenGL).* Fast low level socket library (epool, kqueue)* modern GUI library* opengl* gui library* a scientific math and plotting library* numerics. Gui wrapper (ngtk is nice). for me personally, geospatial and image processing libraries* a matplotlib equivalent* Pure Nim database libraries; Libraries for common HTTP I/O (files, chunked transfers, etc.)### What development tools can make you more productive when working with Nim?Summarising again:* Debugger (_very common theme_)* Documentation* Various IDE plugins (IntelliJ, Visual Studio)* Better cross-compiler support# Previous Nim users## How long did you use Nim before you stopped?<a href=\"{{site.baseurl}}/assets/news/images/survey2017/ex_length.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/ex_length.png\" alt=\"How long did you use Nim before you stopped?\" style=\"width:100%\"/></a>This question is new. It shows that ex-Nim users are fairly equally distributedbased on the amount of time they used Nim before deciding to stop.## Reasons why respondents stopped using NimThis was a free-form question. Some of the common answers were as follows:* Lack of time (_this is actually a very common reason_)* No good editor support* Lack of stability/maturity* No killer use case* Nim is a running target* Metaprogramming too unstableHere are some other interesting reasons:* Compiler doesn't conform to Unix traditions and outputs HUGE binaries.* Lack of ``GOTO``.* Nim generated broken C code.* \"I found myself working on the compiler instead of using the language.\"* \"proc and echo are weird, I think that def and print are better\"* \"really dislike the fact that if you do import foo you get a lot of new  names in your namespace and sometimes have to exclude; find Python's explicit  approach much more robust and clear.\"* \"Compiler doesn't conform to Unix traditions and outputs HUGE binaries.\"* \"Changes to the core libraries to rely too much on exceptions. I don't like exceptions.\"# Non-users of Nim## Reasons for not using NimAs with the previous year, the most popular answer to this question wasonce again to do with maturity of Nim as well as lack of libraries and goodIDE support.There were also a number of free-form answers to this question:* GC* Small user base* Dislikes significant whitespace* No corporate backing* Waiting for 1.0* Unpredictable performance (according to the respondent Go has predictable  performance behaviours whereas Nim doesn't)* Language appears overcomplicated* Uncertainty about future* Just waiting for free time# Nim's future## What improvements are needed before v1.0 can be released?This received a number of free-form answers which I will outline here:* **Documentation*** **It's ready now!*** Getting rid of warts that HN/Reddit comments about* Get rid of forward declarations* Improve error messages* Concepts* Improve stdlib## Which direction should Nim's GC/Memory management take?<a href=\"{{site.baseurl}}/assets/news/images/survey2017/gc_direction.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/gc_direction.png\" alt=\"Which direction should Nim's GC/Memory management take?\" style=\"width:100%\"/></a>There was a number of free-form answers as well. Most of them spoke aboutproviding all approaches, i.e. the \"have the cake and eat it too\" approach.Many are conscious of the fact that a GC makes programmingsmoother so they don't want the Rust model, but for use cases where it'snecessary they do want it.## Last wordsLike last year, at the end of the survey we gave our respondents a chance tospeak their mindabout anything they wish, with a simple question: \"Anything else you'd liketo tell us?\"There was a lot of great feedback given in this question from people whoobviously really care deeply about Nim. There is too much to outline here,but rest assurred that we will take it all into account and do our best toact on it.In addition to feedback, we were also overwhelmed by the amount of positivecomments in the answers to thisquestion. There was a lot of support from the community thanking us for ourwork and determination.I'll let some quotes speak for themselves:<blockquote>Keep up the good job. I love Nim!</blockquote><blockquote>Great work so far, keep it going!</blockquote><blockquote>Please just keep up the excelent work. Nim is awesome!</blockquote><blockquote>Awesome language, and great community!</blockquote>Our community is truly brilliant. We thank each and every one of you forfilling out this survey and hope that you will help us tackle some of thechallenges that face Nim.This survey was a good place to give us feedback, but please don't wait forthe next one. We are always looking to hear more from you and we hope that youwill participate in discussions relating to this survey as well the futureof Nim.Thanks for reading, and have a good day!", "content_with_meta": "---\ntitle: \"Nim Community Survey 2017 Results\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe have recently closed the 2017 Nim Community Survey. I am happy to\nsay that we have received exactly 603 responses, huge thanks go to the people\nthat took the time to respond. We're incredibly thankful for this very valuable\nfeedback.\n\nFor the results of the previous year's survey, take a look at the\n[2016 results analysis](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html).\n\nOur survey ran from the 23rd of June 2017 until the 14th of August 2017.\nThe goal of this survey was to primarily determine how our community is using\nNim, in order to better understand how we should be improving it. In particular,\nwe wanted to know what people feel is missing from Nim in the lead up to\nversion 1.0. We have also asked our respondents about how well the Nim tools\nworked, the challenges of adopting Nim, the resources that they used to learn\nNim and more. We repeated the survey with the same questions this year to\nsee how we did over the past year.\n\nUnlike in the last year, this analysis will not go over all the results. Instead\nit will only go over the most interesting answers.\n\n# A word on the response count\n\nIn comparison to last year we unfortunately received 187 less responses.\nI suspect the reason for this decrease was the fact that we were not\nable to advertise the survey as well as the previous year, I got lucky last year\nby sharing a link to our survey in the Rust community survey results Hacker\nNews thread. This year Rust's results were late and so I didn't get the\nsame opportunity.\n\nBut with that in mind I think the number of responses is still good.\n\n\n# Do you use Nim?\n\nLike last year we split up our respondents into three groups:\n\n* Current users of Nim\n* Ex-Nim users\n* Those that never used Nim\n\nThis allowed us to ask each group specific questions. For example, we\nasked ex-Nim users why they've stopped using Nim.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/do_you_use_nim.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>\n</a>\n\nThis year the proportion of responses from current Nim users has grown\nfrom 39% to 44%, and as a result of this there is less responses from those\nthat never used Nim (decrease from 37% to 30%). This is likely due to\na higher proportion of responses from the Nim community.\n\nBut this isn't the whole story, the number of ex-Nim users went up from 24% to\n26%.\n\n# Nim users\n\nThis section includes answers from current Nim users only (44% of respondents).\n\n## How long have you been using Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/nim_time.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/nim_time.png\" alt=\"How long have you been using Nim?\" style=\"width:100%\"/>\n</a>\n\nJust like last year, a large proportion of our Nim users are new. This suggests\nthat our community is growing and is a good sign. On the other end of the\nspectrum we can see that there is a significantly higher number of Nim users\nthat have been using Nim for more than 24 months.\n\n## Nim at work and project size\n\nThe questions related to these topics got very similar results to last year:\n\n* 57.1% of Nim users' projects are less than 1,000 lines of code.\n* 24.6% of Nim users' work with Nim either full-time or part-time.\n* 52.5% of Nim users plan to use Nim at work.\n\n### How is Nim being used at work?\n\nThis was a free-form question so I will just pick out some of the common and\ninteresting answers. According to the respondents, Nim is used at work for:\n\n* Command-line applications\n* Server-side analytics\n* DevOps\n* Scientific computing\n* Speeding up Python\n\n### How could we help make Nim more accepted at your company?\n\nAnother free-form question, I will pick out some of the things that respondents\nhave identified:\n\n* **Release of version 1.0 (_a common theme_)**\n* **Mature libraries and stability (_a common theme_)**\n* **Up to date documentation of every feature, with examples (_a common theme_)**\n  * More tutorials and videos\n* Enhance the stdlib, it needs to be more complete\n* Corporate sponsor\n* Visual Studio plugin\n* Lowering the barrier to entry for working with cross-compilers and interop\n  with C\n* Free book\n* Compelling use cases\n* Porting to ARM cortex M (_already done?_)\n* \"change cocky logo\"\n* More informative errors\n* Lockfile support\n* Interfaces\n* More data processing tools\n* GUI creator for Windows\n* \"idk lol\"\n\n## Nim and its tools\n\nIn this section of the survey, we wanted to find out the tools that Nim users are utilising when developing Nim applications.\n\n### What editor(s) do you use when writing Nim?\n\nProgrammers swear by their editors. What does the Nim community prefer?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/editors_used.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/>\n</a>\n\nThere is still a large number of Vim users, but now they are overwhelmed by\nthe Visual Studio Code users. VS Code has gone from 16.5% to 35.5%!\n\n### Operating systems, Nim version and Nim code breakage\n\nAgain, the results for these questions are very similar to last year. I will\nsimply provide a summary:\n\n* Linux is still the most popular development platform, with Windows second and\n  macOS third.\n* The same is true for the target platform. But in addition to this, a large\n  19% of respondents are targeting Android, 16.7% are targeting JavaScript,\n  10.5% are targeting iOS and 10.1% are targeting embedded platforms.\n* The current release of Nim (0.17.0) is the most used at 68.8%, with Git HEAD\n  second at 33.1%.\n* 52.2% of respondent's code was never broken by a Nim upgrade.\n* Of those whose code was broken, for 29.3% of the respondent's it was little\n  work to fix.\n\n### Install method\n\nWe wanted to find out how users are installing Nim. In particular I wanted to\nfind out whether ``choosenim`` was getting adopted.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/install_method.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/install_method.png\" alt=\"Installation method\" style=\"width:100%\"/>\n</a>\n\nIt seems that the majority are still in fact installing Nim by cloning the\nNim repo manually. This makes sense as Nim is still evolving quickly, for\nmost people it makes sense to stay on the bleeding edge.\n\n\n### What critical libraries are missing in the Nim ecosystem?\n\nThis is a good list of projects for the Nim community to take up. The respondent's\nwere asked to freely give libraries that they need, here are their (mostly raw)\nanswers (duplicates left in to show popularity):\n\n* High-level HTTP library (like \"requests\" in Python)\n* First-class libraries rather than C wrappers.\n* Bass audio library\n* Distributed computing libraries\n* REPL\n* Stabilsing async libraries\n* Rails-like framework, ORM, webdriver, Electron-like thing\n* KD-Tree, Blas/Lapack\n* Qt GUI bindings\n* Excel XLSX Read/Write\n* Pandas-like, more statistical libraries\n* Linear algebra, plotting, science\n* UI\n* Simple gui, like tkinter or wxwidgets.\n* Db/queues high level connectors\n* Pandas like dataframes, a well documented web framework, ORM\n* Gui\n* html5 parser\n* excel reader, dataframe. numpy/scipy-like scientific calculation lib.\n* python2nim converter\n* OpenPGP\n* Easier way to add a language backend\n* parsing\n* multithreaded web framework\n* embedded I/O\n  * I think the libraries are there but the documentation is abit lacking.\n* oracle oci\n* Kerberos auth library (c wrapping), pandas like lib (there is one more features will be nice)\n* native support for big numbers\n* iterutils, date (native nim excluding time, usable at compile time in const), asyncdb\n* a wysiwyg for guis\n* cancelable async timers, gui, random, collections (unified), and would be nice to redesign the whole stdlib\n* Android support\n* OpenGL, Vulkan (all API for game development)\n* Maybe theese exists already but for network equipment SSH, Expect tooling I'd love, and also parsing of config    files libraries.\n* Interfaces\n* Lib to make working with dates and times more easy, like pytz for Python.\n* I'm always amazed at how complete the standard lib for such a (still) small\n  project; more libs for data   processing would be great (Neo seems to be a very good start)\n* GUI, I would like Qt\n* orm\n* Machine Learning, Pandas-like\n* More object oriented paradigms, especially interfaces, that is a language\nconstruct informing you that you forgot to implement a function required to\nconform to an interface, it doesn't really need to be a \"classic\" example,\n because i know Nim developers think out of the box (I love the vtable\n system, which is not tied to a particular class ;) )\n* Machine learning and scientific computing libraries\n* Qt bindings\n* Thrift, Cassandra drivers, Scientific computing\n* scientific plotting\n* GUI, Matrix works\n* I like the libs, but I wish there was a wrapper for the steamsdk from Valve.\n* The only thing that i've been missing so far as a good ORM for working with\n  relational data in an Object Oriented manner. I always want to help improve the MongoDb driver.\n* Numerical/scientific computing (features like Numpy/Scipy)\n* CGAL, Boost, Qt\n* simple cross-platform UI\n* fltk (for me personally), pandas like lib\n* wrapper of Microsoft RPC (rpc4), easy to use Windows GUI\n* concurrent data structures\n* more trees: tries, quad/octrees, more macro utilities\n* Maybe something more related to scientific computing (linalg libraries, etc.)\n* Self aligned SIMD vector types.\n* A database driver for Cassandra\n* Better redis client\n* It would be good to have some sort of GUI support\n* Built in efficient vec2/3/4 types, everyone duplicates that\n* compile time reflection\n* websockets\n* I'd like to see a Nim implementation of multiformats and other IPFS technologies\n* Although there are libraries, better support for linear algebra/scientific\n  computing/data plotting would be very nice. Similarly, a standardized game\n  library would be wonderful.\n* Numerical computing/Data Science tools\n* Standard and production-ready async support\n* More GUI and networking suppport\n* multithreading\n* GUI\n* web framework\n* charting/plotting libraries, numerical libraries, graphics libraries...some\n  of these exist or can easily be created by binding to C or C++, but that\n  is hard for a noobie, so perhaps better doc in that area with frequent\n  examples would help\n* A good cross platform graphics library and a UI library built on top of it,\n  but I'm intending to start working on these in the future as open source projects (based on OpenGL).\n* Fast low level socket library (epool, kqueue)\n* modern GUI library\n* opengl\n* gui library\n* a scientific math and plotting library\n* numerics. Gui wrapper (ngtk is nice). for me personally, geospatial and image processing libraries\n* a matplotlib equivalent\n* Pure Nim database libraries; Libraries for common HTTP I/O (files, chunked transfers, etc.)\n\n### What development tools can make you more productive when working with Nim?\n\nSummarising again:\n\n* Debugger (_very common theme_)\n* Documentation\n* Various IDE plugins (IntelliJ, Visual Studio)\n* Better cross-compiler support\n\n# Previous Nim users\n\n## How long did you use Nim before you stopped?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/ex_length.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/ex_length.png\" alt=\"How long did you use Nim before you stopped?\" style=\"width:100%\"/>\n</a>\n\nThis question is new. It shows that ex-Nim users are fairly equally distributed\nbased on the amount of time they used Nim before deciding to stop.\n\n## Reasons why respondents stopped using Nim\n\nThis was a free-form question. Some of the common answers were as follows:\n\n* Lack of time (_this is actually a very common reason_)\n* No good editor support\n* Lack of stability/maturity\n* No killer use case\n* Nim is a running target\n* Metaprogramming too unstable\n\nHere are some other interesting reasons:\n\n* Compiler doesn't conform to Unix traditions and outputs HUGE binaries.\n* Lack of ``GOTO``.\n* Nim generated broken C code.\n* \"I found myself working on the compiler instead of using the language.\"\n* \"proc and echo are weird, I think that def and print are better\"\n* \"really dislike the fact that if you do import foo you get a lot of new\n  names in your namespace and sometimes have to exclude; find Python's explicit\n  approach much more robust and clear.\"\n* \"Compiler doesn't conform to Unix traditions and outputs HUGE binaries.\"\n* \"Changes to the core libraries to rely too much on exceptions. I don't like exceptions.\"\n\n# Non-users of Nim\n\n## Reasons for not using Nim\n\nAs with the previous year, the most popular answer to this question was\nonce again to do with maturity of Nim as well as lack of libraries and good\nIDE support.\n\nThere were also a number of free-form answers to this question:\n\n* GC\n* Small user base\n* Dislikes significant whitespace\n* No corporate backing\n* Waiting for 1.0\n* Unpredictable performance (according to the respondent Go has predictable\n  performance behaviours whereas Nim doesn't)\n* Language appears overcomplicated\n* Uncertainty about future\n* Just waiting for free time\n\n# Nim's future\n\n## What improvements are needed before v1.0 can be released?\n\nThis received a number of free-form answers which I will outline here:\n\n* **Documentation**\n* **It's ready now!**\n* Getting rid of warts that HN/Reddit comments about\n* Get rid of forward declarations\n* Improve error messages\n* Concepts\n* Improve stdlib\n\n## Which direction should Nim's GC/Memory management take?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2017/gc_direction.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2017/gc_direction.png\" alt=\"Which direction should Nim's GC/Memory management take?\" style=\"width:100%\"/>\n</a>\n\n\nThere was a number of free-form answers as well. Most of them spoke about\nproviding all approaches, i.e. the \"have the cake and eat it too\" approach.\nMany are conscious of the fact that a GC makes programming\nsmoother so they don't want the Rust model, but for use cases where it's\nnecessary they do want it.\n\n## Last words\n\nLike last year, at the end of the survey we gave our respondents a chance to\nspeak their mind\nabout anything they wish, with a simple question: \"Anything else you'd like\nto tell us?\"\n\nThere was a lot of great feedback given in this question from people who\nobviously really care deeply about Nim. There is too much to outline here,\nbut rest assurred that we will take it all into account and do our best to\nact on it.\n\nIn addition to feedback, we were also overwhelmed by the amount of positive\ncomments in the answers to this\nquestion. There was a lot of support from the community thanking us for our\nwork and determination.\n\nI'll let some quotes speak for themselves:\n\n<blockquote>Keep up the good job. I love Nim!</blockquote>\n<blockquote>Great work so far, keep it going!</blockquote>\n<blockquote>Please just keep up the excelent work. Nim is awesome!</blockquote>\n<blockquote>Awesome language, and great community!</blockquote>\n\nOur community is truly brilliant. We thank each and every one of you for\nfilling out this survey and hope that you will help us tackle some of the\nchallenges that face Nim.\n\nThis survey was a good place to give us feedback, but please don't wait for\nthe next one. We are always looking to hear more from you and we hope that you\nwill participate in discussions relating to this survey as well the future\nof Nim.\n\nThanks for reading, and have a good day!\n", "tags": ["nim", "python"], "published_at": "", "id": 40}, {"title": "documentation profiling and debugging", "slug": "documenting-profiling-and-debugging-nim-code", "content": "= A guide to documenting, profiling and debugging Nim code:figure-caption: Figure 1.:listing-caption: Listing 1.:table-caption: Table 1.:numbered::toc: left.Nim in Action****+++<table class=\"hackytable\">  <tr>  <td width=\"200px\">  <img src=\"https://nim-lang.org/assets/img/nim_in_action_cover.jpg\"/>  </td>  <td style=\"padding-left: 10pt;\">+++This small guide was originally written forhttps://book.picheta.me[Nim in Action]. It didn't end up in the bookdue to size constraints. Nim in Action is written in a similarstyle to this guide, check it out for more in-depth information about theNim programming language..DiscountTIP: Get 37% off Nim in Action with code `fccpicheta`.+++</td></tr></table>+++****This guide will discuss some of the useful tools for documenting, profilingand debugging Nim code. Some of the things you will be introduced to include:* The reStructuredText language which is used in Nim's doc comments* The Nim performance and memory usage profiler* Using GDB/LLDB with NimBe sure to have a Nim compiler ready and follow along with the instructionsin this guide to get the most out of it.== Documenting your codeCode documentation is important. It explains details about software whichmay not be immediately apparent when looking at the API of libraries or eventhe software's source code.There are many ways to document code. You like already know that,like many programming languages, Nim supports comments. Comments act asan annotation for source code, a way to make code easier to understand.In Nim a single-line comment is delimited by a hash character `&#35;`.Multi-line comments can be delimited by `&#35;[` and `]&#35;`.<<list_1_1,Listing 1.1>> shows an example of both.[[list_1_1]].Comments in Nim```nimvar x = 5 # Assign 5 to x.#[multi-  line      <1>  comment]#```<1> This syntax is still relatively new and so most syntax highlighters    are not aware of it.Nim also supports a special type of comment, called a documentation comment.This type of comment is processed by Nim's documentation generator. Any commentusing two hash characters `&#35;&#35;` is a documentation comment.[[list_1_2]].Example showing a simple documentation comment```nim## This is a *documentation comment* for module ``test``.```<<list_1_2,Listing 1.2>> shows a very simple documentation comment.The Nim compilerincludes a command to generate documentation for a given module. Save the codein <<list_1_2,Listing 1.2>> as `test.nim` somewhere on your file system thenexecute `nim doc test.nim`. A `test.html` file should be produced besideyour `test.nim` file. Open it in your favourite web browser to see thegenerated HTML. You should see something similar to the screenshot in<<fig_1_1,figure 1.1>>.[[fig_1_1]].HTML documentation for the `test.nim` moduleimage::ch05_docgen.png[]Note the different styles of text seen in the screenshot. The text\"documentation comment\" is in italics because it is surrounded by asterisks(`*`) in the doc comment. The \"test\" is surrounded by two backticks which makesthe font monospaced, useful when talking about identifiers such as variablenames.These special delimiters are part of the reStructuredText markup languagewhich the documentation generator supports.The documentation generator reads the file you specify on the command-line,it finds all the documentation comments and then goes through each of them.Each documentation comment is parsed using areStructuredText parser. The documentation generator then generates HTMLbased on the reStructuredText markup that it parses.<<table_1_1,Table 1.1>> shows some example syntax of the reStructuredTextmarkup language.[[table_1_1]].reStructuredText syntax examples[options=\"header\"]|===| Syntax | Result | Usage| `\\*italics*` | _italics_ | Emphasising words weakly| `\\\\**bold**` | *bold* | Emphasising words strongly| `\\``monospace``` | `monospace` | Identifiers: variable, procedure, etc. names.| ``HyperLink <\\http://google.com>`_` | http://google.com[HyperLink] | Linking to other web pages.a|``Heading +======= +``a|image:ch05_rst_heading.png[,120]| The `=` can be any punctuation character, heading levels are determined fromsuccession of headings.|`.. code-block:: nim` ++++<pre>  echo(\"Hello World\")</pre>+++a|``echo(\"Hello World\")``| To show some example code. This will add syntax highlighting to the codespecified.|===For a more comprehensive reference take a look at the following link:http://sphinx-doc.org/rest.htmlLet me show you another example.[[list_1_3]].Different placements of doc comments```nim## This is the best module in the world.## We have a lot of documentation!###### Examples## ========#### Some examples will follow:###### Adding two numbers together## ---------------------------#### .. code-block:: nim####   doAssert add(5, 5) == 10##proc add*(a, b: int): int =  ## Adds integer ``a`` to integer ``b`` and returns the result.  return a + b```[[fig_1_2]].The resulting documentation for <<list_1_3,listing 1.3>>image::ch05_math_docs.png[]As you can see from the example in <<list_1_3,listing 1.3>>,documentation commentscan be placed in many places. They can be in the global scope or locally undera procedure. Doc comments under a procedure document what that procedure does,the Nim documentation generator generates a listing of all procedures thatare exported in a module, the ones that have documentation comments will displaythem underneath as shown in <<fig_1_2,figure 1.2>>.This is how the Nim standard library is documented. For more examples on howto document your code you should take a lookhttps://github.com/nim-lang/Nim/tree/devel/lib/pure[its source code].== Profiling your codeProfiling an application is the act of analysing it at runtime to determinewhat it spends its time doing. For example, in which procedures it spendsmost of its time, or how many times each procedure is called.These measurements help to find areas of code which need optimisation.Occasionally they can also help you find bugs in your application.There is a large amount of profilers available for the Nim programming language.This may come as a surprise because Nim is a relatively newlanguage. The fact is that most of these profilers have not been createdspecifically for Nim but for C. C profilers supportNim applications because Nim compiles to C. There are only a fewthings that you need to know to take advantage of such profilers.There is one profiler that is actually included with the Nim compiler, it isso far the only profiler designed for profiling Nim applications. Let's takea look at it before moving to the C profilers.=== Profiling with nimprofThe Embedded Stack Trace Profiler (ESTP), or sometimes just called NimProf, isa Nim profiler included with the standard Nim distribution. To activate thisprofiler you only need to follow the following steps:1. Import the `nimprof` module in your program's main Nim module (the one youwill be compiling),2. Compile your program with the `--profiler:on` and `stacktrace:on` flags.3. Run your program as usual..Application speedNOTE: As a result of the profiling your application will run slower, this is      because the profiler needs to analyse your application's execution at      runtime which has an obvious overhead.Consider the following code listing.[[listing_1_4]].A simple profiler example```nimimport nimprof <1>import strutils <2>proc ab() =  echo(\"Found letter\")proc num() =  echo(\"Found number\")proc diff() =  echo(\"Found something else\")proc analyse(x: string) =  var i = 0  while true:    case x[i] <3>    of Letters: ab()    of {'0' .. '9'}: num()    of '\\0': break <4>    else: diff()    i.incfor i in 0 .. 10000: <5>  analyse(\"uyguhijkmnbdv44354gasuygiuiolknchyqudsayd12635uha\")```<1> The `nimprof` module is essential in order for the profiler to work.<2> The `strutils` module defines the `Letters` set.<3> Each character in the string `x` is iterated over, if a character is a    letter then `ab` is called, if it's a number then `num` is called, and    if it's something else then `diff` is called.<4> The `\\0` signifies the end of the string, we break out of the loop here.<5> We perform the analysis 10 thousand times in order to let the profiler    measure reliably.Save it as `main.nim`, then compile it by executing`nim c --profiler:on --stacktrace:on main.nim`. The example should compilesuccessfully. You may then run it. After the program has finished executingyou should see a message similar to \"writing profile_results.txt...\" appearin your terminal window.The `main` program should create a `profile_results.txt` file in your currentworking directory. The file's contents should be similar to those in<<listing_1_5,listing 1.5>>.[[listing_1_5]].The profiling results```total executions of each stack trace:Entry: 1/4 Calls: 89/195 = 45.64% [sum: 89; 89/195 = 45.64%]  analyse 192/195 = 98.46%  main 195/195 = 100.00%Entry: 2/4 Calls: 83/195 = 42.56% [sum: 172; 172/195 = 88.21%]  ab 83/195 = 42.56%  analyse 192/195 = 98.46%  main 195/195 = 100.00%Entry: 3/4 Calls: 20/195 = 10.26% [sum: 192; 192/195 = 98.46%]  num 20/195 = 10.26%  analyse 192/195 = 98.46%  main 195/195 = 100.00%Entry: 4/4 Calls: 3/195 = 1.54% [sum: 195; 195/195 = 100.00%]  main 195/195 = 100.00%```While the application is running the profiler takes multiple snapshots of theline of code that is currently being executed. It notes the stack trace whichtells it how the application ended up executing that piece of code. The mostcommon code paths are then reported in `profile_results.txt`.In the report shown in <<listing_1_5,listing 1.5>>,the profiler has made 195 snapshots.It found that the line of code being executed was inside the `analyse`procedure in 45.64% of those snapshots. In 42.56% of those snapshots it wasin the `ab` procedure, this makes sense because the string passed to`analyse` is mostly made up of letters. Numbers are less popular and sothe execution of the `num` procedure only makes up 10.26% of those snapshots.The profiler did not pick up any calls to the `diff` procedure because thereare no other characters in the `x` string. Try adding some punctuation tothe string passed to the `analyse` procedure and you will find that theprofiler results then show the `diff` procedure.It is easy to determine where the bulk of the processing takes place in<<listing_1_4,listing 1.4>> without the use of a profiler.But for more complex modulesand applications the Nim profiler is great for determining whichprocedures are most used..Memory usageTIP: The Nim profiler can also be used for measuring memory usage, simply     compile your application with the `--profiler:off`, `--stackTrace:on`,     and `-d:memProfiler` flags.=== Profiling with ValgrindUnfortunately in some cases profilers are not cross-platform. Valgrind isone of those cases, if you are a Windows userthen I'm afraid you will not be able to use it.Valgrind is not just a profiler, it is primarily a tool for memory debuggingand memory leak detection. The profiler component is called Callgrind and itanalyses procedures that your application calls and what those procedures thencall and so on. An application called KCacheGrind can visualise output fromCallgrind..Installing ValgrindNOTE: To follow along with the examples here you will need to install the      Valgrind tool together with KCacheGrind. There is a chance these tools      are already installed on your operating system if you are using Linux.      On Mac OS X you can easily install them using Homebrew, just execute      `brew install valgrind QCacheGrind`.Let's try Valgrind on the example application in <<listing_1_4,listing 1.4>>.First recompile theapplication without any flags by running `nim c main`. Youwill need to comment out the `import nimprof` line in your `main.nim` fileto do this successfully.You may then execute the followingcommand to run this application underValgrind: `valgrind --tool=callgrind -v ./main`The callgrind tool adds an even bigger overhead than the Nim profiler so youmay need to terminate the application, you can safely do so by pressingthe Control and C keys together.The textual output given by the callgrind tool is very large and so lookingat it all in a text editor is impractical. Thankfully a tool exists toallow us to explore it visually. This tool is called KCacheGrind (QCacheGrindon Mac OS X). You can execute it in the directory where you executed Valgrindto get something similar to the screenshot in <<figure_1_3,figure 1.3>>.[[figure_1_3]].QCacheGrind showing the call graph of <<listing_1_4,listing 1.4>>image::ch05_qcachegrind.png[]The results of the Callgrind tool show many more calls during the lifetime of<<listing_1_4,listing 1.4>>. This is because many of the Cfunctions, which have been defined by Nim, during the translation to Care now visible. These functions are necessary to implement the behaviour ofthe code in <<listing_1_4,listing 1.4>>.The C function which is selected in the screenshots corresponds to the`analyse` Nim procedure. Procedures' names undergo a process called namemangling when translated to C functions, this prevents clashes between otherC functions. The name mangling process currently just adds an underscorefollowed by a number to the C function name. Thankfully figuring out whichC functions correspond to which Nim procedures is still easy.The output from Callgrind gives you more low-level details about theexecution of your Nim applications. <<figure_1_3,Figure 1.3>> shows thenumber of timesevery single C function has been executed, it allows you to diagnose performanceproblems which may be outside your control. But with greater power comesgreater complexity so Valgrind has a higher learning curve than the Nimprofiler.== Debugging Nim codeDebugging is one of the most important activities in software development.Bugs in software occur inadvertantly. When a user reports an issue withyour software, how do you fix it?The first step is to reproduce the issue. After that debugging tools help todiagnose the issue and to figure out its root cause.Nim does many things to make debugging as easy as possible. For example itensures that detailed and easy to understand stack traces are reportedwhenever your application crashes. Consider the following code in<<listing_1_6,listing 1.6>>.[[listing_1_6]].A simple calculator```nimimport strutils <1>let line = stdin.readLine() <2>let result = line.parseInt + 5 <3>echo(line, \" + 5 = \", result) <4>```<1> The `strutils` module defines the `parseInt` procedure.<2> Read a line from the standard input.<3> The string `line` is converted into an integer, the number 5 is thenadded to that integer.<4> Display the result of the calculation.This code is fairly simple. It reads a line of text from the standard input,converts this line into an integer, adds the number 5 to it and displaysthe result. Save this code as `adder.nim` and compile it by executing`nim c adder.nim`, then execute the resulting binary. The program willwait for your input, once you type in a number you will see the sum of 5and the number you typed in. But what happens when you don't type in a number?Type in some text and observe the results. You should see something similarto the output in <<listing_1_7,listing 1.7>> below.[[listing_1_7]].Stack trace for a `ValueError` exception```Traceback (most recent call last)adder.nim(3)             adder <1>strutils.nim             parseInt <2>Error: unhandled exception: invalid integer: some text [ValueError] <3>```<1> The program was executing line 3 in the `adder` module...<2> ... followed by the `parseInt` procedure which raised the `ValueError`exception.<3> This is the exception message followed by the exception type in    square brackets.The program crashed because an exception was raised and it was not caughtby any `try` statements. This resulted in a stack trace being displayed andthe program exiting. The stack trace in <<listing_1_7,listing 1.7>> isvery informative,it leads directly to the line which caused the crash. After the `adder.nim`module name, the number `3` points to the line numberin the `adder` module. This line is highlighted in<<listing_1_8,listing 1.8>> below.[[listing_1_8]].A simple calculator[source,nim,subs=\"verbatim,quotes,attributes\"]----import strutilslet line = stdin.readLine()*let result = line.parseInt + 5*echo(line, \" + 5 = \", result)----The `parseInt` procedure cannot convert strings containing only lettersinto a number because no number exists in that string. The exception messageshown at the bottom of the stack trace informs us of this. It includesthe string value that `parseInt` attempted to parse which gives further hintsabout what went wrong.You may not think it but program crashes are a good thing when it comesto debugging. The truly horrible bugs are the ones which produce no crashes,but instead result in your program producing incorrect results. In such casesadvanced debugging techniques need to be used. Debugging also comes in handywhen a stack trace does not give enough information about the issue.The primary purpose of debugging is to investigate the state of memoryat a particular point in the execution of your program. You may for examplewant to find out what the value of the `line` variable is just beforethe `parseInt` procedure is called. This can be done in many ways.=== Debugging using `echo`By far the simplest and most common approach is to use the `echo`procedure. The `echo`procedure allows you to display the value of most variables, as long as thetype of the variable implements the `$` procedure it can be displayed.For other variables the `repr` procedure can be used, you can pass anytype of variable to it and get a textual representation of thatvariable's value.Using the `repr` procedure and `echo`, let's investigate the value of the`line` variable just before the call to `parseInt`.[[listing_1_9]].Investigating the value of the `line` variable using `repr`.[source,nim,subs=\"verbatim,quotes,attributes\"]----import strutilslet line = stdin.readLine()*echo(\"The value of the `line` variable is: \", repr(line))*let result = line.parseInt + 5echo(line, \" + 5 = \", result)----The `repr` procedure is useful because it shows non-printable charactersin their escaped form. It also shows extra information about many types ofdata. Running the example in <<listing_1_9,listing 1.9>> and typing in 3 Tabcharacters results in the following output.```The value of the `line` variable is: 0x105ff3050\"\\9\\9\\9\"Traceback (most recent call last)foo.nim(4)               foostrutils.nim             parseIntError: unhandled exception: invalid integer:       [ValueError]```The exception message just shows some whitespace which is how Tab charactersare shown in normal text. But you have no way of distinguishing whetherthat whitespace is just normal space characters or whether it is in fact amultiple Tab characters. The `repr` procedure solves this ambiguity by showing`\\9\\9\\9`, the number 9 is the ASCII number code for the tab character.The memory address of the `line` variable is also shown..Procedures with no side effects and `echo`****A procedure marked with the `{.noSideEffect.}` pragma is said to have no sideeffect. This means that the procedure does not modify or read anyexternal state, suchas changing global variables or writing to a file. Marking a procedure ashaving no side effects is useful when you want this to be enforced by thecompiler, that way the code will not compile unless the procedureremains side effect free. For example consider the following `add` procedure,it is said to contain no side effects because passing the same inputs to thisprocedure will always produce the same output..The side effect free `add` procedure```nimproc add(a, b: int): int {.noSideEffect.} =  return a + b```This creates a problem whenever you want to debug such procedures with the`echo` procedure. The `echo` procedure is not side effect free because itaccesses a global `stdout` variable. So the following code will not compile.[[listing_1_11]].`echo` cannot be used inside a side effect free procedure```nimproc add(a, b: int): int {.noSideEffect.} =  echo(\"Value of a is:\", a)  return a + b```Compiling the code in <<listing_1_11,listing 1.11>> will fail with an error:\"'add' can have side effects\". Thankfully the solution is simple. Nim providesa side effect free `echo` for this very purpose, it is called `debugEcho` soall you need to do is replace `echo` with `debugEcho` and the code willcompile.****=== Using `writeStackTrace`An unhandled exception is not the only way for a stack trace to be displayed.You may find it useful to display the current stack trace anywhere in yourprogram for debugging purposes. This can give you vital information, especiallyin larger programs with many procedures, where it can show you thepath through those procedures and how your program's execution ended in acertain procedure.Consider the following example..`writeStackTrace` example```nimproc a1() =  writeStackTrace()proc a() =  a1()a()```Compiling and running this example will display the following stack trace.```Traceback (most recent call last)foo.nim(7)               foofoo.nim(5)               afoo.nim(2)               a1```The `a` procedure is called first on line 7, followed by `a1` at line 5,and finally the `writeStackTrace` procedure is called on line 2.=== Using GDB/LLDBSometimes a proper debugging tool is necessary for the truly complicatedissues. As with profiling tools in the previous section, Nim programs can bedebugged using most C debuggers. One of the most popular debugging toolsis the GNU Debugger, its often known by the acronym GDB.The GNU debugger should be included with your distribution of gcc which youshould already have as part of your Nim installation. Unfortunately on thelatest versions ofMac OS X installation of gdb is problematic, but you can use a similar debuggercalled LLDB. LLDB is a much newer debugger, but it functions in almostexactly the same way.Let's try to use GDB (or LLDB if you're on Mac OS X) to debug the small`adder.nim` example introduced in <<listing_1_8,listing 1.8>>.I will repeat the example below..The `adder.nim` example```nimimport strutilslet line = stdin.readLine()let result = line.parseInt + 5echo(line, \" + 5 = \", result)```In order to use these debugging tools you will need to compile `adder.nim`with two additional flags. The `--debuginfo` flag, which will instruct thecompiler to add extra debugging information to the resulting binary. Thedebugging information will be used by GDB and LLDB to read procedure namesand line numbers of the currently executed code.And also the `--linedir:on` flag which will include Nim-specific debuginformationsuch as module names and Nim source code lines. GDB and LLDB will use theinformation added by the `--linedir:on` flag to report Nim-specific modulenames and line numbers.Putting both of these together you should compile the `adder` module using thefollowing command: `nim c --debuginfo --linedir:on adder.nim`..The `--debugger:native` flagTIP: Newer versions of Nim support the `--debugger:native` flag which is     equivalent to specifying the `--linedir:on` and `--debuginfo` flags.The next step is to launch the debugging tool. The usage of both of these toolsis very similar. To launch the `adder` executable in GDB execute `gdb adder`and to launch it in LLDB execute `lldb adder`. GDB or LLDB should launchand you should see something similar to <<figure_1_4,figure 1.4>>or <<figure_1_5,figure 1.5>>.[[figure_1_4]].GDB on Windowsimage::ch05_gdb_adder.PNG[][[figure_1_5]].LLDB on Mac OS Ximage::ch05_lldb_adder.png[]Once these tools are launched they will wait for input from the user.The input is in the form of a command. Both of these tools support a rangeof different commands for controlling the execution of the program, to watchthe values of specific variables, to set breakpoints and much more. To get afull list of supported commands type in `help` and press enter.The aim for this debugging session is to find out the value of the `line`variable, just like in theprevious sections. To do this we need to set a breakpoint at line 3 in the`adder.nim` file. Thankfully, both GDB and LLDB share the same command syntaxfor creatingbreakpoints. Simply type in `b adder.nim:3` into the terminal and press enter.A breakpoint should be successfully created, the debugger will confirm thisby displaying a message that is similar to _Listing 5.23_..This message is shown when a breakpoint is successfully created in LLDB.```Breakpoint 1: where = adder`adderInit000 + 119 at adder.nim:3, address = 0x0000000100020f17```Once the breakpoint is created, you can instruct the debugger to run the`adder` program by using the `run` command. Type in `run` into the terminaland press enter. The program won't hit the breakpoint because it will firstread a line from standard input, so after you use the `run` command you willneed to type something else into the terminal. This time the `adder` programwill read it.The debugger will then stop the execution of the program at line 3.Figures <<figure_1_6,1.6>> and <<figure_1_7,1.7>> show what that will look like.[[figure_1_6]].Execution paused at line 3 in GDBimage::ch05_gdb_adder_2.PNG[][[figure_1_7]].Execution paused at line 3 in LLDBimage::ch05_lldb_adder_2.png[]At this point in the execution of the program, we should be able to display thevalue of the `line` variable.Displaying the value of a variable is the same inboth GDB and LLDB.One can use the `p` (or `print`) command to display the value of any variable.Unfortunately you cannot simply type in `print line` and get the result.This is because of name mangling which I mentioned in the profiling section.Before you can print out the value of the `line` variable you will need tofind out what the new name of it is. In almost all cases the variable name willonly have an underscore followed by a randomised number appended to it.This makes finding the name rather trivial, but the process differs betweenGDB and LLDB.In GDB it is simpleto find out the name of the `line` variable, you can simply type in`print line_`and press the Tab button. GDB will then auto-complete the name for you, or giveyou a list of choices.As for LLDB, because it does not support auto-complete via the Tab key, thisis a bit more complicated. You need to find the name of the variable by lookingat the list of local and global variables in the current scope. You can geta list of local variables by using the `fr v -a`(or `frame variable --no-args`) command, and a list of global variablesby using the `ta v` (or `target variable`) command. The `line` variable isa global variable so type in `ta v` to get a list of the global variables.You should see something similar to the screenshot in <<figure_1_8,figure 1.8>>.[[figure_1_8]].The list of global variables in LLDBimage::ch05_lldb_adder_3.png[]You can see the `line` variable at the bottom of the list as `line_106004`.Now print the `line` variable by using the `print <var_name_here>` command,make sure to replace the `<var_name_here>` with the name of the `line` variablethat you found from the previous step. Figures <<figure_1_9,1.9>> and<<figure_1_10,1.10>> show what you may see.[[figure_1_9]].Printing the value of the `line` variable in GDBimage::ch05_gdb_adder_3.PNG[][[figure_1_10]].Printing the value of the `line` variable in LLDBimage::ch05_lldb_adder_4.png[]This unfortunately tells us nothing about the value of the `line` variable.We are in the land of low-level C, so the `line` variable is a pointer toa `NimStringDesc` type. We can dereference this pointer by appending anasterisk to the beginning of the variable name: `print *line_106004`.Doing this will show values of each of the fields in the `NimStringDesc`type. Unfortunately in LLDB this does not show the value of the `data` field,so we must explicitly access it: `print (char*)line_106004-{gt}data`. The`(char*)` is required to cast the `data` field into something which LLDBcan display. Figures <<figure_1_11,1.11>> and <<figure_1_12,1.12>>show what this looks like in GDB and LLDB respectively.[[figure_1_11]].Displaying the value of the `line` variable in GDBimage::ch05_gdb_adder_4.PNG[][[figure_1_12]].Displaying the value of the `line` variable in LLDBimage::ch05_lldb_adder_5.png[]This is much more complicated than simply using the `echo` procedure, but shouldbe useful for more complicated debugging scenarios. Hopefully this gave youan idea of how to compile your Nim program so that it canbe debugged using GDB and LLDB. There are many more features thatthese debuggers provide which are beyond the scope of this article. Thesefeatures allow you to analyse the execution of your program in many otherways. You may wishto learn more by looking at the many resources available online for thesedebuggers and many others.== ConclusionThank you for reading. If you require help with these topics or anything elserelated to Nim, be sure to get in touch with ourhttps://nim-lang.org/community.html[community].", "content_with_meta": "---\ntitle: documentation profiling and debugging\nauthor: Dominik Picheta\nexcerpt: This guide discusses some of the useful tools for documenting, profiling and debugging Nim code.\ntags: nim, python\n---\n\n= A guide to documenting, profiling and debugging Nim code\n:figure-caption: Figure 1.\n:listing-caption: Listing 1.\n:table-caption: Table 1.\n:numbered:\n:toc: left\n\n\n.Nim in Action\n****\n+++\n<table class=\"hackytable\">\n  <tr>\n  <td width=\"200px\">\n  <img src=\"https://nim-lang.org/assets/img/nim_in_action_cover.jpg\"/>\n  </td>\n  <td style=\"padding-left: 10pt;\">\n+++\nThis small guide was originally written for\nhttps://book.picheta.me[Nim in Action]. It didn't end up in the book\ndue to size constraints. Nim in Action is written in a similar\nstyle to this guide, check it out for more in-depth information about the\nNim programming language.\n\n.Discount\nTIP: Get 37% off Nim in Action with code `fccpicheta`.\n+++\n</td>\n</tr>\n</table>\n+++\n****\n\n\n\nThis guide will discuss some of the useful tools for documenting, profiling\nand debugging Nim code. Some of the things you will be introduced to include:\n\n* The reStructuredText language which is used in Nim's doc comments\n* The Nim performance and memory usage profiler\n* Using GDB/LLDB with Nim\n\nBe sure to have a Nim compiler ready and follow along with the instructions\nin this guide to get the most out of it.\n\n== Documenting your code\n\nCode documentation is important. It explains details about software which\nmay not be immediately apparent when looking at the API of libraries or even\nthe software's source code.\n\nThere are many ways to document code. You like already know that,\nlike many programming languages, Nim supports comments. Comments act as\nan annotation for source code, a way to make code easier to understand.\n\nIn Nim a single-line comment is delimited by a hash character `&#35;`.\nMulti-line comments can be delimited by `&#35;[` and `]&#35;`.\n<<list_1_1,Listing 1.1>> shows an example of both.\n\n[[list_1_1]]\n.Comments in Nim\n```nim\nvar x = 5 # Assign 5 to x.\n#[multi-\n  line      <1>\n  comment]#\n```\n<1> This syntax is still relatively new and so most syntax highlighters\n    are not aware of it.\n\nNim also supports a special type of comment, called a documentation comment.\nThis type of comment is processed by Nim's documentation generator. Any comment\nusing two hash characters `&#35;&#35;` is a documentation comment.\n\n[[list_1_2]]\n.Example showing a simple documentation comment\n```nim\n## This is a *documentation comment* for module ``test``.\n```\n\n<<list_1_2,Listing 1.2>> shows a very simple documentation comment.\nThe Nim compiler\nincludes a command to generate documentation for a given module. Save the code\nin <<list_1_2,Listing 1.2>> as `test.nim` somewhere on your file system then\nexecute `nim doc test.nim`. A `test.html` file should be produced beside\nyour `test.nim` file. Open it in your favourite web browser to see the\ngenerated HTML. You should see something similar to the screenshot in\n<<fig_1_1,figure 1.1>>.\n\n[[fig_1_1]]\n.HTML documentation for the `test.nim` module\nimage::ch05_docgen.png[]\n\nNote the different styles of text seen in the screenshot. The text\n\"documentation comment\" is in italics because it is surrounded by asterisks\n(`*`) in the doc comment. The \"test\" is surrounded by two backticks which makes\nthe font monospaced, useful when talking about identifiers such as variable\nnames.\n\nThese special delimiters are part of the reStructuredText markup language\nwhich the documentation generator supports.\nThe documentation generator reads the file you specify on the command-line,\nit finds all the documentation comments and then goes through each of them.\nEach documentation comment is parsed using a\nreStructuredText parser. The documentation generator then generates HTML\nbased on the reStructuredText markup that it parses.\n\n<<table_1_1,Table 1.1>> shows some example syntax of the reStructuredText\nmarkup language.\n\n[[table_1_1]]\n.reStructuredText syntax examples\n[options=\"header\"]\n|===\n\n| Syntax | Result | Usage\n\n| `\\*italics*` | _italics_ | Emphasising words weakly\n\n| `\\\\**bold**` | *bold* | Emphasising words strongly\n\n| `\\``monospace``` | `monospace` | Identifiers: variable, procedure, etc. names.\n\n| ``HyperLink <\\http://google.com>`_` | http://google.com[HyperLink] | Linking to other web pages.\n\na|\n``\nHeading +\n======= +\n``\n\na|\nimage:ch05_rst_heading.png[,120]\n\n| The `=` can be any punctuation character, heading levels are determined from\nsuccession of headings.\n\n|\n`.. code-block:: nim` +\n\n+++\n<pre>\n  echo(\"Hello World\")\n</pre>\n+++\n\na|\n``\necho(\"Hello World\")\n``\n\n| To show some example code. This will add syntax highlighting to the code\nspecified.\n\n|===\n\nFor a more comprehensive reference take a look at the following link:\nhttp://sphinx-doc.org/rest.html\n\nLet me show you another example.\n\n[[list_1_3]]\n.Different placements of doc comments\n```nim\n## This is the best module in the world.\n## We have a lot of documentation!\n##\n##\n## Examples\n## ========\n##\n## Some examples will follow:\n##\n##\n## Adding two numbers together\n## ---------------------------\n##\n## .. code-block:: nim\n##\n##   doAssert add(5, 5) == 10\n##\n\nproc add*(a, b: int): int =\n  ## Adds integer ``a`` to integer ``b`` and returns the result.\n  return a + b\n```\n\n[[fig_1_2]]\n.The resulting documentation for <<list_1_3,listing 1.3>>\nimage::ch05_math_docs.png[]\n\nAs you can see from the example in <<list_1_3,listing 1.3>>,\ndocumentation comments\ncan be placed in many places. They can be in the global scope or locally under\na procedure. Doc comments under a procedure document what that procedure does,\nthe Nim documentation generator generates a listing of all procedures that\nare exported in a module, the ones that have documentation comments will display\nthem underneath as shown in <<fig_1_2,figure 1.2>>.\n\nThis is how the Nim standard library is documented. For more examples on how\nto document your code you should take a look\nhttps://github.com/nim-lang/Nim/tree/devel/lib/pure[its source code].\n\n== Profiling your code\n\nProfiling an application is the act of analysing it at runtime to determine\nwhat it spends its time doing. For example, in which procedures it spends\nmost of its time, or how many times each procedure is called.\nThese measurements help to find areas of code which need optimisation.\nOccasionally they can also help you find bugs in your application.\n\nThere is a large amount of profilers available for the Nim programming language.\nThis may come as a surprise because Nim is a relatively new\nlanguage. The fact is that most of these profilers have not been created\nspecifically for Nim but for C. C profilers support\nNim applications because Nim compiles to C. There are only a few\nthings that you need to know to take advantage of such profilers.\n\nThere is one profiler that is actually included with the Nim compiler, it is\nso far the only profiler designed for profiling Nim applications. Let's take\na look at it before moving to the C profilers.\n\n=== Profiling with nimprof\n\nThe Embedded Stack Trace Profiler (ESTP), or sometimes just called NimProf, is\na Nim profiler included with the standard Nim distribution. To activate this\nprofiler you only need to follow the following steps:\n\n1. Import the `nimprof` module in your program's main Nim module (the one you\nwill be compiling),\n2. Compile your program with the `--profiler:on` and `stacktrace:on` flags.\n3. Run your program as usual.\n\n.Application speed\nNOTE: As a result of the profiling your application will run slower, this is\n      because the profiler needs to analyse your application's execution at\n      runtime which has an obvious overhead.\n\nConsider the following code listing.\n\n[[listing_1_4]]\n.A simple profiler example\n```nim\nimport nimprof <1>\nimport strutils <2>\n\nproc ab() =\n  echo(\"Found letter\")\n\nproc num() =\n  echo(\"Found number\")\n\nproc diff() =\n  echo(\"Found something else\")\n\nproc analyse(x: string) =\n  var i = 0\n  while true:\n    case x[i] <3>\n    of Letters: ab()\n    of {'0' .. '9'}: num()\n    of '\\0': break <4>\n    else: diff()\n    i.inc\n\nfor i in 0 .. 10000: <5>\n  analyse(\"uyguhijkmnbdv44354gasuygiuiolknchyqudsayd12635uha\")\n```\n<1> The `nimprof` module is essential in order for the profiler to work.\n<2> The `strutils` module defines the `Letters` set.\n<3> Each character in the string `x` is iterated over, if a character is a\n    letter then `ab` is called, if it's a number then `num` is called, and\n    if it's something else then `diff` is called.\n<4> The `\\0` signifies the end of the string, we break out of the loop here.\n<5> We perform the analysis 10 thousand times in order to let the profiler\n    measure reliably.\n\nSave it as `main.nim`, then compile it by executing\n`nim c --profiler:on --stacktrace:on main.nim`. The example should compile\nsuccessfully. You may then run it. After the program has finished executing\nyou should see a message similar to \"writing profile_results.txt...\" appear\nin your terminal window.\nThe `main` program should create a `profile_results.txt` file in your current\nworking directory. The file's contents should be similar to those in\n<<listing_1_5,listing 1.5>>.\n\n[[listing_1_5]]\n.The profiling results\n```\ntotal executions of each stack trace:\nEntry: 1/4 Calls: 89/195 = 45.64% [sum: 89; 89/195 = 45.64%]\n  analyse 192/195 = 98.46%\n  main 195/195 = 100.00%\nEntry: 2/4 Calls: 83/195 = 42.56% [sum: 172; 172/195 = 88.21%]\n  ab 83/195 = 42.56%\n  analyse 192/195 = 98.46%\n  main 195/195 = 100.00%\nEntry: 3/4 Calls: 20/195 = 10.26% [sum: 192; 192/195 = 98.46%]\n  num 20/195 = 10.26%\n  analyse 192/195 = 98.46%\n  main 195/195 = 100.00%\nEntry: 4/4 Calls: 3/195 = 1.54% [sum: 195; 195/195 = 100.00%]\n  main 195/195 = 100.00%\n```\n\nWhile the application is running the profiler takes multiple snapshots of the\nline of code that is currently being executed. It notes the stack trace which\ntells it how the application ended up executing that piece of code. The most\ncommon code paths are then reported in `profile_results.txt`.\n\nIn the report shown in <<listing_1_5,listing 1.5>>,\nthe profiler has made 195 snapshots.\nIt found that the line of code being executed was inside the `analyse`\nprocedure in 45.64% of those snapshots. In 42.56% of those snapshots it was\nin the `ab` procedure, this makes sense because the string passed to\n`analyse` is mostly made up of letters. Numbers are less popular and so\nthe execution of the `num` procedure only makes up 10.26% of those snapshots.\nThe profiler did not pick up any calls to the `diff` procedure because there\nare no other characters in the `x` string. Try adding some punctuation to\nthe string passed to the `analyse` procedure and you will find that the\nprofiler results then show the `diff` procedure.\n\nIt is easy to determine where the bulk of the processing takes place in\n<<listing_1_4,listing 1.4>> without the use of a profiler.\nBut for more complex modules\nand applications the Nim profiler is great for determining which\nprocedures are most used.\n\n.Memory usage\nTIP: The Nim profiler can also be used for measuring memory usage, simply\n     compile your application with the `--profiler:off`, `--stackTrace:on`,\n     and `-d:memProfiler` flags.\n\n=== Profiling with Valgrind\n\nUnfortunately in some cases profilers are not cross-platform. Valgrind is\none of those cases, if you are a Windows user\nthen I'm afraid you will not be able to use it.\n\nValgrind is not just a profiler, it is primarily a tool for memory debugging\nand memory leak detection. The profiler component is called Callgrind and it\nanalyses procedures that your application calls and what those procedures then\ncall and so on. An application called KCacheGrind can visualise output from\nCallgrind.\n\n.Installing Valgrind\nNOTE: To follow along with the examples here you will need to install the\n      Valgrind tool together with KCacheGrind. There is a chance these tools\n      are already installed on your operating system if you are using Linux.\n      On Mac OS X you can easily install them using Homebrew, just execute\n      `brew install valgrind QCacheGrind`.\n\nLet's try Valgrind on the example application in <<listing_1_4,listing 1.4>>.\nFirst recompile the\napplication without any flags by running `nim c main`. You\nwill need to comment out the `import nimprof` line in your `main.nim` file\nto do this successfully.\n\nYou may then execute the following\ncommand to run this application under\nValgrind: `valgrind --tool=callgrind -v ./main`\n\nThe callgrind tool adds an even bigger overhead than the Nim profiler so you\nmay need to terminate the application, you can safely do so by pressing\nthe Control and C keys together.\n\nThe textual output given by the callgrind tool is very large and so looking\nat it all in a text editor is impractical. Thankfully a tool exists to\nallow us to explore it visually. This tool is called KCacheGrind (QCacheGrind\non Mac OS X). You can execute it in the directory where you executed Valgrind\nto get something similar to the screenshot in <<figure_1_3,figure 1.3>>.\n\n[[figure_1_3]]\n.QCacheGrind showing the call graph of <<listing_1_4,listing 1.4>>\nimage::ch05_qcachegrind.png[]\n\nThe results of the Callgrind tool show many more calls during the lifetime of\n<<listing_1_4,listing 1.4>>. This is because many of the C\nfunctions, which have been defined by Nim, during the translation to C\nare now visible. These functions are necessary to implement the behaviour of\nthe code in <<listing_1_4,listing 1.4>>.\n\nThe C function which is selected in the screenshots corresponds to the\n`analyse` Nim procedure. Procedures' names undergo a process called name\nmangling when translated to C functions, this prevents clashes between other\nC functions. The name mangling process currently just adds an underscore\nfollowed by a number to the C function name. Thankfully figuring out which\nC functions correspond to which Nim procedures is still easy.\n\nThe output from Callgrind gives you more low-level details about the\nexecution of your Nim applications. <<figure_1_3,Figure 1.3>> shows the\nnumber of times\nevery single C function has been executed, it allows you to diagnose performance\nproblems which may be outside your control. But with greater power comes\ngreater complexity so Valgrind has a higher learning curve than the Nim\nprofiler.\n\n== Debugging Nim code\n\nDebugging is one of the most important activities in software development.\nBugs in software occur inadvertantly. When a user reports an issue with\nyour software, how do you fix it?\n\nThe first step is to reproduce the issue. After that debugging tools help to\ndiagnose the issue and to figure out its root cause.\n\nNim does many things to make debugging as easy as possible. For example it\nensures that detailed and easy to understand stack traces are reported\nwhenever your application crashes. Consider the following code in\n<<listing_1_6,listing 1.6>>.\n\n[[listing_1_6]]\n.A simple calculator\n```nim\nimport strutils <1>\nlet line = stdin.readLine() <2>\nlet result = line.parseInt + 5 <3>\necho(line, \" + 5 = \", result) <4>\n```\n<1> The `strutils` module defines the `parseInt` procedure.\n<2> Read a line from the standard input.\n<3> The string `line` is converted into an integer, the number 5 is then\nadded to that integer.\n<4> Display the result of the calculation.\n\nThis code is fairly simple. It reads a line of text from the standard input,\nconverts this line into an integer, adds the number 5 to it and displays\nthe result. Save this code as `adder.nim` and compile it by executing\n`nim c adder.nim`, then execute the resulting binary. The program will\nwait for your input, once you type in a number you will see the sum of 5\nand the number you typed in. But what happens when you don't type in a number?\nType in some text and observe the results. You should see something similar\nto the output in <<listing_1_7,listing 1.7>> below.\n\n[[listing_1_7]]\n.Stack trace for a `ValueError` exception\n```\nTraceback (most recent call last)\nadder.nim(3)             adder <1>\nstrutils.nim             parseInt <2>\nError: unhandled exception: invalid integer: some text [ValueError] <3>\n```\n<1> The program was executing line 3 in the `adder` module...\n<2> ... followed by the `parseInt` procedure which raised the `ValueError`\nexception.\n<3> This is the exception message followed by the exception type in\n    square brackets.\n\nThe program crashed because an exception was raised and it was not caught\nby any `try` statements. This resulted in a stack trace being displayed and\nthe program exiting. The stack trace in <<listing_1_7,listing 1.7>> is\nvery informative,\nit leads directly to the line which caused the crash. After the `adder.nim`\nmodule name, the number `3` points to the line number\nin the `adder` module. This line is highlighted in\n<<listing_1_8,listing 1.8>> below.\n\n[[listing_1_8]]\n.A simple calculator\n[source,nim,subs=\"verbatim,quotes,attributes\"]\n----\nimport strutils\nlet line = stdin.readLine()\n*let result = line.parseInt + 5*\necho(line, \" + 5 = \", result)\n----\n\nThe `parseInt` procedure cannot convert strings containing only letters\ninto a number because no number exists in that string. The exception message\nshown at the bottom of the stack trace informs us of this. It includes\nthe string value that `parseInt` attempted to parse which gives further hints\nabout what went wrong.\n\nYou may not think it but program crashes are a good thing when it comes\nto debugging. The truly horrible bugs are the ones which produce no crashes,\nbut instead result in your program producing incorrect results. In such cases\nadvanced debugging techniques need to be used. Debugging also comes in handy\nwhen a stack trace does not give enough information about the issue.\n\nThe primary purpose of debugging is to investigate the state of memory\nat a particular point in the execution of your program. You may for example\nwant to find out what the value of the `line` variable is just before\nthe `parseInt` procedure is called. This can be done in many ways.\n\n=== Debugging using `echo`\n\nBy far the simplest and most common approach is to use the `echo`\nprocedure. The `echo`\nprocedure allows you to display the value of most variables, as long as the\ntype of the variable implements the `$` procedure it can be displayed.\nFor other variables the `repr` procedure can be used, you can pass any\ntype of variable to it and get a textual representation of that\nvariable's value.\n\nUsing the `repr` procedure and `echo`, let's investigate the value of the\n`line` variable just before the call to `parseInt`.\n\n[[listing_1_9]]\n.Investigating the value of the `line` variable using `repr`.\n[source,nim,subs=\"verbatim,quotes,attributes\"]\n----\nimport strutils\nlet line = stdin.readLine()\n*echo(\"The value of the `line` variable is: \", repr(line))*\nlet result = line.parseInt + 5\necho(line, \" + 5 = \", result)\n----\n\nThe `repr` procedure is useful because it shows non-printable characters\nin their escaped form. It also shows extra information about many types of\ndata. Running the example in <<listing_1_9,listing 1.9>> and typing in 3 Tab\ncharacters results in the following output.\n\n```\nThe value of the `line` variable is: 0x105ff3050\"\\9\\9\\9\"\nTraceback (most recent call last)\nfoo.nim(4)               foo\nstrutils.nim             parseInt\nError: unhandled exception: invalid integer:       [ValueError]\n```\n\nThe exception message just shows some whitespace which is how Tab characters\nare shown in normal text. But you have no way of distinguishing whether\nthat whitespace is just normal space characters or whether it is in fact a\nmultiple Tab characters. The `repr` procedure solves this ambiguity by showing\n`\\9\\9\\9`, the number 9 is the ASCII number code for the tab character.\nThe memory address of the `line` variable is also shown.\n\n.Procedures with no side effects and `echo`\n****\nA procedure marked with the `{.noSideEffect.}` pragma is said to have no side\neffect. This means that the procedure does not modify or read any\nexternal state, such\nas changing global variables or writing to a file. Marking a procedure as\nhaving no side effects is useful when you want this to be enforced by the\ncompiler, that way the code will not compile unless the procedure\nremains side effect free. For example consider the following `add` procedure,\nit is said to contain no side effects because passing the same inputs to this\nprocedure will always produce the same output.\n\n.The side effect free `add` procedure\n```nim\nproc add(a, b: int): int {.noSideEffect.} =\n  return a + b\n```\n\nThis creates a problem whenever you want to debug such procedures with the\n`echo` procedure. The `echo` procedure is not side effect free because it\naccesses a global `stdout` variable. So the following code will not compile.\n\n[[listing_1_11]]\n.`echo` cannot be used inside a side effect free procedure\n```nim\nproc add(a, b: int): int {.noSideEffect.} =\n  echo(\"Value of a is:\", a)\n  return a + b\n```\n\nCompiling the code in <<listing_1_11,listing 1.11>> will fail with an error:\n\"'add' can have side effects\". Thankfully the solution is simple. Nim provides\na side effect free `echo` for this very purpose, it is called `debugEcho` so\nall you need to do is replace `echo` with `debugEcho` and the code will\ncompile.\n****\n\n=== Using `writeStackTrace`\n\nAn unhandled exception is not the only way for a stack trace to be displayed.\nYou may find it useful to display the current stack trace anywhere in your\nprogram for debugging purposes. This can give you vital information, especially\nin larger programs with many procedures, where it can show you the\npath through those procedures and how your program's execution ended in a\ncertain procedure.\n\nConsider the following example.\n\n.`writeStackTrace` example\n```nim\nproc a1() =\n  writeStackTrace()\n\nproc a() =\n  a1()\n\na()\n```\n\nCompiling and running this example will display the following stack trace.\n\n```\nTraceback (most recent call last)\nfoo.nim(7)               foo\nfoo.nim(5)               a\nfoo.nim(2)               a1\n```\n\nThe `a` procedure is called first on line 7, followed by `a1` at line 5,\nand finally the `writeStackTrace` procedure is called on line 2.\n\n=== Using GDB/LLDB\n\nSometimes a proper debugging tool is necessary for the truly complicated\nissues. As with profiling tools in the previous section, Nim programs can be\ndebugged using most C debuggers. One of the most popular debugging tools\nis the GNU Debugger, its often known by the acronym GDB.\n\nThe GNU debugger should be included with your distribution of gcc which you\nshould already have as part of your Nim installation. Unfortunately on the\nlatest versions of\nMac OS X installation of gdb is problematic, but you can use a similar debugger\ncalled LLDB. LLDB is a much newer debugger, but it functions in almost\nexactly the same way.\n\nLet's try to use GDB (or LLDB if you're on Mac OS X) to debug the small\n`adder.nim` example introduced in <<listing_1_8,listing 1.8>>.\nI will repeat the example below.\n\n.The `adder.nim` example\n```nim\nimport strutils\nlet line = stdin.readLine()\nlet result = line.parseInt + 5\necho(line, \" + 5 = \", result)\n```\n\nIn order to use these debugging tools you will need to compile `adder.nim`\nwith two additional flags. The `--debuginfo` flag, which will instruct the\ncompiler to add extra debugging information to the resulting binary. The\ndebugging information will be used by GDB and LLDB to read procedure names\nand line numbers of the currently executed code.\nAnd also the `--linedir:on` flag which will include Nim-specific debug\ninformation\nsuch as module names and Nim source code lines. GDB and LLDB will use the\ninformation added by the `--linedir:on` flag to report Nim-specific module\nnames and line numbers.\n\nPutting both of these together you should compile the `adder` module using the\nfollowing command: `nim c --debuginfo --linedir:on adder.nim`.\n\n.The `--debugger:native` flag\nTIP: Newer versions of Nim support the `--debugger:native` flag which is\n     equivalent to specifying the `--linedir:on` and `--debuginfo` flags.\n\nThe next step is to launch the debugging tool. The usage of both of these tools\nis very similar. To launch the `adder` executable in GDB execute `gdb adder`\nand to launch it in LLDB execute `lldb adder`. GDB or LLDB should launch\nand you should see something similar to <<figure_1_4,figure 1.4>>\nor <<figure_1_5,figure 1.5>>.\n\n[[figure_1_4]]\n.GDB on Windows\nimage::ch05_gdb_adder.PNG[]\n\n[[figure_1_5]]\n.LLDB on Mac OS X\nimage::ch05_lldb_adder.png[]\n\nOnce these tools are launched they will wait for input from the user.\nThe input is in the form of a command. Both of these tools support a range\nof different commands for controlling the execution of the program, to watch\nthe values of specific variables, to set breakpoints and much more. To get a\nfull list of supported commands type in `help` and press enter.\n\nThe aim for this debugging session is to find out the value of the `line`\nvariable, just like in the\nprevious sections. To do this we need to set a breakpoint at line 3 in the\n`adder.nim` file. Thankfully, both GDB and LLDB share the same command syntax\nfor creating\nbreakpoints. Simply type in `b adder.nim:3` into the terminal and press enter.\nA breakpoint should be successfully created, the debugger will confirm this\nby displaying a message that is similar to _Listing 5.23_.\n\n.This message is shown when a breakpoint is successfully created in LLDB.\n```\nBreakpoint 1: where = adder`adderInit000 + 119 at adder.nim:3, address = 0x0000000100020f17\n```\n\nOnce the breakpoint is created, you can instruct the debugger to run the\n`adder` program by using the `run` command. Type in `run` into the terminal\nand press enter. The program won't hit the breakpoint because it will first\nread a line from standard input, so after you use the `run` command you will\nneed to type something else into the terminal. This time the `adder` program\nwill read it.\n\nThe debugger will then stop the execution of the program at line 3.\nFigures <<figure_1_6,1.6>> and <<figure_1_7,1.7>> show what that will look like.\n\n[[figure_1_6]]\n.Execution paused at line 3 in GDB\nimage::ch05_gdb_adder_2.PNG[]\n\n[[figure_1_7]]\n.Execution paused at line 3 in LLDB\nimage::ch05_lldb_adder_2.png[]\n\nAt this point in the execution of the program, we should be able to display the\nvalue of the `line` variable.\nDisplaying the value of a variable is the same in\nboth GDB and LLDB.\nOne can use the `p` (or `print`) command to display the value of any variable.\nUnfortunately you cannot simply type in `print line` and get the result.\nThis is because of name mangling which I mentioned in the profiling section.\nBefore you can print out the value of the `line` variable you will need to\nfind out what the new name of it is. In almost all cases the variable name will\nonly have an underscore followed by a randomised number appended to it.\nThis makes finding the name rather trivial, but the process differs between\nGDB and LLDB.\n\nIn GDB it is simple\nto find out the name of the `line` variable, you can simply type in\n`print line_`\nand press the Tab button. GDB will then auto-complete the name for you, or give\nyou a list of choices.\n\nAs for LLDB, because it does not support auto-complete via the Tab key, this\nis a bit more complicated. You need to find the name of the variable by looking\nat the list of local and global variables in the current scope. You can get\na list of local variables by using the `fr v -a`\n(or `frame variable --no-args`) command, and a list of global variables\nby using the `ta v` (or `target variable`) command. The `line` variable is\na global variable so type in `ta v` to get a list of the global variables.\nYou should see something similar to the screenshot in <<figure_1_8,figure 1.8>>.\n\n[[figure_1_8]]\n.The list of global variables in LLDB\nimage::ch05_lldb_adder_3.png[]\n\nYou can see the `line` variable at the bottom of the list as `line_106004`.\n\nNow print the `line` variable by using the `print <var_name_here>` command,\nmake sure to replace the `<var_name_here>` with the name of the `line` variable\nthat you found from the previous step. Figures <<figure_1_9,1.9>> and\n<<figure_1_10,1.10>> show what you may see.\n\n[[figure_1_9]]\n.Printing the value of the `line` variable in GDB\nimage::ch05_gdb_adder_3.PNG[]\n\n[[figure_1_10]]\n.Printing the value of the `line` variable in LLDB\nimage::ch05_lldb_adder_4.png[]\n\nThis unfortunately tells us nothing about the value of the `line` variable.\nWe are in the land of low-level C, so the `line` variable is a pointer to\na `NimStringDesc` type. We can dereference this pointer by appending an\nasterisk to the beginning of the variable name: `print *line_106004`.\n\nDoing this will show values of each of the fields in the `NimStringDesc`\ntype. Unfortunately in LLDB this does not show the value of the `data` field,\nso we must explicitly access it: `print (char*)line_106004-{gt}data`. The\n`(char*)` is required to cast the `data` field into something which LLDB\ncan display. Figures <<figure_1_11,1.11>> and <<figure_1_12,1.12>>\nshow what this looks like in GDB and LLDB respectively.\n\n[[figure_1_11]]\n.Displaying the value of the `line` variable in GDB\nimage::ch05_gdb_adder_4.PNG[]\n\n[[figure_1_12]]\n.Displaying the value of the `line` variable in LLDB\nimage::ch05_lldb_adder_5.png[]\n\nThis is much more complicated than simply using the `echo` procedure, but should\nbe useful for more complicated debugging scenarios. Hopefully this gave you\nan idea of how to compile your Nim program so that it can\nbe debugged using GDB and LLDB. There are many more features that\nthese debuggers provide which are beyond the scope of this article. These\nfeatures allow you to analyse the execution of your program in many other\nways. You may wish\nto learn more by looking at the many resources available online for these\ndebuggers and many others.\n\n== Conclusion\n\nThank you for reading. If you require help with these topics or anything else\nrelated to Nim, be sure to get in touch with our\nhttps://nim-lang.org/community.html[community].\n", "tags": ["nim", "python"], "published_at": "", "id": 41}, {"title": "Nim in 2017: A short recap", "slug": "nim-in-a-short-recap", "content": "This year has been filled with some pretty major achievements for us, becauseof this I decided to write a little article summarising what we've accomplishedin 2017 and to give a bit of a preview of what's in store for 2018.## The first Nim book<div class=\"center\">  <a href=\"https://book.picheta.me/\">    <img src=\"https://pbs.twimg.com/media/DHI3ogxXsAAvrRE.jpg:large\" alt=\"Three Nim in Action books, fanned out\" width=\"400\"/>  </a></div>* Nim in Action, the first Nim programming language book, went into production  in late 2016 and I received the first printed copies in the following summer.* Of course, being the author, I am incredibly proud of this.* This book is considered [\"canon\"](https://en.wikipedia.org/wiki/Canon_(fiction))  for Nim v1. This means that we will do our  best to not break anything that is contained within it for version 1.0.  So don't be  afraid to buy a copy thinking that it will be out of date by the time 1.0  is released.## Nim at FOSDEM<div class=\"center\">  <a href=\"https://fosdem.org/2018/stands/\">    <img src=\"https://fosdem.org/2018/support/promote/wide.png\" alt=\"FOSDEM 2018\" width=\"500\"/>  </a></div>* Nim is coming to FOSDEM!* We are very happy to say that we have been allocated a stand at FOSDEM 2018  in Brussels. A lot of Nim folks (including the Nim creator Andreas Rumpf and  myself) will be there to sell t-shirts, books and to promote Nim.* Join us on 3 & 4 February 2018 in Brussels!## Nim in production* Reel Valley, a game by [Onset Game](https://onsetgame.com/), written 100%  in Nim has been released on  [Facebook](https://apps.facebook.com/reelvalley/?utm_source=nim_2017) and  more recently on  [Android](https://play.google.com/store/apps/details?id=com.onsetgame.reelvalley).* We now have a wiki page listing multiple companies using  [Nim in production](https://github.com/nim-lang/Nim/wiki/Companies-using-Nim).* Companies are [searching for Nim programmers](https://forum.nim-lang.org/t/3402).## Work towards v1.0* 3 releases this year: 0.16.0, 0.17.0 and 0.17.2* Upcoming release 0.18.0 contains many bug fixes and improvements, in particular  a lot of stdlib changes.  See the current changelog [here](https://github.com/nim-lang/Nim/blob/devel/changelog.md#v0180---ddmmyyyy).  * \"Upcoming\" async has finally been merged.  * A large revamp of the ``times`` module, with more to come.    (Thanks [@GULPF](https://github.com/GULPF))  * Multiple modules have been moved out of the stdlib to Nimble packages.    (Thanks [@lcrees](https://github.com/lcrees/))  * Fixes to our handling of SSL certificate checks.    (Thanks [@FedericoCeratto](https://github.com/FedericoCeratto))  * The memory manager now implements the TLSF algorithm with the benefit that    ``alloc`` and ``dealloc`` are now O(1) operations.  * Many more changes by our awesome and devoted community.* Version 1.0 will mark the end of breaking changes to Nim.  This won't mean that Nim development will cease, many improvements will  continue to be made and your source won't require any changes to compile  with each Nim release.  * There will be some caveats to this which we will outline in the future.  * We are already very good at exercising restraint when creating breaking   changes, often creating a deprecation path to ease the pain of our users.   This isn't always the case though, after v1 is release it will be.## Nim livestreams* We wanted to attract more developers to Nim by hosting live coding streams on Twitch.* [Araq](https://go.twitch.tv/araq4k) hosted livestreams where he worked on the compiler. You might find these useful if you're interested in compiler development.  * [Pointer free programming](https://www.youtube.com/watch?v=EC9zCXlvY2k)  * [Thinking about destructors](https://www.youtube.com/watch?v=KNUDGZuqfQM)  * [Pretty printing](https://www.youtube.com/watch?v=UV38gQfcb9c)  * [Random bug fixing](https://www.youtube.com/watch?v=E2qlDKm_WzE)* [dom96](https://go.twitch.tv/d0m96) hosted livestreams where he fixed stdlib bugs, created Nimble packages,  and enhanced the Nim IRC bot. You might find these useful if you want to  learn how to develop Nim software or fix stdlib bugs.  * [Enhancing the Nim programming language IRC bot](https://www.youtube.com/watch?v=CkXZjjWD8EI)  * [Creating a web driver package and fixing stdlib bugs](https://www.youtube.com/watch?v=583BwZ7uSro)  * [Extending web driver package, stock notifier and Nimble](https://www.youtube.com/watch?v=UQ4RvUlXIDI)  * [Fixing stdlib bugs in the Nim programming language](https://www.youtube.com/watch?v=RggcZEXZA-g)As always, I'd like to inviteyou to join our community to give us feedback or just to chill out with us,all the information you need to do so is available on our[community](https://nim-lang.org/community.html) page.Thank you all for your incredible support so far, and have a happy new year!", "content_with_meta": "---\ntitle: \"Nim in 2017: A short recap\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nThis year has been filled with some pretty major achievements for us, because\nof this I decided to write a little article summarising what we've accomplished\nin 2017 and to give a bit of a preview of what's in store for 2018.\n\n## The first Nim book\n\n<div class=\"center\">\n  <a href=\"https://book.picheta.me/\">\n    <img src=\"https://pbs.twimg.com/media/DHI3ogxXsAAvrRE.jpg:large\" alt=\"Three Nim in Action books, fanned out\" width=\"400\"/>\n  </a>\n</div>\n\n* Nim in Action, the first Nim programming language book, went into production\n  in late 2016 and I received the first printed copies in the following summer.\n* Of course, being the author, I am incredibly proud of this.\n* This book is considered [\"canon\"](https://en.wikipedia.org/wiki/Canon_(fiction))\n  for Nim v1. This means that we will do our\n  best to not break anything that is contained within it for version 1.0.\n  So don't be\n  afraid to buy a copy thinking that it will be out of date by the time 1.0\n  is released.\n\n## Nim at FOSDEM\n\n<div class=\"center\">\n  <a href=\"https://fosdem.org/2018/stands/\">\n    <img src=\"https://fosdem.org/2018/support/promote/wide.png\" alt=\"FOSDEM 2018\" width=\"500\"/>\n  </a>\n</div>\n\n* Nim is coming to FOSDEM!\n* We are very happy to say that we have been allocated a stand at FOSDEM 2018\n  in Brussels. A lot of Nim folks (including the Nim creator Andreas Rumpf and\n  myself) will be there to sell t-shirts, books and to promote Nim.\n* Join us on 3 & 4 February 2018 in Brussels!\n\n## Nim in production\n\n* Reel Valley, a game by [Onset Game](https://onsetgame.com/), written 100%\n  in Nim has been released on\n  [Facebook](https://apps.facebook.com/reelvalley/?utm_source=nim_2017) and\n  more recently on\n  [Android](https://play.google.com/store/apps/details?id=com.onsetgame.reelvalley).\n* We now have a wiki page listing multiple companies using\n  [Nim in production](https://github.com/nim-lang/Nim/wiki/Companies-using-Nim).\n* Companies are [searching for Nim programmers](https://forum.nim-lang.org/t/3402).\n\n## Work towards v1.0\n\n* 3 releases this year: 0.16.0, 0.17.0 and 0.17.2\n* Upcoming release 0.18.0 contains many bug fixes and improvements, in particular\n  a lot of stdlib changes.\n  See the current changelog [here](https://github.com/nim-lang/Nim/blob/devel/changelog.md#v0180---ddmmyyyy).\n  * \"Upcoming\" async has finally been merged.\n  * A large revamp of the ``times`` module, with more to come.\n    (Thanks [@GULPF](https://github.com/GULPF))\n  * Multiple modules have been moved out of the stdlib to Nimble packages.\n    (Thanks [@lcrees](https://github.com/lcrees/))\n  * Fixes to our handling of SSL certificate checks.\n    (Thanks [@FedericoCeratto](https://github.com/FedericoCeratto))\n  * The memory manager now implements the TLSF algorithm with the benefit that\n    ``alloc`` and ``dealloc`` are now O(1) operations.\n  * Many more changes by our awesome and devoted community.\n* Version 1.0 will mark the end of breaking changes to Nim.\n  This won't mean that Nim development will cease, many improvements will\n  continue to be made and your source won't require any changes to compile\n  with each Nim release.\n  * There will be some caveats to this which we will outline in the future.\n  * We are already very good at exercising restraint when creating breaking\n   changes, often creating a deprecation path to ease the pain of our users.\n   This isn't always the case though, after v1 is release it will be.\n\n## Nim livestreams\n\n* We wanted to attract more developers to Nim by hosting live coding streams on Twitch.\n* [Araq](https://go.twitch.tv/araq4k) hosted livestreams where he worked on the compiler. You might find\n these useful if you're interested in compiler development.\n  * [Pointer free programming](https://www.youtube.com/watch?v=EC9zCXlvY2k)\n  * [Thinking about destructors](https://www.youtube.com/watch?v=KNUDGZuqfQM)\n  * [Pretty printing](https://www.youtube.com/watch?v=UV38gQfcb9c)\n  * [Random bug fixing](https://www.youtube.com/watch?v=E2qlDKm_WzE)\n* [dom96](https://go.twitch.tv/d0m96) hosted livestreams where he fixed stdlib bugs, created Nimble packages,\n  and enhanced the Nim IRC bot. You might find these useful if you want to\n  learn how to develop Nim software or fix stdlib bugs.\n  * [Enhancing the Nim programming language IRC bot](https://www.youtube.com/watch?v=CkXZjjWD8EI)\n  * [Creating a web driver package and fixing stdlib bugs](https://www.youtube.com/watch?v=583BwZ7uSro)\n  * [Extending web driver package, stock notifier and Nimble](https://www.youtube.com/watch?v=UQ4RvUlXIDI)\n  * [Fixing stdlib bugs in the Nim programming language](https://www.youtube.com/watch?v=RggcZEXZA-g)\n\nAs always, I'd like to invite\nyou to join our community to give us feedback or just to chill out with us,\nall the information you need to do so is available on our\n[community](https://nim-lang.org/community.html) page.\n\nThank you all for your incredible support so far, and have a happy new year!", "tags": ["nim", "python"], "published_at": "", "id": 42}, {"title": "yes command in Nim", "slug": "yes-command-in-nim", "content": "<div class=\"sidebarblock\">  <div class=\"content\">    <div class=\"title\">Guest post</div>    <div class=\"paragraph\">      This is a guest post by Valts Liepiņš. If you would like to publish articles as a guest author on nim-lang.org then get in touch with us via      <a href=\"https://twitter.com/nim_lang\">Twitter</a> or <a href=\"https://nim-lang.org/community.html\">otherwise</a>.    </div>  </div></div>Recently I stumbled upon a [post](https://www.reddit.com/r/unix/comments/6gxduc/how_is_gnu_yes_so_fast/) which takes a closer look at the `yes` command line tool. The main purpose of it is to write endless stream of a single letter `y` at a ridiculous speed.On the first glance this seems like a really simple problem, just two lines of Nim and you're done, right?```nimwhile true:  echo \"y\"```And indeed, this gives us plenty of `y`'s. But when we take a look at the write speed..```$ ./yes | pv > /dev/null... [2.84MiB/s] ...$ yes | pv > /dev/null... [7.13GiB/s] ...```..that is a mind-blowing difference!This curious detail is thoroughly researched in the original post, so I'll get straight to the key difference. The original `yes` writes a page aligned buffer, which is filled with the desired message, where page size typically is 4096 bytes.Now to apply the newfound knowledge in Nim:```nimconst  pageSize = 4096  yes = \"y\\n\"var buffer = \"\"for i in 1..pageSize:  buffer &= yeswhile true:  discard stdout.writeChars(buffer, 0, buffer.len)```And check the write speed..```$ ./yes | pv > /dev/null... [5.11GiB/s] ...```..Well, this looks way better, but I'm not quite pleased with the missing `2 GB/s`. After checking out Nim source code it seem that the `fwrite` function is the bottleneck.Luckily, we can easily import any other C function, so why not try using the same one used in the original post..```nim# Use POSIX writeproc write(fd: cint, buffer: pointer, count: cint) {.header: \"<unistd.h>\", importc: \"write\".}const  pageSize = 4096  yes = \"y\\n\"var buffer = \"\"for i in 1..pageSize:  buffer &= yeswhile true:  write(1, addr buffer[0], cint(buffer.len))```And the result..```$ ./yes | pv > /dev/null... [7.16GiB/s] ...```That's it! Nim has successfully achieved the same efficiency as the `yes` written in native C.Although we managed to match the write speed, we also made our code less expressive. Luckily this is Nim, so a simple template will help cleaning this up while keeping the performance unimpacted!```nim# Use POSIX writeproc write(fd: cint, buffer: pointer, count: cint) {.header: \"<unistd.h>\", importc: \"write\".}template fastWrite(str: string) =  write(1, addr str[0], cint(str.len))const  pageSize = 4096  yes = \"y\\n\"var buffer = \"\"for i in 1..pageSize:  buffer &= yeswhile true:  fastWrite(buffer)```And there we go! A seemingly simple problem that manages to highlight the beauty of Nim.", "content_with_meta": "---\ntitle: \"yes command in Nim\"\nauthor: Valts Liepiņš\nexcerpt: \"Recently I stumbled upon a post which takes a closer look at the `yes` command line tool. The main purpose of it is to write endless stream of a single letter `y` at a ridiculous speed.\"\ntags: nim, python\n---\n\n<div class=\"sidebarblock\">\n  <div class=\"content\">\n    <div class=\"title\">Guest post</div>\n    <div class=\"paragraph\">\n      This is a guest post by Valts Liepiņš. If you would like to publish articles as a guest author on nim-lang.org then get in touch with us via\n      <a href=\"https://twitter.com/nim_lang\">Twitter</a> or <a href=\"https://nim-lang.org/community.html\">otherwise</a>.\n    </div>\n  </div>\n</div>\n\nRecently I stumbled upon a [post](https://www.reddit.com/r/unix/comments/6gxduc/how_is_gnu_yes_so_fast/) which takes a closer look at the `yes` command line tool. The main purpose of it is to write endless stream of a single letter `y` at a ridiculous speed.\n\nOn the first glance this seems like a really simple problem, just two lines of Nim and you're done, right?\n\n```nim\nwhile true:\n  echo \"y\"\n```\n\nAnd indeed, this gives us plenty of `y`'s. But when we take a look at the write speed..\n\n```\n$ ./yes | pv > /dev/null\n... [2.84MiB/s] ...\n$ yes | pv > /dev/null\n... [7.13GiB/s] ...\n```\n\n..that is a mind-blowing difference!\n\nThis curious detail is thoroughly researched in the original post, so I'll get straight to the key difference. The original `yes` writes a page aligned buffer, which is filled with the desired message, where page size typically is 4096 bytes.\n\nNow to apply the newfound knowledge in Nim:\n\n```nim\nconst\n  pageSize = 4096\n  yes = \"y\\n\"\nvar buffer = \"\"\n\nfor i in 1..pageSize:\n  buffer &= yes\n\nwhile true:\n  discard stdout.writeChars(buffer, 0, buffer.len)\n```\n\nAnd check the write speed..\n\n```\n$ ./yes | pv > /dev/null\n... [5.11GiB/s] ...\n```\n\n..Well, this looks way better, but I'm not quite pleased with the missing `2 GB/s`. After checking out Nim source code it seem that the `fwrite` function is the bottleneck.\n\nLuckily, we can easily import any other C function, so why not try using the same one used in the original post..\n\n```nim\n# Use POSIX write\nproc write(fd: cint, buffer: pointer, count: cint) {.header: \"<unistd.h>\", importc: \"write\".}\n\nconst\n  pageSize = 4096\n  yes = \"y\\n\"\nvar buffer = \"\"\n\nfor i in 1..pageSize:\n  buffer &= yes\n\nwhile true:\n  write(1, addr buffer[0], cint(buffer.len))\n```\n\nAnd the result..\n\n```\n$ ./yes | pv > /dev/null\n... [7.16GiB/s] ...\n```\n\nThat's it! Nim has successfully achieved the same efficiency as the `yes` written in native C.\n\nAlthough we managed to match the write speed, we also made our code less expressive. Luckily this is Nim, so a simple template will help cleaning this up while keeping the performance unimpacted!\n\n```nim\n# Use POSIX write\nproc write(fd: cint, buffer: pointer, count: cint) {.header: \"<unistd.h>\", importc: \"write\".}\n\ntemplate fastWrite(str: string) =\n  write(1, addr str[0], cint(str.len))\n\nconst\n  pageSize = 4096\n  yes = \"y\\n\"\n\nvar buffer = \"\"\n\nfor i in 1..pageSize:\n  buffer &= yes\n\nwhile true:\n  fastWrite(buffer)\n```\n\nAnd there we go! A seemingly simple problem that manages to highlight the beauty of Nim.\n", "tags": ["nim", "python"], "published_at": "", "id": 43}, {"title": "Nim is coming to FOSDEM", "slug": "nim-is-coming-to-fosdem", "content": "<div class=\"center\">  <a href=\"https://fosdem.org/2018/stands/\">    <img src=\"https://fosdem.org/2018/support/promote/wide.png\" alt=\"FOSDEM 2018\" width=\"500\"/>  </a></div>In just under a week, FOSDEM 2018 will be taking place in Brussels at the[Université libre de Bruxelles](https://fosdem.org/2018/practical/transportation/).Come join us in [Building K (level 2)](https://fosdem.org/2018/stands)where members of our core developmentteam will be selling t-shirts, copies of the newly published book[Nim in Action](https://book.picheta.me/), and other goodies.We will also be giving away flyers andstickers for free!We're all excited to meet you and can't wait to introduce everyone to Nim.If you're around in Brussels on Friday ahead of the event, do join us at the[beer event](https://fosdem.org/2018/beerevent/) as well.Be sure to join our brand newTelegram supergroup if you can't find us or just want to chat, we will beusing it to organise ourselves during the events:[https://t.me/nim_lang](https://t.me/nim_lang).", "content_with_meta": "---\ntitle: \"Nim is coming to FOSDEM\"\nauthor: Dominik Picheta\nexcerpt: \"In just under a week, FOSDEM 2018 will be taking place in Brussels\"\ntags: nim, python\n---\n\n<div class=\"center\">\n  <a href=\"https://fosdem.org/2018/stands/\">\n    <img src=\"https://fosdem.org/2018/support/promote/wide.png\" alt=\"FOSDEM 2018\" width=\"500\"/>\n  </a>\n</div>\n\nIn just under a week, FOSDEM 2018 will be taking place in Brussels at the\n[Université libre de Bruxelles](https://fosdem.org/2018/practical/transportation/).\n\nCome join us in [Building K (level 2)](https://fosdem.org/2018/stands)\nwhere members of our core development\nteam will be selling t-shirts, copies of the newly published book\n[Nim in Action](https://book.picheta.me/), and other goodies.\nWe will also be giving away flyers and\nstickers for free!\n\nWe're all excited to meet you and can't wait to introduce everyone to Nim.\nIf you're around in Brussels on Friday ahead of the event, do join us at the\n[beer event](https://fosdem.org/2018/beerevent/) as well.\n\nBe sure to join our brand new\nTelegram supergroup if you can't find us or just want to chat, we will be\nusing it to organise ourselves during the events:\n[https://t.me/nim_lang](https://t.me/nim_lang).\n\n", "tags": ["nim", "python"], "published_at": "", "id": 44}, {"title": "Version 0.18.0 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.18.0, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.# Installing 0.18.0If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.18.0 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim manually by following the instructions on our[install](https://nim-lang.org/install.html) page.Note that Windows users might still have an easier time with theunzip+finish.exe method of installing Nim which is described on the[install](https://nim-lang.org/install.html) page.# What's new in 0.18.0It's been a while since our last release, but we've been busy. At over 1000commits since the last release, v0.18.0 is one of (if not the) biggest releasesof Nim ever.We have mentioned multiple times that this will be a major release. Primarilybecause our goal has been to clean up the standard library significantly inpreparation for v1.0. We've made massive progress in this release to achievethat goal. The downside is that this release has a much larger proportion ofbreaking changes than normal releases, but it is all in the spirit of a cleanerNim v1.0.## Breaking changes to be mindful ofYou will find that the `[]` indexing operator which takes a slice now raisesan ``IndexError`` exception when it is out of bounds. Previously it would havesimply returned the part of the string that was captured. You may find that yourprogram hasn't taken this into account and will now crash with an ``IndexError``exception. To get back the previous behaviour, use the ``substr`` procedure.Here is an example of the issue and how to get around it:```nimvar myString = \"hello world\"doAssertRaises IndexError:  discard myString[6 .. 45]doAssert myString.substr(6, 45) == \"world\"```The ``$`` operator now handles collections differently. For example:```nimdoAssert $(@[\"23\", \"12\"]) == \"@[\\\"23\\\", \\\"12\\\"]\"# Whereas in 0.17.2:doAssert $(@[\"23\", \"12\"]) == \"@[23, 12]\"```An ``array[x, char]`` can no longer be converted to a ``cstring`` type. Thishas the side-effect of allowing ``$`` to be defined on an array:```nimvar x: array[5, char]doAssert $x == r\"['\\x00', '\\x00', '\\x00', '\\x00', '\\x00']\"```Be sure to check out the changelog below for a comprehensive list ofbreaking changes. If you run into any strange regressions feel free to pop intoIRC, Gitter, Discord or any of the other chat rooms/forums we have available.Links to them all are available in our [community page](https://nim-lang.org/community.html).## New featuresOf course, this being a major new release, there are also plenty of newfeatures.## Formatted string literalsThe greatest new addition is the ``strformat`` module. It implements stringformatting that is very similar to Python 3's f-strings.Formatted string literals are prefixed with ``fmt`` or the ``&`` operator:```nimimport strformatlet name = \"Fred\"let age = 24let weight = 94.52doAssert fmt\"My name is {name}. I'm {age} years of age and weigh {weight:.3f}.\" ==            \"My name is Fred. I'm 24 years of age and weigh 94.520.\"```For more information, take a look at the[``strformat`` documentation](https://nim-lang.org/docs/strformat.html).## Testable documentation examplesThe documentation generator can now test your examples for you! This is doneusing the new ``runnableExamples`` macro.```nimproc add*(x, y: int): int =  ## Adds two numbers together.  ##  ## Examples:  ##  runnableExamples:    doAssert add(5, 5) == 10    doAssert add(-5, 2) == -3  x + y```If you save this as ``addLib.nim`` and then generate its documentation via``nim doc addLib.nim``, you should see something like this:```Hint: /tmp/addLib_examples  [Exec]Hint: operation successful (13129 lines compiled; 0.492 sec total; 19.742MiB peakmem; Debug Build) [SuccessX]```The code under ``runnableExamples`` will be embedded in the procedure'sdocumentation.If your examples have an error in them then you will see it, together with astack trace if your error occurs at runtime.This is great for ensuring that your documentation is up-to-date.## ``mapLiterals``This is a new macro that allows you to easily create array and sequence literals.```nimimport sequtilslet x = mapLiterals([12, 34, 15, 1], uint32)doAssert x is array[4, uint32]```## New memory manager algorithmThe new TLSF algorithm has been implemented to reduce memory fragmentation.This has a side effect of making ``alloc`` and ``dealloc`` O(1) operations.## Async improvementsThere have been a number of various improvements to the asynchronous IOmodules in the stdlib. There is no longer an \"upcoming\" and standardasyncdispatch split, the former was merged and is now the default asyncdispatchimplementation.A new ``getIoHandler`` procedure is now available, it returns a handleto the underlying IO completion port or epoll/kqueue fd used by asyncdispatch.Main advantage of this is that libraries now have even greater control over theevent loop.As an example, it allows much more efficient HTTP server implementations(one such implementation is called [httpbeast](https://github.com/dom96/httpbeast)).A new implementation of async await has also been added for the JavaScriptbackend in the ``asyncjs`` module.## Nimble v0.8.10In the release are also updates to the Nim package manager. The latest versionof Nimble is included and contains multiple new features and bug fixes.The major new feature is the support for multiple Nimble packages in a singleGit/Hg repository.Check out the[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)for a list of changes since Nimble's last release.## Contributors to v0.18.0Our contributors are amazing, and there is[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to listhere. Big thanks to all of you, we couldn't have pulled off this releasewithout you!# Changelog## Changes affecting backwards compatibility### Breaking changes in the standard library- The ``[]`` proc for strings now raises an ``IndexError`` exception when  the specified slice is out of bounds. See issue  [#6223](https://github.com/nim-lang/Nim/issues/6223) for more details.  You can use ``substr(str, start, finish)`` to get the old behaviour back,  see [this commit](https://github.com/nim-lang/nimbot/commit/98cc031a27ea89947daa7f0bb536bcf86462941f) for an example.- ``strutils.split`` and ``strutils.rsplit`` with an empty string and a  separator now returns that empty string.  See issue [#4377](https://github.com/nim-lang/Nim/issues/4377).- Arrays of char cannot be converted to ``cstring`` anymore, pointers to  arrays of char can! This means ``$`` for arrays can finally exist  in ``system.nim`` and do the right thing. This means ``$myArrayOfChar`` changed  its behaviour! Compile with ``-d:nimNoArrayToString`` to see where to fix your  code.- `reExtended` is no longer default for the `re` constructor in the `re`  module.- The behavior of ``$`` has been changed for all standard library collections. The  collection-to-string implementations now perform proper quoting and escaping of  strings and chars.- `newAsyncSocket` taking an `AsyncFD` now runs `setBlocking(false)` on the  fd.- ``mod`` and bitwise ``and`` do not produce ``range`` subtypes anymore. This  turned out to be more harmful than helpful and the language is simpler  without this special typing rule.- ``formatFloat``/``formatBiggestFloat`` now support formatting floats with zero  precision digits. The previous ``precision = 0`` behavior (default formatting)  is now available via ``precision = -1``.- Moved from stdlib into Nimble packages:  - [``basic2d``](https://github.com/nim-lang/basic2d)    _deprecated: use ``glm``, ``arraymancer``, ``neo``, or another package instead_  - [``basic3d``](https://github.com/nim-lang/basic3d)    _deprecated: use ``glm``, ``arraymancer``, ``neo``, or another package instead_  - [``gentabs``](https://github.com/lcrees/gentabs)  - [``libuv``](https://github.com/lcrees/libuv)  - [``polynumeric``](https://github.com/lcrees/polynumeric)  - [``pdcurses``](https://github.com/lcrees/pdcurses)  - [``romans``](https://github.com/lcrees/romans)  - [``libsvm``](https://github.com/nim-lang/libsvm_legacy)  - [``joyent_http_parser``](https://github.com/nim-lang/joyent_http_parser)- Proc [toCountTable](https://nim-lang.org/docs/tables.html#toCountTable,openArray[A])  now produces a `CountTable` with values corresponding to the number of occurrences  of the key in the input. It used to produce a table with all values set to `1`.  Counting occurrences in a sequence used to be:  ```nim  let mySeq = @[1, 2, 1, 3, 1, 4]  var myCounter = initCountTable[int]()  for item in mySeq:    myCounter.inc item  ```  Now, you can simply do:  ```nim  let    mySeq = @[1, 2, 1, 3, 1, 4]    myCounter = mySeq.toCountTable()  ```- If you use ``--dynlibOverride:ssl`` with OpenSSL 1.0.x, you now have to  define ``openssl10`` symbol (``-d:openssl10``). By default OpenSSL 1.1.x is  assumed.- ``newNativeSocket`` is now named ``createNativeSocket``.- ``newAsyncNativeSocket`` is now named ``createAsyncNativeSocket``  and it no longer raises an OS error but returns an ``osInvalidSocket`` when  creation fails.- The ``securehash`` module is now deprecated. Instead import ``std / sha1``.- The ``readPasswordFromStdin`` proc has been moved from the ``rdstdin``  to the ``terminal`` module, thus it does not depend on linenoise anymore.### Breaking changes in the compiler- ``\\n`` is now only the single line feed character like in most  other programming languages. The new platform specific newline escape sequence is  written as ``\\p``. This change only affects the Windows platform.- The overloading rules changed slightly so that constrained generics are  preferred over unconstrained generics. (Bug #6526)- We changed how array accesses \"from backwards\" like ``a[^1]`` or ``a[0..^1]`` are  implemented. These are now implemented purely in ``system.nim`` without compiler  support. There is a new \"heterogeneous\" slice type ``system.HSlice`` that takes 2  generic parameters which can be ``BackwardsIndex`` indices. ``BackwardsIndex`` is  produced by ``system.^``.  This means if you overload ``[]`` or ``[]=`` you need to ensure they also work  with ``system.BackwardsIndex`` (if applicable for the accessors).- The parsing rules of ``if`` expressions were changed so that multiple  statements are allowed in the branches. We found few code examples that  now fail because of this change, but here is one:  ```nim  t[ti] = if exp_negative: '-' else: '+'; inc(ti)  ```  This now needs to be written as:  ```nim  t[ti] = (if exp_negative: '-' else: '+'); inc(ti)  ```- The experimental overloading of the dot ``.`` operators now take  an ``untyped`` parameter as the field name, it used to be  a ``static[string]``. You can use ``when defined(nimNewDot)`` to make  your code work with both old and new Nim versions.  See [special-operators](https://nim-lang.org/docs/manual.html#special-operators)  for more information.- ``yield`` (or ``await`` which is mapped to ``yield``) never worked reliably  in an array, seq or object constructor and is now prevented at compile-time.## Library additions- Added ``sequtils.mapLiterals`` for easier construction of array and tuple literals.- Added ``system.runnableExamples`` to make examples in Nim's documentation easier  to write and test. The examples are tested as the last step of  ``nim doc``.- Implemented ``getIoHandler`` proc in the ``asyncdispatch`` module that allows  you to retrieve the underlying IO Completion Port or ``Selector[AsyncData]``  object in the specified dispatcher.- For string formatting / interpolation a new module  called [strformat](https://nim-lang.org/docs/strformat.html) has been added  to the stdlib.- The `ReadyKey` type in the selectors module now contains an ``errorCode``  field to help distinguish between ``Event.Error`` events.- Implemented an `accept` proc that works on a `SocketHandle` in  ``nativesockets``.- Added ``algorithm.rotateLeft``.- Added ``typetraits.$`` as an alias for ``typetraits.name``.- Added ``system.getStackTraceEntries`` that allows you to access the stack  trace in a structured manner without string parsing.- Added ``parseutils.parseSaturatedNatural``.- Added ``macros.unpackVarargs``.- Added support for asynchronous programming for the JavaScript backend using  the `asyncjs` module.- Added true color support for some terminals. Example:  ```nim  import colors, terminal  const Nim = \"Efficient and expressive programming.\"  var    fg = colYellow    bg = colBlue    int = 1.0  enableTrueColors()  for i in 1..15:    styledEcho bgColor, bg, fgColor, fg, Nim, resetStyle    int -= 0.01    fg = intensity(fg, int)  setForegroundColor colRed  setBackgroundColor colGreen  styledEcho \"Red on Green.\", resetStyle  ```## Library changes- ``echo`` now works with strings that contain ``\\0`` (the binary zero is not  shown) and ``nil`` strings are equal to empty strings.- JSON: Deprecated `getBVal`, `getFNum`, and `getNum` in favour of  `getBool`, `getFloat`, `getBiggestInt`. A new `getInt` procedure was also  added.- ``rationals.toRational`` now uses an algorithm based on continued fractions.  This means its results are more precise and it can't run into an infinite loop  anymore.- ``os.getEnv`` now takes an optional ``default`` parameter that tells ``getEnv``  what to return if the environment variable does not exist.- The ``random`` procs in ``random.nim`` have all been deprecated. Instead use  the new ``rand`` procs. The module now exports the state of the random  number generator as type ``Rand`` so multiple threads can easily use their  own random number generators that do not require locking. For more information  about this rename see issue [#6934](https://github.com/nim-lang/Nim/issues/6934)- ``writeStackTrace`` is now proclaimed to have no IO effect (even though it does)  so that it is more useful for debugging purposes.- ``db_mysql`` module: ``DbConn`` is now a ``distinct`` type that doesn't expose the  details of the underlying ``PMySQL`` type.- ``parseopt2`` is now deprecated, use ``parseopt`` instead.## Language additions- It is now possible to forward declare object types so that mutually  recursive types can be created across module boundaries. See  [package level objects](https://nim-lang.org/docs/manual.html#package-level-objects)  for more information.- Added support for casting between integers of same bitsize in VM (compile time and nimscript).  This allows to, among other things, reinterpret signed integers as unsigned.- Custom pragmas are now supported using pragma ``pragma``, please see language  manual for details.- Standard library modules can now also be imported via the ``std`` pseudo-directory.  This is useful in order to distinguish between standard library and nimble package  imports:  ```nim  import std / [strutils, os, osproc]  import someNimblePackage / [strutils, os]  ```## Language changes- The **unary** ``<`` is now deprecated, for ``.. <`` use ``..<`` for other usages  use the ``pred`` proc.- Bodies of ``for`` loops now get their own scope:  ```nim  # now compiles:  for i in 0..4:    let i = i + 1    echo i  ```- To make Nim even more robust the system iterators ``..`` and ``countup``  now only accept a single generic type ``T``. This means the following code  doesn't die with an \"out of range\" error anymore:  ```nim  var b = 5.Natural  var a = -5  for i in a..b:    echo i  ```- ``atomic`` and ``generic`` are no longer keywords in Nim. ``generic`` used to be  an alias for ``concept``, ``atomic`` was not used for anything.- The memory manager now uses a variant of the TLSF algorithm that has much  better memory fragmentation behaviour. According  to [http://www.gii.upv.es/tlsf/](http://www.gii.upv.es/tlsf/) the maximum  fragmentation measured is lower than 25%. As a nice bonus ``alloc`` and  ``dealloc`` became O(1) operations.- The compiler is now more consistent in its treatment of ambiguous symbols:  Types that shadow procs and vice versa are marked as ambiguous (bug #6693).- codegenDecl pragma now works for the JavaScript backend. It returns an empty  string for function return type placeholders.- Extra semantic checks for procs with noreturn pragma: return type is not allowed,  statements after call to noreturn procs are no longer allowed.- Noreturn proc calls and raising exceptions branches are now skipped during common type  deduction in ``if`` and ``case`` expressions. The following code snippets now compile:  ```nim  import strutils  let str = \"Y\"  let a = case str:    of \"Y\": true    of \"N\": false    else: raise newException(ValueError, \"Invalid boolean\")  let b = case str:    of nil, \"\": raise newException(ValueError, \"Invalid boolean\")    elif str.startsWith(\"Y\"): true    elif str.startsWith(\"N\"): false    else: false  let c = if str == \"Y\": true    elif str == \"N\": false    else:      echo \"invalid bool\"      quit(\"this is the end\")  ```- Pragmas now support call syntax, for example: ``{.exportc\"myname\".}`` and  ``{.exportc(\"myname\").}``- The ``deprecated`` pragma now supports a user-definable warning message for procs.  ```nim  proc bar {.deprecated: \"use foo instead\".} =    return  bar()  ```## Tool changes- The ``nim doc`` command is now an alias for ``nim doc2``, the second version of  the documentation generator. The old version 1 can still be accessed  via the new ``nim doc0`` command.- Nim's ``rst2html`` command now supports the testing of code snippets via an RST  extension that we called ``:test:``::  ```rst  .. code-block:: nim      :test:    # shows how the 'if' statement works    if true: echo \"yes\"  ```## Bugfixes- Fixed \"ReraiseError when using try/except within finally block\"  ([#5871](https://github.com/nim-lang/Nim/issues/5871))- Fixed \"Range type inference leads to counter-intuitive behvaiour\"  ([#5854](https://github.com/nim-lang/Nim/issues/5854))- Fixed \"JSON % operator can fail in extern procs with dynamic types\"  ([#6385](https://github.com/nim-lang/Nim/issues/6385))- Fixed \"\"intVal is not accessible\" in VM\"  ([#6083](https://github.com/nim-lang/Nim/issues/6083))- Fixed \"Add excl for OrderedSet\"  ([#2467](https://github.com/nim-lang/Nim/issues/2467))- Fixed \"newSeqOfCap actually doesn't reserve memory\"  ([#6403](https://github.com/nim-lang/Nim/issues/6403))- Fixed \"[Regression] Nim segfaults\"  ([#6435](https://github.com/nim-lang/Nim/issues/6435))- Fixed \"Seq assignment is slower than expected\"  ([#6433](https://github.com/nim-lang/Nim/issues/6433))- Fixed \"json module issues with empty dicts and lists\"  ([#6438](https://github.com/nim-lang/Nim/issues/6438))- Fixed \"mingw installed via finish.exe fails to link if Nim located in path with whitespace\"  ([#6452](https://github.com/nim-lang/Nim/issues/6452))- Fixed \"unittest.check does not perform short-circuit evaluation\"  ([#5784](https://github.com/nim-lang/Nim/issues/5784))- Fixed \"Error while concatenating an array of chars.\"  ([#5861](https://github.com/nim-lang/Nim/issues/5861))- Fixed \"range initialization: [ProveInit] hint: Cannot prove that\"  ([#6474](https://github.com/nim-lang/Nim/issues/6474))- Fixed \"scanf can call procs with side-effects multiple times\"  ([#6487](https://github.com/nim-lang/Nim/issues/6487))- Fixed \"gcsafe detection problem\"  ([#5620](https://github.com/nim-lang/Nim/issues/5620))- Fixed \"C++ codegen: `mitems` generates invalid code.\"  ([#4910](https://github.com/nim-lang/Nim/issues/4910))- Fixed \"strange runtime behavior on macOS\"  ([#6496](https://github.com/nim-lang/Nim/issues/6496))- Fixed \"stdtmpl: invalid indentation after a line ending in question mark\"  ([#5070](https://github.com/nim-lang/Nim/issues/5070))- Fixed \"Windows: NAN troubles on c backend\"  ([#6511](https://github.com/nim-lang/Nim/issues/6511))- Fixed \"lib/nim/system/cellsets.nim(33, 31) Error: type mismatch while attempting to compile for 16bit CPUs\"  ([#3558](https://github.com/nim-lang/Nim/issues/3558))- Fixed \"Can't compile dynlib with ``-d:useNimRtl`` and ``--threads:on``\"  ([#5143](https://github.com/nim-lang/Nim/issues/5143))- Fixed \"var s = @[0,1,2,...] can generate thousand of single assignments in C code\"  ([#5007](https://github.com/nim-lang/Nim/issues/5007))- Fixed \"`echo` discards everything after a null character\"  ([#1137](https://github.com/nim-lang/Nim/issues/1137))- Fixed \"Turn off reExtended by default\"  ([#5627](https://github.com/nim-lang/Nim/issues/5627))- Fixed \"Bad Links in docs/backends.html\"  ([#5914](https://github.com/nim-lang/Nim/issues/5914))- Fixed \"Index out of bounds error in db_postgres when executing non parameter-substituted queries containing \"?\"\"  ([#6571](https://github.com/nim-lang/Nim/issues/6571))- Fixed \"Please add pipe2 support to posix stdlib\"  ([#6553](https://github.com/nim-lang/Nim/issues/6553))- Fixed \"Return semantics vary depending on return style\"  ([#6422](https://github.com/nim-lang/Nim/issues/6422))- Fixed \"parsecsv.open reports SIGSEGV when calling 'open' on missing file\"  ([#6148](https://github.com/nim-lang/Nim/issues/6148))- Fixed \"VCC: Nim generates non-compilable code for system.nim\"  ([#6606](https://github.com/nim-lang/Nim/issues/6606))- Fixed \"Generic subtype matches worse than a generic\"  ([#6526](https://github.com/nim-lang/Nim/issues/6526))- Fixed \"formatFloat inconsistent scientific notation\"  ([#6589](https://github.com/nim-lang/Nim/issues/6589))- Fixed \"Generated c code calls function twice\"  ([#6292](https://github.com/nim-lang/Nim/issues/6292))- Fixed \"Range type inference leads to counter-intuitive behvaiour\"  ([#5854](https://github.com/nim-lang/Nim/issues/5854))- Fixed \"New backward indexing is too limited\"  ([#6631](https://github.com/nim-lang/Nim/issues/6631))- Fixed \"Table usage in a macro (SIGSEGV: Illegal storage access.)\"  ([#1860](https://github.com/nim-lang/Nim/issues/1860))- Fixed \"Incorrect deprecation error\"  ([#6634](https://github.com/nim-lang/Nim/issues/6634))- Fixed \"Wrong indices in arrays not starting with 0\"  ([#6675](https://github.com/nim-lang/Nim/issues/6675))- Fixed \"if expressions\"  ([#6609](https://github.com/nim-lang/Nim/issues/6609))- Fixed \"BackwardsIndex: converter + `[]` + unrelated type[^1]: lib/system.nim(3536, 3) Error\"  ([#6692](https://github.com/nim-lang/Nim/issues/6692))- Fixed \"js backend 0.17.3: array bounds check for non zero based arrays is buggy\"  ([#6532](https://github.com/nim-lang/Nim/issues/6532))- Fixed \"HttpClient's new API doesn't work through a proxy for https URLs\"  ([#6685](https://github.com/nim-lang/Nim/issues/6685))- Fixed \"isServing isn't declared and isn't compiling\"  ([#6707](https://github.com/nim-lang/Nim/issues/6707))- Fixed \"[Regression] value out of range\"  ([#6710](https://github.com/nim-lang/Nim/issues/6710))- Fixed \"Error when using `multisync` macro\"  ([#6708](https://github.com/nim-lang/Nim/issues/6708))- Fixed \"formatFloat inconsistent scientific notation\"  ([#6589](https://github.com/nim-lang/Nim/issues/6589))- Fixed \"Using : (constructor arguments) for passing values to functions with default arguments causes a compiler crash.\"  ([#6765](https://github.com/nim-lang/Nim/issues/6765))- Fixed \"In-place object initialization leads to vcc incompatible code\"  ([#6757](https://github.com/nim-lang/Nim/issues/6757))- Fixed \"Improve parseCookies doc\"  ([#5721](https://github.com/nim-lang/Nim/issues/5721))- Fixed \"Parser regression with nested do notation inside conditional\"  ([#6166](https://github.com/nim-lang/Nim/issues/6166))- Fixed \"Request for better error message\"  ([#6776](https://github.com/nim-lang/Nim/issues/6776))- Fixed \"Testament tester does not execute test with `exitcode` only\"  ([#6775](https://github.com/nim-lang/Nim/issues/6775))- Fixed \"JS integer division off by one\"  ([#6753](https://github.com/nim-lang/Nim/issues/6753))- Fixed \"Regression: cannot prove not nil\"  ([#5781](https://github.com/nim-lang/Nim/issues/5781))- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?) in generic proc\"  ([#6073](https://github.com/nim-lang/Nim/issues/6073))- Fixed \"Request for better error message\"  ([#6776](https://github.com/nim-lang/Nim/issues/6776))- Fixed \"Nim #head: sorting via reference hangs compiler\"  ([#6724](https://github.com/nim-lang/Nim/issues/6724))- Fixed \"Cannot cast pointer to char in cpp\"  ([#5979](https://github.com/nim-lang/Nim/issues/5979))- Fixed \"asynchttpserver replies with several errors on single request\"  ([#6386](https://github.com/nim-lang/Nim/issues/6386))- Fixed \"object variants superclass trigger bad codegen\"  ([#5521](https://github.com/nim-lang/Nim/issues/5521))- Fixed \"JS integer division off by one\"  ([#6753](https://github.com/nim-lang/Nim/issues/6753))- Fixed \"js backend compiler crash with tables indexed by certain types\"  ([#6568](https://github.com/nim-lang/Nim/issues/6568))- Fixed \"Jsgen bug with is\"  ([#6445](https://github.com/nim-lang/Nim/issues/6445))- Fixed \"Subrange definition with ..<\"  ([#6788](https://github.com/nim-lang/Nim/issues/6788))- Fixed \"fields not initialized: array with enum index type as object field.\"  ([#6682](https://github.com/nim-lang/Nim/issues/6682))- Fixed \"Can not delete data in table when table's data type is kind of \"not nil\"\"  ([#6555](https://github.com/nim-lang/Nim/issues/6555))- Fixed \"tables.nim: Cannot prove that 'n' is initialized\"  ([#6121](https://github.com/nim-lang/Nim/issues/6121))- Fixed \"issues with 'not nil' applied to a closure proc\"  ([#6489](https://github.com/nim-lang/Nim/issues/6489))- Fixed \"`not nil` not working in some cases\"  ([#4686](https://github.com/nim-lang/Nim/issues/4686))- Fixed \"Cannot prove '@[v]' is not nil\"  ([#3993](https://github.com/nim-lang/Nim/issues/3993))- Fixed \"Feature: support TCP_NODELAY in net.sockets\"  ([#6795](https://github.com/nim-lang/Nim/issues/6795))- Fixed \"Code that makes the compiler throw an error message and then hangs\"  ([#6820](https://github.com/nim-lang/Nim/issues/6820))- Fixed \"Code that makes the compiler throw an error message and then hangs\"  ([#6820](https://github.com/nim-lang/Nim/issues/6820))- Fixed \"Inconsistent behavior with sequence and string slicing\"  ([#6223](https://github.com/nim-lang/Nim/issues/6223))- Fixed \"Wrong behavior of \"split\" (proc and iterator)\"  ([#4377](https://github.com/nim-lang/Nim/issues/4377))- Fixed \"[Documentation] Invalid module name: [foo, bar]\"  ([#6831](https://github.com/nim-lang/Nim/issues/6831))- Fixed \"The destructor is not called for temporary objects\"  ([#4214](https://github.com/nim-lang/Nim/issues/4214))- Fixed \"Destructors does not work with implicit items iterator in for loop\"  ([#985](https://github.com/nim-lang/Nim/issues/985))- Fixed \"Error in template when using the type of the parameter inside it\"  ([#6756](https://github.com/nim-lang/Nim/issues/6756))- Fixed \"should json.to() respect parent attributes?\"  ([#5856](https://github.com/nim-lang/Nim/issues/5856))- Fixed \"json 'to' macro can not marshalize into tuples\"  ([#6095](https://github.com/nim-lang/Nim/issues/6095))- Fixed \"json.to fails with seq[T]\"  ([#6604](https://github.com/nim-lang/Nim/issues/6604))- Fixed \"json.to() is not worth using compared to marshal.to[T]\"  ([#5848](https://github.com/nim-lang/Nim/issues/5848))- Fixed \"Memory not being released in time, running out of memory\"  ([#6031](https://github.com/nim-lang/Nim/issues/6031))- Fixed \"[Regression] Bad C codegen for generic code\"  ([#6889](https://github.com/nim-lang/Nim/issues/6889))- Fixed \"rollingFileLogger deletes file on every start.\"  ([#6264](https://github.com/nim-lang/Nim/issues/6264))- Fixed \"Remove/deprecate securehash module.\"  ([#6033](https://github.com/nim-lang/Nim/issues/6033))- Fixed \"[bug or not] object construction for seq[T] failed without space after colon\"  ([#5999](https://github.com/nim-lang/Nim/issues/5999))- Fixed \"issues with the random module\"  ([#4726](https://github.com/nim-lang/Nim/issues/4726))- Fixed \"Reassigning local var to seq of objects results in nil element in Object's seq field\"  ([#668](https://github.com/nim-lang/Nim/issues/668))- Fixed \"Compilation error with \"newseq[string]\"\"  ([#6726](https://github.com/nim-lang/Nim/issues/6726))- Fixed \"await inside array/dict literal produces invalid code - Part 2\"  ([#6626](https://github.com/nim-lang/Nim/issues/6626))- Fixed \"terminal.eraseline() gives OverflowError on Windows\"  ([#6931](https://github.com/nim-lang/Nim/issues/6931))- Fixed \"[Regression] `sequtils.any` conflicts with `system.any`\"  ([#6932](https://github.com/nim-lang/Nim/issues/6932))- Fixed \"C++ codegen: `mitems` generates invalid code.\"  ([#4910](https://github.com/nim-lang/Nim/issues/4910))- Fixed \"seq.mitems produces invalid cpp codegen\"  ([#6892](https://github.com/nim-lang/Nim/issues/6892))- Fixed \"Concepts regression\"  ([#6108](https://github.com/nim-lang/Nim/issues/6108))- Fixed \"Generic iterable concept with array crashes compiler\"  ([#6277](https://github.com/nim-lang/Nim/issues/6277))- Fixed \"C code generation \"‘a’ is a pointer; did you mean to use ‘->’?\"\"  ([#6462](https://github.com/nim-lang/Nim/issues/6462))- Fixed \"`--NimblePath` fails if a `-` in path which is not followed by a number\"  ([#6949](https://github.com/nim-lang/Nim/issues/6949))- Fixed \"\"not registered in the selector\" in asyncfile.close() for something that clearly was registered\"  ([#6906](https://github.com/nim-lang/Nim/issues/6906))- Fixed \"strange frexp behavior\"  ([#6353](https://github.com/nim-lang/Nim/issues/6353))- Fixed \"noreturn branches of case statements shouldn't contribute to type\"  ([#6885](https://github.com/nim-lang/Nim/issues/6885))- Fixed \"Type inference for 'if' statements changed\"  ([#6980](https://github.com/nim-lang/Nim/issues/6980))- Fixed \"newest asyncdispatch recursion\"  ([#6100](https://github.com/nim-lang/Nim/issues/6100))- Fixed \"Ambiguous identifier between set type and proc\"  ([#6965](https://github.com/nim-lang/Nim/issues/6965))- Fixed \"Inconsistent behavior with sequence and string slicing\"  ([#6223](https://github.com/nim-lang/Nim/issues/6223))- Fixed \"Unsupported OpenSSL library imported dynamically\"  ([#5000](https://github.com/nim-lang/Nim/issues/5000))- Fixed \"`nim check` segfaults\"  ([#6972](https://github.com/nim-lang/Nim/issues/6972))- Fixed \"GC deadlock\"  ([#6988](https://github.com/nim-lang/Nim/issues/6988))- Fixed \"Create a seq without memory initialization\"  ([#6401](https://github.com/nim-lang/Nim/issues/6401))- Fixed \"Fix bug for getch on Windows while using the arrow keys\"  ([#6966](https://github.com/nim-lang/Nim/issues/6966))- Fixed \"runnableExamples doesn't work in templates\"  ([#7018](https://github.com/nim-lang/Nim/issues/7018))- Fixed \"runnableExamples doesn't work with untyped statement blocks\"  ([#7019](https://github.com/nim-lang/Nim/issues/7019))- Fixed \"Critical bug in parseBiggestFloat\"  ([#7060](https://github.com/nim-lang/Nim/issues/7060))- Fixed \"[RFC] strformat.% should be gone\"  ([#7078](https://github.com/nim-lang/Nim/issues/7078))- Fixed \"compiler crash on simple macro\"  ([#7093](https://github.com/nim-lang/Nim/issues/7093))- Fixed \"Make newlines sane again\"  ([#7089](https://github.com/nim-lang/Nim/issues/7089))- Fixed \"JS - Unicode enum string representation issue\"  ([#6741](https://github.com/nim-lang/Nim/issues/6741))- Fixed \"Strange behaviour of 0.17.3 (working ok in 0.17.2)\"  ([#6989](https://github.com/nim-lang/Nim/issues/6989))- Fixed \"Strange behaviour of 0.17.3 (working ok in 0.17.2)\"  ([#6989](https://github.com/nim-lang/Nim/issues/6989))- Fixed \"Compiler crash: try expression with infix as\"  ([#7116](https://github.com/nim-lang/Nim/issues/7116))- Fixed \"nimsuggest crash\"  ([#7140](https://github.com/nim-lang/Nim/issues/7140))- Fixed \"[RFC] Reintroduce readChar\"  ([#7072](https://github.com/nim-lang/Nim/issues/7072))- Fixed \"Copyright line needs updating\"  ([#7129](https://github.com/nim-lang/Nim/issues/7129))- Fixed \"-0.0 doesn't result in negative zero in VM\"  ([#7079](https://github.com/nim-lang/Nim/issues/7079))- Fixed \"Windows large filesize\"  ([#7121](https://github.com/nim-lang/Nim/issues/7121))- Fixed \"Securehash is not parsimonious with MD5 and other hash modules\"  ([#6961](https://github.com/nim-lang/Nim/issues/6961))- Fixed \"os.findExe() shouldn't look in current directory on posix, unless exe has a /\"  ([#6939](https://github.com/nim-lang/Nim/issues/6939))- Fixed \"`compiles(...)` with `fatal` pragma causes compiler to exit early\"  ([#7080](https://github.com/nim-lang/Nim/issues/7080))- Fixed \"NPE when compile macro that returns concrete value\"  ([#5450](https://github.com/nim-lang/Nim/issues/5450))- Fixed \"Using a variable of type `int | float` causes internal compiler error\"  ([#6946](https://github.com/nim-lang/Nim/issues/6946))- Fixed \"Unsigned integers could not be used as array indexes.\"  ([#7153](https://github.com/nim-lang/Nim/issues/7153))- Fixed \"countdown with uint causes underflow\"  ([#4220](https://github.com/nim-lang/Nim/issues/4220))- Fixed \"Inconsistent method call syntax\"  ([#7200](https://github.com/nim-lang/Nim/issues/7200))- Fixed \"Impossible to create an empty const array\"  ([#6853](https://github.com/nim-lang/Nim/issues/6853))- Fixed \"Strange UINT handling\"  ([#3985](https://github.com/nim-lang/Nim/issues/3985))- Fixed \"Bad codegen when passing arg that is part of return value destination\"  ([#6960](https://github.com/nim-lang/Nim/issues/6960))- Fixed \"No info about gcsafety in error message when global var is accessed in async proc\"  ([#6186](https://github.com/nim-lang/Nim/issues/6186))- Fixed \"Resolving package vs. local import ambiguities\"  ([#2819](https://github.com/nim-lang/Nim/issues/2819))- Fixed \"Internal error with type() operator\"  ([#3711](https://github.com/nim-lang/Nim/issues/3711))- Fixed \"newAsyncSocket should raise an OS error plus other inconsistencies\"  ([#4995](https://github.com/nim-lang/Nim/issues/4995))- Fixed \"mapLiterals fails with negative values\"  ([#7215](https://github.com/nim-lang/Nim/issues/7215))- Fixed \"fmWrite doesn't truncate file with openAsync, unlike open()\"  ([#5531](https://github.com/nim-lang/Nim/issues/5531))- Fixed \"Move libsvm to an external nimble module\"  ([#5786](https://github.com/nim-lang/Nim/issues/5786))- Fixed \"Prevent acceptAddr gotcha with newSocket\"  ([#7227](https://github.com/nim-lang/Nim/issues/7227))- Fixed \"strtabs.getOrDefault is inconsistent with tables.getOrDefault\"  ([#4265](https://github.com/nim-lang/Nim/issues/4265))- Fixed \"Code falling through into exception handler when no exception thrown.\"  ([#7232](https://github.com/nim-lang/Nim/issues/7232))- Fixed \"the new generic inference rules are broken\"  ([#7247](https://github.com/nim-lang/Nim/issues/7247))- Fixed \"Odd `..<` regression\"  ([#6992](https://github.com/nim-lang/Nim/issues/6992))- Fixed \"Different proc type inferred from default parameter\"  ([#4659](https://github.com/nim-lang/Nim/issues/4659))- Fixed \"Different proc type inferred from default parameter\"  ([#4659](https://github.com/nim-lang/Nim/issues/4659))- Fixed \"Testament sometimes ignores test failures\"  ([#7236](https://github.com/nim-lang/Nim/issues/7236))- Fixed \"New Allocator Fails On >=4GB Requests\"  ([#7120](https://github.com/nim-lang/Nim/issues/7120))- Fixed \"User pragmas hide effect specifications from sempass2\"  ([#7216](https://github.com/nim-lang/Nim/issues/7216))- Fixed \"C++: SIGABRT instead of IndexError for out-of-bounds\"  ([#6512](https://github.com/nim-lang/Nim/issues/6512))- Fixed \"An uncaught exception in cpp mode doesn't show the exception name/msg\"  ([#6431](https://github.com/nim-lang/Nim/issues/6431))", "content_with_meta": "---\ntitle: \"Version 0.18.0 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.18.0, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\n# Installing 0.18.0\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.18.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim manually by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\nNote that Windows users might still have an easier time with the\nunzip+finish.exe method of installing Nim which is described on the\n[install](https://nim-lang.org/install.html) page.\n\n# What's new in 0.18.0\n\nIt's been a while since our last release, but we've been busy. At over 1000\ncommits since the last release, v0.18.0 is one of (if not the) biggest releases\nof Nim ever.\n\nWe have mentioned multiple times that this will be a major release. Primarily\nbecause our goal has been to clean up the standard library significantly in\npreparation for v1.0. We've made massive progress in this release to achieve\nthat goal. The downside is that this release has a much larger proportion of\nbreaking changes than normal releases, but it is all in the spirit of a cleaner\nNim v1.0.\n\n## Breaking changes to be mindful of\n\nYou will find that the `[]` indexing operator which takes a slice now raises\nan ``IndexError`` exception when it is out of bounds. Previously it would have\nsimply returned the part of the string that was captured. You may find that your\nprogram hasn't taken this into account and will now crash with an ``IndexError``\nexception. To get back the previous behaviour, use the ``substr`` procedure.\nHere is an example of the issue and how to get around it:\n\n```nim\nvar myString = \"hello world\"\ndoAssertRaises IndexError:\n  discard myString[6 .. 45]\ndoAssert myString.substr(6, 45) == \"world\"\n```\n\nThe ``$`` operator now handles collections differently. For example:\n\n```nim\ndoAssert $(@[\"23\", \"12\"]) == \"@[\\\"23\\\", \\\"12\\\"]\"\n\n# Whereas in 0.17.2:\ndoAssert $(@[\"23\", \"12\"]) == \"@[23, 12]\"\n```\n\nAn ``array[x, char]`` can no longer be converted to a ``cstring`` type. This\nhas the side-effect of allowing ``$`` to be defined on an array:\n\n```nim\nvar x: array[5, char]\n\ndoAssert $x == r\"['\\x00', '\\x00', '\\x00', '\\x00', '\\x00']\"\n```\n\nBe sure to check out the changelog below for a comprehensive list of\nbreaking changes. If you run into any strange regressions feel free to pop into\nIRC, Gitter, Discord or any of the other chat rooms/forums we have available.\nLinks to them all are available in our [community page](https://nim-lang.org/community.html).\n\n## New features\n\nOf course, this being a major new release, there are also plenty of new\nfeatures.\n\n## Formatted string literals\n\nThe greatest new addition is the ``strformat`` module. It implements string\nformatting that is very similar to Python 3's f-strings.\n\nFormatted string literals are prefixed with ``fmt`` or the ``&`` operator:\n\n```nim\nimport strformat\n\nlet name = \"Fred\"\nlet age = 24\nlet weight = 94.52\n\ndoAssert fmt\"My name is {name}. I'm {age} years of age and weigh {weight:.3f}.\" ==\n            \"My name is Fred. I'm 24 years of age and weigh 94.520.\"\n```\n\nFor more information, take a look at the\n[``strformat`` documentation](https://nim-lang.org/docs/strformat.html).\n\n## Testable documentation examples\n\nThe documentation generator can now test your examples for you! This is done\nusing the new ``runnableExamples`` macro.\n\n```nim\nproc add*(x, y: int): int =\n  ## Adds two numbers together.\n  ##\n  ## Examples:\n  ##\n  runnableExamples:\n    doAssert add(5, 5) == 10\n    doAssert add(-5, 2) == -3\n\n  x + y\n```\n\nIf you save this as ``addLib.nim`` and then generate its documentation via\n``nim doc addLib.nim``, you should see something like this:\n\n```\nHint: /tmp/addLib_examples  [Exec]\nHint: operation successful (13129 lines compiled; 0.492 sec total; 19.742MiB peakmem; Debug Build) [SuccessX]\n```\n\nThe code under ``runnableExamples`` will be embedded in the procedure's\ndocumentation.\n\nIf your examples have an error in them then you will see it, together with a\nstack trace if your error occurs at runtime.\nThis is great for ensuring that your documentation is up-to-date.\n\n## ``mapLiterals``\n\nThis is a new macro that allows you to easily create array and sequence literals.\n\n```nim\nimport sequtils\n\nlet x = mapLiterals([12, 34, 15, 1], uint32)\ndoAssert x is array[4, uint32]\n```\n\n## New memory manager algorithm\n\nThe new TLSF algorithm has been implemented to reduce memory fragmentation.\nThis has a side effect of making ``alloc`` and ``dealloc`` O(1) operations.\n\n## Async improvements\n\nThere have been a number of various improvements to the asynchronous IO\nmodules in the stdlib. There is no longer an \"upcoming\" and standard\nasyncdispatch split, the former was merged and is now the default asyncdispatch\nimplementation.\n\nA new ``getIoHandler`` procedure is now available, it returns a handle\nto the underlying IO completion port or epoll/kqueue fd used by asyncdispatch.\nMain advantage of this is that libraries now have even greater control over the\nevent loop.\nAs an example, it allows much more efficient HTTP server implementations\n(one such implementation is called [httpbeast](https://github.com/dom96/httpbeast)).\n\nA new implementation of async await has also been added for the JavaScript\nbackend in the ``asyncjs`` module.\n\n## Nimble v0.8.10\n\nIn the release are also updates to the Nim package manager. The latest version\nof Nimble is included and contains multiple new features and bug fixes.\n\nThe major new feature is the support for multiple Nimble packages in a single\nGit/Hg repository.\n\nCheck out the\n[changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown)\nfor a list of changes since Nimble's last release.\n\n## Contributors to v0.18.0\n\nOur contributors are amazing, and there is\n[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to list\nhere. Big thanks to all of you, we couldn't have pulled off this release\nwithout you!\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n### Breaking changes in the standard library\n\n- The ``[]`` proc for strings now raises an ``IndexError`` exception when\n  the specified slice is out of bounds. See issue\n  [#6223](https://github.com/nim-lang/Nim/issues/6223) for more details.\n  You can use ``substr(str, start, finish)`` to get the old behaviour back,\n  see [this commit](https://github.com/nim-lang/nimbot/commit/98cc031a27ea89947daa7f0bb536bcf86462941f) for an example.\n\n- ``strutils.split`` and ``strutils.rsplit`` with an empty string and a\n  separator now returns that empty string.\n  See issue [#4377](https://github.com/nim-lang/Nim/issues/4377).\n\n- Arrays of char cannot be converted to ``cstring`` anymore, pointers to\n  arrays of char can! This means ``$`` for arrays can finally exist\n  in ``system.nim`` and do the right thing. This means ``$myArrayOfChar`` changed\n  its behaviour! Compile with ``-d:nimNoArrayToString`` to see where to fix your\n  code.\n\n- `reExtended` is no longer default for the `re` constructor in the `re`\n  module.\n\n- The behavior of ``$`` has been changed for all standard library collections. The\n  collection-to-string implementations now perform proper quoting and escaping of\n  strings and chars.\n\n- `newAsyncSocket` taking an `AsyncFD` now runs `setBlocking(false)` on the\n  fd.\n\n- ``mod`` and bitwise ``and`` do not produce ``range`` subtypes anymore. This\n  turned out to be more harmful than helpful and the language is simpler\n  without this special typing rule.\n\n- ``formatFloat``/``formatBiggestFloat`` now support formatting floats with zero\n  precision digits. The previous ``precision = 0`` behavior (default formatting)\n  is now available via ``precision = -1``.\n\n- Moved from stdlib into Nimble packages:\n  - [``basic2d``](https://github.com/nim-lang/basic2d)\n    _deprecated: use ``glm``, ``arraymancer``, ``neo``, or another package instead_\n  - [``basic3d``](https://github.com/nim-lang/basic3d)\n    _deprecated: use ``glm``, ``arraymancer``, ``neo``, or another package instead_\n  - [``gentabs``](https://github.com/lcrees/gentabs)\n  - [``libuv``](https://github.com/lcrees/libuv)\n  - [``polynumeric``](https://github.com/lcrees/polynumeric)\n  - [``pdcurses``](https://github.com/lcrees/pdcurses)\n  - [``romans``](https://github.com/lcrees/romans)\n  - [``libsvm``](https://github.com/nim-lang/libsvm_legacy)\n  - [``joyent_http_parser``](https://github.com/nim-lang/joyent_http_parser)\n\n- Proc [toCountTable](https://nim-lang.org/docs/tables.html#toCountTable,openArray[A])\n  now produces a `CountTable` with values corresponding to the number of occurrences\n  of the key in the input. It used to produce a table with all values set to `1`.\n\n  Counting occurrences in a sequence used to be:\n\n  ```nim\n  let mySeq = @[1, 2, 1, 3, 1, 4]\n  var myCounter = initCountTable[int]()\n\n  for item in mySeq:\n    myCounter.inc item\n  ```\n\n  Now, you can simply do:\n\n  ```nim\n  let\n    mySeq = @[1, 2, 1, 3, 1, 4]\n    myCounter = mySeq.toCountTable()\n  ```\n\n- If you use ``--dynlibOverride:ssl`` with OpenSSL 1.0.x, you now have to\n  define ``openssl10`` symbol (``-d:openssl10``). By default OpenSSL 1.1.x is\n  assumed.\n\n- ``newNativeSocket`` is now named ``createNativeSocket``.\n\n- ``newAsyncNativeSocket`` is now named ``createAsyncNativeSocket``\n  and it no longer raises an OS error but returns an ``osInvalidSocket`` when\n  creation fails.\n\n- The ``securehash`` module is now deprecated. Instead import ``std / sha1``.\n\n- The ``readPasswordFromStdin`` proc has been moved from the ``rdstdin``\n  to the ``terminal`` module, thus it does not depend on linenoise anymore.\n\n### Breaking changes in the compiler\n\n- ``\\n`` is now only the single line feed character like in most\n  other programming languages. The new platform specific newline escape sequence is\n  written as ``\\p``. This change only affects the Windows platform.\n\n- The overloading rules changed slightly so that constrained generics are\n  preferred over unconstrained generics. (Bug #6526)\n\n- We changed how array accesses \"from backwards\" like ``a[^1]`` or ``a[0..^1]`` are\n  implemented. These are now implemented purely in ``system.nim`` without compiler\n  support. There is a new \"heterogeneous\" slice type ``system.HSlice`` that takes 2\n  generic parameters which can be ``BackwardsIndex`` indices. ``BackwardsIndex`` is\n  produced by ``system.^``.\n  This means if you overload ``[]`` or ``[]=`` you need to ensure they also work\n  with ``system.BackwardsIndex`` (if applicable for the accessors).\n\n- The parsing rules of ``if`` expressions were changed so that multiple\n  statements are allowed in the branches. We found few code examples that\n  now fail because of this change, but here is one:\n\n  ```nim\n  t[ti] = if exp_negative: '-' else: '+'; inc(ti)\n  ```\n\n  This now needs to be written as:\n\n  ```nim\n  t[ti] = (if exp_negative: '-' else: '+'); inc(ti)\n  ```\n\n- The experimental overloading of the dot ``.`` operators now take\n  an ``untyped`` parameter as the field name, it used to be\n  a ``static[string]``. You can use ``when defined(nimNewDot)`` to make\n  your code work with both old and new Nim versions.\n  See [special-operators](https://nim-lang.org/docs/manual.html#special-operators)\n  for more information.\n\n- ``yield`` (or ``await`` which is mapped to ``yield``) never worked reliably\n  in an array, seq or object constructor and is now prevented at compile-time.\n\n## Library additions\n\n- Added ``sequtils.mapLiterals`` for easier construction of array and tuple literals.\n\n- Added ``system.runnableExamples`` to make examples in Nim's documentation easier\n  to write and test. The examples are tested as the last step of\n  ``nim doc``.\n\n- Implemented ``getIoHandler`` proc in the ``asyncdispatch`` module that allows\n  you to retrieve the underlying IO Completion Port or ``Selector[AsyncData]``\n  object in the specified dispatcher.\n\n- For string formatting / interpolation a new module\n  called [strformat](https://nim-lang.org/docs/strformat.html) has been added\n  to the stdlib.\n\n- The `ReadyKey` type in the selectors module now contains an ``errorCode``\n  field to help distinguish between ``Event.Error`` events.\n\n- Implemented an `accept` proc that works on a `SocketHandle` in\n  ``nativesockets``.\n\n- Added ``algorithm.rotateLeft``.\n\n- Added ``typetraits.$`` as an alias for ``typetraits.name``.\n\n- Added ``system.getStackTraceEntries`` that allows you to access the stack\n  trace in a structured manner without string parsing.\n\n- Added ``parseutils.parseSaturatedNatural``.\n\n- Added ``macros.unpackVarargs``.\n\n- Added support for asynchronous programming for the JavaScript backend using\n  the `asyncjs` module.\n\n- Added true color support for some terminals. Example:\n  ```nim\n  import colors, terminal\n\n  const Nim = \"Efficient and expressive programming.\"\n\n  var\n    fg = colYellow\n    bg = colBlue\n    int = 1.0\n\n  enableTrueColors()\n\n  for i in 1..15:\n    styledEcho bgColor, bg, fgColor, fg, Nim, resetStyle\n    int -= 0.01\n    fg = intensity(fg, int)\n\n  setForegroundColor colRed\n  setBackgroundColor colGreen\n  styledEcho \"Red on Green.\", resetStyle\n  ```\n\n## Library changes\n\n- ``echo`` now works with strings that contain ``\\0`` (the binary zero is not\n  shown) and ``nil`` strings are equal to empty strings.\n\n- JSON: Deprecated `getBVal`, `getFNum`, and `getNum` in favour of\n  `getBool`, `getFloat`, `getBiggestInt`. A new `getInt` procedure was also\n  added.\n\n- ``rationals.toRational`` now uses an algorithm based on continued fractions.\n  This means its results are more precise and it can't run into an infinite loop\n  anymore.\n\n- ``os.getEnv`` now takes an optional ``default`` parameter that tells ``getEnv``\n  what to return if the environment variable does not exist.\n\n- The ``random`` procs in ``random.nim`` have all been deprecated. Instead use\n  the new ``rand`` procs. The module now exports the state of the random\n  number generator as type ``Rand`` so multiple threads can easily use their\n  own random number generators that do not require locking. For more information\n  about this rename see issue [#6934](https://github.com/nim-lang/Nim/issues/6934)\n\n- ``writeStackTrace`` is now proclaimed to have no IO effect (even though it does)\n  so that it is more useful for debugging purposes.\n\n- ``db_mysql`` module: ``DbConn`` is now a ``distinct`` type that doesn't expose the\n  details of the underlying ``PMySQL`` type.\n\n- ``parseopt2`` is now deprecated, use ``parseopt`` instead.\n\n## Language additions\n\n- It is now possible to forward declare object types so that mutually\n  recursive types can be created across module boundaries. See\n  [package level objects](https://nim-lang.org/docs/manual.html#package-level-objects)\n  for more information.\n\n- Added support for casting between integers of same bitsize in VM (compile time and nimscript).\n  This allows to, among other things, reinterpret signed integers as unsigned.\n\n- Custom pragmas are now supported using pragma ``pragma``, please see language\n  manual for details.\n\n- Standard library modules can now also be imported via the ``std`` pseudo-directory.\n  This is useful in order to distinguish between standard library and nimble package\n  imports:\n\n  ```nim\n  import std / [strutils, os, osproc]\n  import someNimblePackage / [strutils, os]\n  ```\n\n## Language changes\n\n- The **unary** ``<`` is now deprecated, for ``.. <`` use ``..<`` for other usages\n  use the ``pred`` proc.\n\n- Bodies of ``for`` loops now get their own scope:\n\n  ```nim\n  # now compiles:\n  for i in 0..4:\n    let i = i + 1\n    echo i\n  ```\n\n- To make Nim even more robust the system iterators ``..`` and ``countup``\n  now only accept a single generic type ``T``. This means the following code\n  doesn't die with an \"out of range\" error anymore:\n\n  ```nim\n  var b = 5.Natural\n  var a = -5\n  for i in a..b:\n    echo i\n  ```\n\n- ``atomic`` and ``generic`` are no longer keywords in Nim. ``generic`` used to be\n  an alias for ``concept``, ``atomic`` was not used for anything.\n\n- The memory manager now uses a variant of the TLSF algorithm that has much\n  better memory fragmentation behaviour. According\n  to [http://www.gii.upv.es/tlsf/](http://www.gii.upv.es/tlsf/) the maximum\n  fragmentation measured is lower than 25%. As a nice bonus ``alloc`` and\n  ``dealloc`` became O(1) operations.\n\n- The compiler is now more consistent in its treatment of ambiguous symbols:\n  Types that shadow procs and vice versa are marked as ambiguous (bug #6693).\n\n- codegenDecl pragma now works for the JavaScript backend. It returns an empty\n  string for function return type placeholders.\n\n- Extra semantic checks for procs with noreturn pragma: return type is not allowed,\n  statements after call to noreturn procs are no longer allowed.\n\n- Noreturn proc calls and raising exceptions branches are now skipped during common type\n  deduction in ``if`` and ``case`` expressions. The following code snippets now compile:\n  ```nim\n  import strutils\n  let str = \"Y\"\n  let a = case str:\n    of \"Y\": true\n    of \"N\": false\n    else: raise newException(ValueError, \"Invalid boolean\")\n  let b = case str:\n    of nil, \"\": raise newException(ValueError, \"Invalid boolean\")\n    elif str.startsWith(\"Y\"): true\n    elif str.startsWith(\"N\"): false\n    else: false\n  let c = if str == \"Y\": true\n    elif str == \"N\": false\n    else:\n      echo \"invalid bool\"\n      quit(\"this is the end\")\n  ```\n\n- Pragmas now support call syntax, for example: ``{.exportc\"myname\".}`` and\n  ``{.exportc(\"myname\").}``\n\n- The ``deprecated`` pragma now supports a user-definable warning message for procs.\n\n  ```nim\n  proc bar {.deprecated: \"use foo instead\".} =\n    return\n\n  bar()\n  ```\n\n## Tool changes\n\n- The ``nim doc`` command is now an alias for ``nim doc2``, the second version of\n  the documentation generator. The old version 1 can still be accessed\n  via the new ``nim doc0`` command.\n\n- Nim's ``rst2html`` command now supports the testing of code snippets via an RST\n  extension that we called ``:test:``::\n\n  ```rst\n  .. code-block:: nim\n      :test:\n    # shows how the 'if' statement works\n    if true: echo \"yes\"\n  ```\n\n## Bugfixes\n\n- Fixed \"ReraiseError when using try/except within finally block\"\n  ([#5871](https://github.com/nim-lang/Nim/issues/5871))\n- Fixed \"Range type inference leads to counter-intuitive behvaiour\"\n  ([#5854](https://github.com/nim-lang/Nim/issues/5854))\n- Fixed \"JSON % operator can fail in extern procs with dynamic types\"\n  ([#6385](https://github.com/nim-lang/Nim/issues/6385))\n- Fixed \"\"intVal is not accessible\" in VM\"\n  ([#6083](https://github.com/nim-lang/Nim/issues/6083))\n- Fixed \"Add excl for OrderedSet\"\n  ([#2467](https://github.com/nim-lang/Nim/issues/2467))\n- Fixed \"newSeqOfCap actually doesn't reserve memory\"\n  ([#6403](https://github.com/nim-lang/Nim/issues/6403))\n- Fixed \"[Regression] Nim segfaults\"\n  ([#6435](https://github.com/nim-lang/Nim/issues/6435))\n- Fixed \"Seq assignment is slower than expected\"\n  ([#6433](https://github.com/nim-lang/Nim/issues/6433))\n- Fixed \"json module issues with empty dicts and lists\"\n  ([#6438](https://github.com/nim-lang/Nim/issues/6438))\n- Fixed \"mingw installed via finish.exe fails to link if Nim located in path with whitespace\"\n  ([#6452](https://github.com/nim-lang/Nim/issues/6452))\n- Fixed \"unittest.check does not perform short-circuit evaluation\"\n  ([#5784](https://github.com/nim-lang/Nim/issues/5784))\n- Fixed \"Error while concatenating an array of chars.\"\n  ([#5861](https://github.com/nim-lang/Nim/issues/5861))\n- Fixed \"range initialization: [ProveInit] hint: Cannot prove that\"\n  ([#6474](https://github.com/nim-lang/Nim/issues/6474))\n- Fixed \"scanf can call procs with side-effects multiple times\"\n  ([#6487](https://github.com/nim-lang/Nim/issues/6487))\n- Fixed \"gcsafe detection problem\"\n  ([#5620](https://github.com/nim-lang/Nim/issues/5620))\n- Fixed \"C++ codegen: `mitems` generates invalid code.\"\n  ([#4910](https://github.com/nim-lang/Nim/issues/4910))\n- Fixed \"strange runtime behavior on macOS\"\n  ([#6496](https://github.com/nim-lang/Nim/issues/6496))\n- Fixed \"stdtmpl: invalid indentation after a line ending in question mark\"\n  ([#5070](https://github.com/nim-lang/Nim/issues/5070))\n- Fixed \"Windows: NAN troubles on c backend\"\n  ([#6511](https://github.com/nim-lang/Nim/issues/6511))\n- Fixed \"lib/nim/system/cellsets.nim(33, 31) Error: type mismatch while attempting to compile for 16bit CPUs\"\n  ([#3558](https://github.com/nim-lang/Nim/issues/3558))\n- Fixed \"Can't compile dynlib with ``-d:useNimRtl`` and ``--threads:on``\"\n  ([#5143](https://github.com/nim-lang/Nim/issues/5143))\n- Fixed \"var s = @[0,1,2,...] can generate thousand of single assignments in C code\"\n  ([#5007](https://github.com/nim-lang/Nim/issues/5007))\n- Fixed \"`echo` discards everything after a null character\"\n  ([#1137](https://github.com/nim-lang/Nim/issues/1137))\n- Fixed \"Turn off reExtended by default\"\n  ([#5627](https://github.com/nim-lang/Nim/issues/5627))\n- Fixed \"Bad Links in docs/backends.html\"\n  ([#5914](https://github.com/nim-lang/Nim/issues/5914))\n- Fixed \"Index out of bounds error in db_postgres when executing non parameter-substituted queries containing \"?\"\"\n  ([#6571](https://github.com/nim-lang/Nim/issues/6571))\n- Fixed \"Please add pipe2 support to posix stdlib\"\n  ([#6553](https://github.com/nim-lang/Nim/issues/6553))\n- Fixed \"Return semantics vary depending on return style\"\n  ([#6422](https://github.com/nim-lang/Nim/issues/6422))\n- Fixed \"parsecsv.open reports SIGSEGV when calling 'open' on missing file\"\n  ([#6148](https://github.com/nim-lang/Nim/issues/6148))\n- Fixed \"VCC: Nim generates non-compilable code for system.nim\"\n  ([#6606](https://github.com/nim-lang/Nim/issues/6606))\n- Fixed \"Generic subtype matches worse than a generic\"\n  ([#6526](https://github.com/nim-lang/Nim/issues/6526))\n- Fixed \"formatFloat inconsistent scientific notation\"\n  ([#6589](https://github.com/nim-lang/Nim/issues/6589))\n- Fixed \"Generated c code calls function twice\"\n  ([#6292](https://github.com/nim-lang/Nim/issues/6292))\n- Fixed \"Range type inference leads to counter-intuitive behvaiour\"\n  ([#5854](https://github.com/nim-lang/Nim/issues/5854))\n- Fixed \"New backward indexing is too limited\"\n  ([#6631](https://github.com/nim-lang/Nim/issues/6631))\n- Fixed \"Table usage in a macro (SIGSEGV: Illegal storage access.)\"\n  ([#1860](https://github.com/nim-lang/Nim/issues/1860))\n- Fixed \"Incorrect deprecation error\"\n  ([#6634](https://github.com/nim-lang/Nim/issues/6634))\n- Fixed \"Wrong indices in arrays not starting with 0\"\n  ([#6675](https://github.com/nim-lang/Nim/issues/6675))\n- Fixed \"if expressions\"\n  ([#6609](https://github.com/nim-lang/Nim/issues/6609))\n- Fixed \"BackwardsIndex: converter + `[]` + unrelated type[^1]: lib/system.nim(3536, 3) Error\"\n  ([#6692](https://github.com/nim-lang/Nim/issues/6692))\n- Fixed \"js backend 0.17.3: array bounds check for non zero based arrays is buggy\"\n  ([#6532](https://github.com/nim-lang/Nim/issues/6532))\n- Fixed \"HttpClient's new API doesn't work through a proxy for https URLs\"\n  ([#6685](https://github.com/nim-lang/Nim/issues/6685))\n- Fixed \"isServing isn't declared and isn't compiling\"\n  ([#6707](https://github.com/nim-lang/Nim/issues/6707))\n- Fixed \"[Regression] value out of range\"\n  ([#6710](https://github.com/nim-lang/Nim/issues/6710))\n\n- Fixed \"Error when using `multisync` macro\"\n  ([#6708](https://github.com/nim-lang/Nim/issues/6708))\n\n- Fixed \"formatFloat inconsistent scientific notation\"\n  ([#6589](https://github.com/nim-lang/Nim/issues/6589))\n- Fixed \"Using : (constructor arguments) for passing values to functions with default arguments causes a compiler crash.\"\n  ([#6765](https://github.com/nim-lang/Nim/issues/6765))\n- Fixed \"In-place object initialization leads to vcc incompatible code\"\n  ([#6757](https://github.com/nim-lang/Nim/issues/6757))\n- Fixed \"Improve parseCookies doc\"\n  ([#5721](https://github.com/nim-lang/Nim/issues/5721))\n- Fixed \"Parser regression with nested do notation inside conditional\"\n  ([#6166](https://github.com/nim-lang/Nim/issues/6166))\n- Fixed \"Request for better error message\"\n  ([#6776](https://github.com/nim-lang/Nim/issues/6776))\n- Fixed \"Testament tester does not execute test with `exitcode` only\"\n  ([#6775](https://github.com/nim-lang/Nim/issues/6775))\n- Fixed \"JS integer division off by one\"\n  ([#6753](https://github.com/nim-lang/Nim/issues/6753))\n- Fixed \"Regression: cannot prove not nil\"\n  ([#5781](https://github.com/nim-lang/Nim/issues/5781))\n- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?) in generic proc\"\n  ([#6073](https://github.com/nim-lang/Nim/issues/6073))\n- Fixed \"Request for better error message\"\n  ([#6776](https://github.com/nim-lang/Nim/issues/6776))\n- Fixed \"Nim #head: sorting via reference hangs compiler\"\n  ([#6724](https://github.com/nim-lang/Nim/issues/6724))\n- Fixed \"Cannot cast pointer to char in cpp\"\n  ([#5979](https://github.com/nim-lang/Nim/issues/5979))\n- Fixed \"asynchttpserver replies with several errors on single request\"\n  ([#6386](https://github.com/nim-lang/Nim/issues/6386))\n- Fixed \"object variants superclass trigger bad codegen\"\n  ([#5521](https://github.com/nim-lang/Nim/issues/5521))\n- Fixed \"JS integer division off by one\"\n  ([#6753](https://github.com/nim-lang/Nim/issues/6753))\n- Fixed \"js backend compiler crash with tables indexed by certain types\"\n  ([#6568](https://github.com/nim-lang/Nim/issues/6568))\n- Fixed \"Jsgen bug with is\"\n  ([#6445](https://github.com/nim-lang/Nim/issues/6445))\n- Fixed \"Subrange definition with ..<\"\n  ([#6788](https://github.com/nim-lang/Nim/issues/6788))\n- Fixed \"fields not initialized: array with enum index type as object field.\"\n  ([#6682](https://github.com/nim-lang/Nim/issues/6682))\n- Fixed \"Can not delete data in table when table's data type is kind of \"not nil\"\"\n  ([#6555](https://github.com/nim-lang/Nim/issues/6555))\n- Fixed \"tables.nim: Cannot prove that 'n' is initialized\"\n  ([#6121](https://github.com/nim-lang/Nim/issues/6121))\n- Fixed \"issues with 'not nil' applied to a closure proc\"\n  ([#6489](https://github.com/nim-lang/Nim/issues/6489))\n- Fixed \"`not nil` not working in some cases\"\n  ([#4686](https://github.com/nim-lang/Nim/issues/4686))\n- Fixed \"Cannot prove '@[v]' is not nil\"\n  ([#3993](https://github.com/nim-lang/Nim/issues/3993))\n\n- Fixed \"Feature: support TCP_NODELAY in net.sockets\"\n  ([#6795](https://github.com/nim-lang/Nim/issues/6795))\n- Fixed \"Code that makes the compiler throw an error message and then hangs\"\n  ([#6820](https://github.com/nim-lang/Nim/issues/6820))\n- Fixed \"Code that makes the compiler throw an error message and then hangs\"\n  ([#6820](https://github.com/nim-lang/Nim/issues/6820))\n- Fixed \"Inconsistent behavior with sequence and string slicing\"\n  ([#6223](https://github.com/nim-lang/Nim/issues/6223))\n- Fixed \"Wrong behavior of \"split\" (proc and iterator)\"\n  ([#4377](https://github.com/nim-lang/Nim/issues/4377))\n- Fixed \"[Documentation] Invalid module name: [foo, bar]\"\n  ([#6831](https://github.com/nim-lang/Nim/issues/6831))\n- Fixed \"The destructor is not called for temporary objects\"\n  ([#4214](https://github.com/nim-lang/Nim/issues/4214))\n- Fixed \"Destructors does not work with implicit items iterator in for loop\"\n  ([#985](https://github.com/nim-lang/Nim/issues/985))\n- Fixed \"Error in template when using the type of the parameter inside it\"\n  ([#6756](https://github.com/nim-lang/Nim/issues/6756))\n- Fixed \"should json.to() respect parent attributes?\"\n  ([#5856](https://github.com/nim-lang/Nim/issues/5856))\n- Fixed \"json 'to' macro can not marshalize into tuples\"\n  ([#6095](https://github.com/nim-lang/Nim/issues/6095))\n- Fixed \"json.to fails with seq[T]\"\n  ([#6604](https://github.com/nim-lang/Nim/issues/6604))\n- Fixed \"json.to() is not worth using compared to marshal.to[T]\"\n  ([#5848](https://github.com/nim-lang/Nim/issues/5848))\n- Fixed \"Memory not being released in time, running out of memory\"\n  ([#6031](https://github.com/nim-lang/Nim/issues/6031))\n- Fixed \"[Regression] Bad C codegen for generic code\"\n  ([#6889](https://github.com/nim-lang/Nim/issues/6889))\n- Fixed \"rollingFileLogger deletes file on every start.\"\n  ([#6264](https://github.com/nim-lang/Nim/issues/6264))\n- Fixed \"Remove/deprecate securehash module.\"\n  ([#6033](https://github.com/nim-lang/Nim/issues/6033))\n- Fixed \"[bug or not] object construction for seq[T] failed without space after colon\"\n  ([#5999](https://github.com/nim-lang/Nim/issues/5999))\n- Fixed \"issues with the random module\"\n  ([#4726](https://github.com/nim-lang/Nim/issues/4726))\n- Fixed \"Reassigning local var to seq of objects results in nil element in Object's seq field\"\n  ([#668](https://github.com/nim-lang/Nim/issues/668))\n- Fixed \"Compilation error with \"newseq[string]\"\"\n  ([#6726](https://github.com/nim-lang/Nim/issues/6726))\n- Fixed \"await inside array/dict literal produces invalid code - Part 2\"\n  ([#6626](https://github.com/nim-lang/Nim/issues/6626))\n- Fixed \"terminal.eraseline() gives OverflowError on Windows\"\n  ([#6931](https://github.com/nim-lang/Nim/issues/6931))\n- Fixed \"[Regression] `sequtils.any` conflicts with `system.any`\"\n  ([#6932](https://github.com/nim-lang/Nim/issues/6932))\n- Fixed \"C++ codegen: `mitems` generates invalid code.\"\n  ([#4910](https://github.com/nim-lang/Nim/issues/4910))\n- Fixed \"seq.mitems produces invalid cpp codegen\"\n  ([#6892](https://github.com/nim-lang/Nim/issues/6892))\n- Fixed \"Concepts regression\"\n  ([#6108](https://github.com/nim-lang/Nim/issues/6108))\n- Fixed \"Generic iterable concept with array crashes compiler\"\n  ([#6277](https://github.com/nim-lang/Nim/issues/6277))\n- Fixed \"C code generation \"‘a’ is a pointer; did you mean to use ‘->’?\"\"\n  ([#6462](https://github.com/nim-lang/Nim/issues/6462))\n- Fixed \"`--NimblePath` fails if a `-` in path which is not followed by a number\"\n  ([#6949](https://github.com/nim-lang/Nim/issues/6949))\n- Fixed \"\"not registered in the selector\" in asyncfile.close() for something that clearly was registered\"\n  ([#6906](https://github.com/nim-lang/Nim/issues/6906))\n- Fixed \"strange frexp behavior\"\n  ([#6353](https://github.com/nim-lang/Nim/issues/6353))\n\n- Fixed \"noreturn branches of case statements shouldn't contribute to type\"\n  ([#6885](https://github.com/nim-lang/Nim/issues/6885))\n- Fixed \"Type inference for 'if' statements changed\"\n  ([#6980](https://github.com/nim-lang/Nim/issues/6980))\n- Fixed \"newest asyncdispatch recursion\"\n  ([#6100](https://github.com/nim-lang/Nim/issues/6100))\n- Fixed \"Ambiguous identifier between set type and proc\"\n  ([#6965](https://github.com/nim-lang/Nim/issues/6965))\n\n- Fixed \"Inconsistent behavior with sequence and string slicing\"\n  ([#6223](https://github.com/nim-lang/Nim/issues/6223))\n\n- Fixed \"Unsupported OpenSSL library imported dynamically\"\n  ([#5000](https://github.com/nim-lang/Nim/issues/5000))\n- Fixed \"`nim check` segfaults\"\n  ([#6972](https://github.com/nim-lang/Nim/issues/6972))\n- Fixed \"GC deadlock\"\n  ([#6988](https://github.com/nim-lang/Nim/issues/6988))\n- Fixed \"Create a seq without memory initialization\"\n  ([#6401](https://github.com/nim-lang/Nim/issues/6401))\n- Fixed \"Fix bug for getch on Windows while using the arrow keys\"\n  ([#6966](https://github.com/nim-lang/Nim/issues/6966))\n- Fixed \"runnableExamples doesn't work in templates\"\n  ([#7018](https://github.com/nim-lang/Nim/issues/7018))\n- Fixed \"runnableExamples doesn't work with untyped statement blocks\"\n  ([#7019](https://github.com/nim-lang/Nim/issues/7019))\n\n- Fixed \"Critical bug in parseBiggestFloat\"\n  ([#7060](https://github.com/nim-lang/Nim/issues/7060))\n- Fixed \"[RFC] strformat.% should be gone\"\n  ([#7078](https://github.com/nim-lang/Nim/issues/7078))\n- Fixed \"compiler crash on simple macro\"\n  ([#7093](https://github.com/nim-lang/Nim/issues/7093))\n- Fixed \"Make newlines sane again\"\n  ([#7089](https://github.com/nim-lang/Nim/issues/7089))\n- Fixed \"JS - Unicode enum string representation issue\"\n  ([#6741](https://github.com/nim-lang/Nim/issues/6741))\n- Fixed \"Strange behaviour of 0.17.3 (working ok in 0.17.2)\"\n  ([#6989](https://github.com/nim-lang/Nim/issues/6989))\n- Fixed \"Strange behaviour of 0.17.3 (working ok in 0.17.2)\"\n  ([#6989](https://github.com/nim-lang/Nim/issues/6989))\n- Fixed \"Compiler crash: try expression with infix as\"\n  ([#7116](https://github.com/nim-lang/Nim/issues/7116))\n- Fixed \"nimsuggest crash\"\n  ([#7140](https://github.com/nim-lang/Nim/issues/7140))\n- Fixed \"[RFC] Reintroduce readChar\"\n  ([#7072](https://github.com/nim-lang/Nim/issues/7072))\n- Fixed \"Copyright line needs updating\"\n  ([#7129](https://github.com/nim-lang/Nim/issues/7129))\n- Fixed \"-0.0 doesn't result in negative zero in VM\"\n  ([#7079](https://github.com/nim-lang/Nim/issues/7079))\n- Fixed \"Windows large filesize\"\n  ([#7121](https://github.com/nim-lang/Nim/issues/7121))\n- Fixed \"Securehash is not parsimonious with MD5 and other hash modules\"\n  ([#6961](https://github.com/nim-lang/Nim/issues/6961))\n- Fixed \"os.findExe() shouldn't look in current directory on posix, unless exe has a /\"\n  ([#6939](https://github.com/nim-lang/Nim/issues/6939))\n- Fixed \"`compiles(...)` with `fatal` pragma causes compiler to exit early\"\n  ([#7080](https://github.com/nim-lang/Nim/issues/7080))\n- Fixed \"NPE when compile macro that returns concrete value\"\n  ([#5450](https://github.com/nim-lang/Nim/issues/5450))\n- Fixed \"Using a variable of type `int | float` causes internal compiler error\"\n  ([#6946](https://github.com/nim-lang/Nim/issues/6946))\n- Fixed \"Unsigned integers could not be used as array indexes.\"\n  ([#7153](https://github.com/nim-lang/Nim/issues/7153))\n- Fixed \"countdown with uint causes underflow\"\n  ([#4220](https://github.com/nim-lang/Nim/issues/4220))\n- Fixed \"Inconsistent method call syntax\"\n  ([#7200](https://github.com/nim-lang/Nim/issues/7200))\n- Fixed \"Impossible to create an empty const array\"\n  ([#6853](https://github.com/nim-lang/Nim/issues/6853))\n- Fixed \"Strange UINT handling\"\n  ([#3985](https://github.com/nim-lang/Nim/issues/3985))\n- Fixed \"Bad codegen when passing arg that is part of return value destination\"\n  ([#6960](https://github.com/nim-lang/Nim/issues/6960))\n- Fixed \"No info about gcsafety in error message when global var is accessed in async proc\"\n  ([#6186](https://github.com/nim-lang/Nim/issues/6186))\n- Fixed \"Resolving package vs. local import ambiguities\"\n  ([#2819](https://github.com/nim-lang/Nim/issues/2819))\n- Fixed \"Internal error with type() operator\"\n  ([#3711](https://github.com/nim-lang/Nim/issues/3711))\n- Fixed \"newAsyncSocket should raise an OS error plus other inconsistencies\"\n  ([#4995](https://github.com/nim-lang/Nim/issues/4995))\n- Fixed \"mapLiterals fails with negative values\"\n  ([#7215](https://github.com/nim-lang/Nim/issues/7215))\n- Fixed \"fmWrite doesn't truncate file with openAsync, unlike open()\"\n  ([#5531](https://github.com/nim-lang/Nim/issues/5531))\n- Fixed \"Move libsvm to an external nimble module\"\n  ([#5786](https://github.com/nim-lang/Nim/issues/5786))\n- Fixed \"Prevent acceptAddr gotcha with newSocket\"\n  ([#7227](https://github.com/nim-lang/Nim/issues/7227))\n- Fixed \"strtabs.getOrDefault is inconsistent with tables.getOrDefault\"\n  ([#4265](https://github.com/nim-lang/Nim/issues/4265))\n\n- Fixed \"Code falling through into exception handler when no exception thrown.\"\n  ([#7232](https://github.com/nim-lang/Nim/issues/7232))\n- Fixed \"the new generic inference rules are broken\"\n  ([#7247](https://github.com/nim-lang/Nim/issues/7247))\n- Fixed \"Odd `..<` regression\"\n  ([#6992](https://github.com/nim-lang/Nim/issues/6992))\n- Fixed \"Different proc type inferred from default parameter\"\n  ([#4659](https://github.com/nim-lang/Nim/issues/4659))\n- Fixed \"Different proc type inferred from default parameter\"\n  ([#4659](https://github.com/nim-lang/Nim/issues/4659))\n- Fixed \"Testament sometimes ignores test failures\"\n  ([#7236](https://github.com/nim-lang/Nim/issues/7236))\n- Fixed \"New Allocator Fails On >=4GB Requests\"\n  ([#7120](https://github.com/nim-lang/Nim/issues/7120))\n- Fixed \"User pragmas hide effect specifications from sempass2\"\n  ([#7216](https://github.com/nim-lang/Nim/issues/7216))\n- Fixed \"C++: SIGABRT instead of IndexError for out-of-bounds\"\n  ([#6512](https://github.com/nim-lang/Nim/issues/6512))\n- Fixed \"An uncaught exception in cpp mode doesn't show the exception name/msg\"\n  ([#6431](https://github.com/nim-lang/Nim/issues/6431))", "tags": ["nim", "python"], "published_at": "", "id": 45}, {"title": "Creating a simple macro", "slug": "create-a-simple-macro", "content": "<div class=\"sidebarblock\">  <div class=\"content\">    <div class=\"title\">Guest post</div>    <div class=\"paragraph\">      This is a guest post by Antonis Geralis. If you would like to publish       articles as a guest author on nim-lang.org then get in touch with us via      <a href=\"https://twitter.com/nim_lang\">Twitter</a> or      <a href=\"https://nim-lang.org/community.html\">otherwise</a>.      You can also just create a PR like      <a href=\"https://github.com/nim-lang/website/pull/90\">this author did</a>.    </div>  </div></div>Hello, as you might know Nim is a powerful programming language that supportsmetaprogramming using macros. Though a lot of Nim programmers are unaware oftheir merits due to lack of learning resources. The first part ofthis series will discuss the use of macros to simplify the creation ofboilerplate code in Nim.Suppose we have code which builds a directed graph.```nim  proc buildCityGraph(): Digraph =    result = initGraph()    result.addEdge(initEdge(initNode(\"Boston\"), initNode(\"Providence\")))    result.addEdge(initEdge(initNode(\"Boston\"), initNode(\"New York\")))    result.addEdge(initEdge(initNode(\"Providence\"), initNode(\"Boston\")))    result.addEdge(initEdge(initNode(\"Providence\"), initNode(\"New York\")))    ...```A template could be used to reduce the amount of typing. For example:```nim  template adder(graph, src, dest): untyped =    graph.addEdge(initEdge(initNode(src), initNode(dest)))```However I would like to use an operator with a nice syntax, like: ``\"Boston\" -> \"Providence\"``A template could do so too here, but I want to show how macros work.<div class=\"sidebarblock\">  <div class=\"content\">    <div class=\"paragraph\">      <q>Macros can be used to implement domain specific languages.</q><br>      <i>&mdash;From the Nim <a href=\"http://nim-lang.org/docs/manual.html\">manual</a>.</i>    </div>  </div></div>To begin, this is how calling our macro will look like:```nim  proc buildCityGraph(): Digraph =    result = initGraph()    edges(result):      \"Boston\" -> \"Providence\"      \"Boston\" -> \"New York\"      \"Providence\" -> \"Boston\"      \"Providence\" -> \"New York\"      ...```We can pass the body of this unfinished macro to ``dumpTree`` to betterunderstand how it will work.```StmtList  Infix    Ident \"->\"    StrLit \"Boston\"    StrLit \"Providence\"  Infix    Ident \"->\"    StrLit \"Boston\"    StrLit \"New York\"  ...```A working first version looks like this:```nimmacro edges(head, body: untyped): untyped =  template adder(graph, src, dest): untyped =    graph.addEdge(initEdge(initNode(src), initNode(dest)))  # Create a NimNode of kind nnkStmtList for the result  result = newStmtList()  for n in body:    # Check if it is an Infix NimNode with the operator    # we look to implement.    if n.kind == nnkInfix and $n[0] == \"->\":      # we pass the template to getAst to avoid constructing      # the AST manually      result.add getAst(adder(head, n[1], n[2]))```This macro is incomplete however, it doesn't replace nested usages of ``->``. We would like to replace -> anywhere in the passed body, so let's use recursionwith the help of a helper called ``graphDslImpl``.```nim  proc graphDslImpl(head, body: NimNode): NimNode =    template adder(graph, src, dest): untyped =      graph.addEdge(initEdge(initNode(src), initNode(dest)))    if body.kind == nnkInfix and $body[0] == \"->\":      result = getAst(adder(head, body[1], body[2]))    else:      # copyNimNode instead of newStmtList to makes sure      # a parent node is created with the correct kind.      result = copyNimNode(body)      for n in body:        result.add graphDslImpl(head, n)```Finally our macro is declared:```nim  macro edges(head, body: untyped): untyped =    result = graphDslImpl(head, body)    echo result.treeRepr # let us inspect the result```That's it for now. This first article shows how to structure proceduresthat transform the Nim AST and how to then use them in a macro. Later postswill look at more advanced macro usage.<div class=\"sidebarblock\">  <table>  <tr>  <td class=\"icon\">    <i class=\"fa fa-book-open\" title=\"Exercise\"></i>  </td>  <td class=\"content\">    <div class=\"title\">Exercise</div>    <div class=\"paragraph\">      There is an undirected edge in the <code>buildCityGraph</code> proc. Can you      add another operator (i.e. <code>\"Boston\" -- \"Providence\"</code>) that takes care of it?    </div>  </td>  </tr>  </table></div>", "content_with_meta": "---\ntitle: \"Creating a simple macro\"\nauthor: Antonis Geralis\nexcerpt: \"Nim is a powerful programming language that supports\nmetaprogramming using macros. Though a lot of Nim programmers are unaware of\ntheir merits due to lack of learning resources. The first part of\nthis series will discuss the use of macros to simplify the creation of\nboilerplate code in Nim.\"\ntags: nim, python\n---\n\n<div class=\"sidebarblock\">\n  <div class=\"content\">\n    <div class=\"title\">Guest post</div>\n    <div class=\"paragraph\">\n      This is a guest post by Antonis Geralis. If you would like to publish \n      articles as a guest author on nim-lang.org then get in touch with us via\n      <a href=\"https://twitter.com/nim_lang\">Twitter</a> or\n      <a href=\"https://nim-lang.org/community.html\">otherwise</a>.\n      You can also just create a PR like\n      <a href=\"https://github.com/nim-lang/website/pull/90\">this author did</a>.\n    </div>\n  </div>\n</div>\n\nHello, as you might know Nim is a powerful programming language that supports\nmetaprogramming using macros. Though a lot of Nim programmers are unaware of\ntheir merits due to lack of learning resources. The first part of\nthis series will discuss the use of macros to simplify the creation of\nboilerplate code in Nim.\n\nSuppose we have code which builds a directed graph.\n\n```nim\n  proc buildCityGraph(): Digraph =\n    result = initGraph()\n    result.addEdge(initEdge(initNode(\"Boston\"), initNode(\"Providence\")))\n    result.addEdge(initEdge(initNode(\"Boston\"), initNode(\"New York\")))\n    result.addEdge(initEdge(initNode(\"Providence\"), initNode(\"Boston\")))\n    result.addEdge(initEdge(initNode(\"Providence\"), initNode(\"New York\")))\n    ...\n```\n\nA template could be used to reduce the amount of typing. For example:\n\n```nim\n  template adder(graph, src, dest): untyped =\n    graph.addEdge(initEdge(initNode(src), initNode(dest)))\n```\n\nHowever I would like to use an operator with a nice syntax, like: ``\"Boston\" -> \"Providence\"``\nA template could do so too here, but I want to show how macros work.\n\n<div class=\"sidebarblock\">\n  <div class=\"content\">\n    <div class=\"paragraph\">\n      <q>Macros can be used to implement domain specific languages.</q><br>\n      <i>&mdash;From the Nim <a href=\"http://nim-lang.org/docs/manual.html\">manual</a>.</i>\n    </div>\n  </div>\n</div>\n\nTo begin, this is how calling our macro will look like:\n\n```nim\n  proc buildCityGraph(): Digraph =\n    result = initGraph()\n    edges(result):\n      \"Boston\" -> \"Providence\"\n      \"Boston\" -> \"New York\"\n      \"Providence\" -> \"Boston\"\n      \"Providence\" -> \"New York\"\n      ...\n```\n\nWe can pass the body of this unfinished macro to ``dumpTree`` to better\nunderstand how it will work.\n\n```\nStmtList\n  Infix\n    Ident \"->\"\n    StrLit \"Boston\"\n    StrLit \"Providence\"\n  Infix\n    Ident \"->\"\n    StrLit \"Boston\"\n    StrLit \"New York\"\n  ...\n```\n\nA working first version looks like this:\n\n```nim\nmacro edges(head, body: untyped): untyped =\n  template adder(graph, src, dest): untyped =\n    graph.addEdge(initEdge(initNode(src), initNode(dest)))\n\n  # Create a NimNode of kind nnkStmtList for the result\n  result = newStmtList()\n  for n in body:\n    # Check if it is an Infix NimNode with the operator\n    # we look to implement.\n    if n.kind == nnkInfix and $n[0] == \"->\":\n      # we pass the template to getAst to avoid constructing\n      # the AST manually\n      result.add getAst(adder(head, n[1], n[2]))\n```\n\nThis macro is incomplete however, it doesn't replace nested usages of ``->``. \nWe would like to replace -> anywhere in the passed body, so let's use recursion\nwith the help of a helper called ``graphDslImpl``.\n\n```nim\n  proc graphDslImpl(head, body: NimNode): NimNode =\n    template adder(graph, src, dest): untyped =\n      graph.addEdge(initEdge(initNode(src), initNode(dest)))\n\n    if body.kind == nnkInfix and $body[0] == \"->\":\n      result = getAst(adder(head, body[1], body[2]))\n    else:\n      # copyNimNode instead of newStmtList to makes sure\n      # a parent node is created with the correct kind.\n      result = copyNimNode(body)\n      for n in body:\n        result.add graphDslImpl(head, n)\n```\n\nFinally our macro is declared:\n\n```nim\n  macro edges(head, body: untyped): untyped =\n    result = graphDslImpl(head, body)\n    echo result.treeRepr # let us inspect the result\n```\n\nThat's it for now. This first article shows how to structure procedures\nthat transform the Nim AST and how to then use them in a macro. Later posts\nwill look at more advanced macro usage.\n\n<div class=\"sidebarblock\">\n  <table>\n  <tr>\n  <td class=\"icon\">\n    <i class=\"fa fa-book-open\" title=\"Exercise\"></i>\n  </td>\n  <td class=\"content\">\n    <div class=\"title\">Exercise</div>\n    <div class=\"paragraph\">\n      There is an undirected edge in the <code>buildCityGraph</code> proc. Can you\n      add another operator (i.e. <code>\"Boston\" -- \"Providence\"</code>) that takes care of it?\n    </div>\n  </td>\n  </tr>\n  </table>\n</div>\n", "tags": [""], "published_at": "", "id": 46}, {"title": "Launching the 2018 Nim Community Survey", "slug": "community-survey-2018", "content": "We are proud to announce the launch of the official[2018 Nim Community Survey](https://goo.gl/forms/t2gWWBEDC1walw6s2)! No matterwhether you use Nim today, have used Nim previously, or never used Nim before;we want to know your opinions.Your feedback will help the Nim project understand its strengths andweaknesses, and to determine development priorities for the future.<div style=\"text-align: center;\">  <a class=\"pure-button pure-button-primary\" style=\"font-size: 85%; display: inline-block;\" href=\"https://goo.gl/forms/t2gWWBEDC1walw6s2\" target=\"_blank\">  Answer Survey  </a></div>It shouldn't take you much longer than 5 to 10 minutes to complete this survey.Submissions will be accepted until around the 23rd of July, depending on theresponse rates. If you have any questions or feedback, please don't hesitateto get in touch with us via email at survey@nim-lang.org or on the[Nim Forum](http://forum.nim-lang.org).This is now the third year in which this survey has been running. An analysis ofthe results for the past years can be found at the following links:* [2016](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html)* [2017](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html)We would appreciate your help in spreading the word about this survey. Sharethe Google Forms link on your social network feeds, with your colleagues and inother communities.Thank you to everyone that helped develop and test the survey! Once thesubmission period ends, the results will be shown here and publicised viaTwitter, the Nim Forum and IRC.Thanks for your time!", "content_with_meta": "---\ntitle: \"Launching the 2018 Nim Community Survey\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe are proud to announce the launch of the official\n[2018 Nim Community Survey](https://goo.gl/forms/t2gWWBEDC1walw6s2)! No matter\nwhether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\n\n<div style=\"text-align: center;\">\n  <a class=\"pure-button pure-button-primary\" style=\"font-size: 85%; display: inline-block;\" href=\"https://goo.gl/forms/t2gWWBEDC1walw6s2\" target=\"_blank\">\n  Answer Survey\n  </a>\n</div>\n\nIt shouldn't take you much longer than 5 to 10 minutes to complete this survey.\nSubmissions will be accepted until around the 23rd of July, depending on the\nresponse rates. If you have any questions or feedback, please don't hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\n[Nim Forum](http://forum.nim-lang.org).\n\nThis is now the third year in which this survey has been running. An analysis of\nthe results for the past years can be found at the following links:\n\n* [2016](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html)\n* [2017](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html)\n\nWe would appreciate your help in spreading the word about this survey. Share\nthe Google Forms link on your social network feeds, with your colleagues and in\nother communities.\n\nThank you to everyone that helped develop and test the survey! Once the\nsubmission period ends, the results will be shown here and publicised via\nTwitter, the Nim Forum and IRC.\n\nThanks for your time!\n", "tags": ["nim", "python"], "published_at": "", "id": 47}, {"title": "Nim partners with Status.im", "slug": "nim-partners-with-status", "content": "<a href=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\">  <img src=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\" alt=\"Status + Nim\" style=\"width:100%\"/></a>We're incredibly excited to announce the new partnership between[Status](https://status.im/)and Nim. Status is developing an open source mobile DAppbrowser and messenger for Ethereum.The Status team has chosen the Nim programming language as a base for theimplementation of a brand new research project: a sharding client for Ethereum.The project is named Nimbus, it is open source and available on[GitHub](https://github.com/status-im/nimbus). You can read more about thisproject as well as the reasons why Status chose Nim in the corresponding[Status announcement article](https://our.status.im/status-partners-with-the-team-behind-the-programming-language-nim/).As the developers of Nim we are very proud to see it used for thisproject. We hope that this partnership will encourage other developers toadopt Nim for their project and that it will give software companies theconfidence to develop products using Nim.## The PartnershipThe partnership will see Status support the Nim team with funding and resourcesneeded to stay focused on the development of the Nim programming language.The Nim team has so far received[many generous donations](https://nim-lang.org/sponsors.html) from other softwareteams as well as from independent developers who believe in the project.These donations have given us the ability to do many things such aspay for the hosting costs of our servers, organize a Nim stand at the FOSDEMconference and spend our free time developing Nim and related projects.Unfortunately the donations are not currently enough for any of us to committo working on Nim full-time. With Status' help this is no longer the case.We will now be able to stay focused on the development of theNim programming language. In addition, we plan to hire at least 2 full-timedevelopers. These developers will be tasked with fixing bugs, responding toissues, and of course developing the compiler, the standard library and thetooling.Despite this partnership, Nim remains an independent project, with plansbeing discussed in the open on GitHub, our forum and on IRC. Decisions areas usual left to our BDFL, Andreas Rumpf, and will remain that way for theforeseeable future.## Our RoadmapOur primary goal is to release Nim version 1.0.0, which signals our longoverdue commitment to a stable language and standard library that willpreserve backwards compatibility for years to come.We won't make any commitments to a release date. But a detailed milestonetracking all the issues that need to be resolved for v1.0.0 is available[here](https://github.com/nim-lang/Nim/milestone/2).With Status' support our development towards version 1.0.0 will acceleraterapidly. We will also have more man-power to handle the recently increasedactivity on our issue tracker.## Beyond the roadmapBeyond our current roadmap we would like to encourage our community toget more involved in the development of Nim. We're currently considering agrants program for Nim, similar to Google Summer of Code, where we willhire developers to work on specific Nim-related projects.Some examples for these grants:* Improve the ``nimsuggest`` tool to support the common \"language server  protocol\" that every text editor and IDE is starting to speak.* Improve Nim's package manager, Nimble, to support reproducible builds.* Improve Nim's tooling so that the result of macro expansions becomes easier to  understand and follow.We are extremely excited to continue developing Nim with renewed vigour andare very thankful for the generous support from the Status team.For more information and questions, join us on this forum thread:[https://forum.nim-lang.org/t/4113](https://forum.nim-lang.org/t/4113).", "content_with_meta": "---\ntitle: \"Nim partners with Status.im\"\nauthor: Nim Team\nexcerpt: \"We're incredibly excited to announce the new partnership between Status and Nim.\"\ntags: nim, python\n---\n\n<a href=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\" alt=\"Status + Nim\" style=\"width:100%\"/>\n</a>\n\nWe're incredibly excited to announce the new partnership between\n[Status](https://status.im/)\nand Nim. Status is developing an open source mobile DApp\nbrowser and messenger for Ethereum.\n\nThe Status team has chosen the Nim programming language as a base for the\nimplementation of a brand new research project: a sharding client for Ethereum.\nThe project is named Nimbus, it is open source and available on\n[GitHub](https://github.com/status-im/nimbus). You can read more about this\nproject as well as the reasons why Status chose Nim in the corresponding\n[Status announcement article](https://our.status.im/status-partners-with-the-team-behind-the-programming-language-nim/).\n\nAs the developers of Nim we are very proud to see it used for this\nproject. We hope that this partnership will encourage other developers to\nadopt Nim for their project and that it will give software companies the\nconfidence to develop products using Nim.\n\n## The Partnership\n\nThe partnership will see Status support the Nim team with funding and resources\nneeded to stay focused on the development of the Nim programming language.\nThe Nim team has so far received\n[many generous donations](https://nim-lang.org/sponsors.html) from other software\nteams as well as from independent developers who believe in the project.\nThese donations have given us the ability to do many things such as\npay for the hosting costs of our servers, organize a Nim stand at the FOSDEM\nconference and spend our free time developing Nim and related projects.\n\nUnfortunately the donations are not currently enough for any of us to commit\nto working on Nim full-time. With Status' help this is no longer the case.\nWe will now be able to stay focused on the development of the\nNim programming language. In addition, we plan to hire at least 2 full-time\ndevelopers. These developers will be tasked with fixing bugs, responding to\nissues, and of course developing the compiler, the standard library and the\ntooling.\n\nDespite this partnership, Nim remains an independent project, with plans\nbeing discussed in the open on GitHub, our forum and on IRC. Decisions are\nas usual left to our BDFL, Andreas Rumpf, and will remain that way for the\nforeseeable future.\n\n## Our Roadmap\n\nOur primary goal is to release Nim version 1.0.0, which signals our long\noverdue commitment to a stable language and standard library that will\npreserve backwards compatibility for years to come.\n\nWe won't make any commitments to a release date. But a detailed milestone\ntracking all the issues that need to be resolved for v1.0.0 is available\n[here](https://github.com/nim-lang/Nim/milestone/2).\n\nWith Status' support our development towards version 1.0.0 will accelerate\nrapidly. We will also have more man-power to handle the recently increased\nactivity on our issue tracker.\n\n## Beyond the roadmap\n\nBeyond our current roadmap we would like to encourage our community to\nget more involved in the development of Nim. We're currently considering a\ngrants program for Nim, similar to Google Summer of Code, where we will\nhire developers to work on specific Nim-related projects.\n\nSome examples for these grants:\n\n* Improve the ``nimsuggest`` tool to support the common \"language server\n  protocol\" that every text editor and IDE is starting to speak.\n* Improve Nim's package manager, Nimble, to support reproducible builds.\n* Improve Nim's tooling so that the result of macro expansions becomes easier to\n  understand and follow.\n\nWe are extremely excited to continue developing Nim with renewed vigour and\nare very thankful for the generous support from the Status team.\n\nFor more information and questions, join us on this forum thread:\n[https://forum.nim-lang.org/t/4113](https://forum.nim-lang.org/t/4113).", "tags": ["nim", "python"], "published_at": "", "id": 48}, {"title": "We're hiring!", "slug": "nim-is-hiring", "content": "## Become a Nim core developerNim is proving to be an increasingly reliable workhorse for every dayprogramming jobs since you can productively use it both client-side andserver-side thanks to its innovate language core that maps well to lowerlevel representations like C and LLVM as well as to high levelJavaScript. It comes as no surprise then, that Nim is growing and lookingfor new core developers!As a member of the team, you have a direct impact on design and feature enhancementsof the Nim programming language.Nim covers a broad range of topics leading to a constant stream of challengeswhich require you to continually be innovative with an evolving set of technologies.So if you seek a new challenge, if you are experienced in production qualitycompiler development, if you enjoy working from home, don't hesitate toapply.## RequirementsThis is your chance to get to work with one of the leading experts in compilerdevelopment, meta programming and language design. Here are our requirements:- Fluent in C++, C, Nim. You should have some Nim related github projects to  make it easier for us to judge your skills.- Basic knowledge of the lexing, parsing and semantic checking passes a compiler  consists of.- Knowledge in Nim's standard library; the standard library covers parsers,  asynchronous programming, dealing with time and timezones, IO, multi-threaded  programming, networking, as well as knowledge about the Posix and the  Windows API.- Knowledge about type theory and the foundations of programming languages.  We are not just looking for programmers, Nim's specification also needs to  be improved and extended.- Experience in IDE development, there is no reason Nim's tooling can't rival  the state-of-the-art when it comes to error messages, auto-completion and  automatic refactorings.Note that you don't have to fulfill *every* one of these criteria; Nim is alarge project with plenty of work covering diverse topics and our requirementsreflect this.## How to applySend your application to `jobs@nim-lang.org`.", "content_with_meta": "---\ntitle: \"We're hiring!\"\nauthor: Nim Team\nexcerpt: \"This is your chance to get to work with one of the leading experts in compiler\ndevelopment, meta programming and language design.\"\ntags: nim, python, markdown\n---\n\n## Become a Nim core developer\n\nNim is proving to be an increasingly reliable workhorse for every day\nprogramming jobs since you can productively use it both client-side and\nserver-side thanks to its innovate language core that maps well to lower\nlevel representations like C and LLVM as well as to high level\nJavaScript. It comes as no surprise then, that Nim is growing and looking\nfor new core developers!\n\nAs a member of the team, you have a direct impact on design and feature enhancements\nof the Nim programming language.\n\nNim covers a broad range of topics leading to a constant stream of challenges\nwhich require you to continually be innovative with an evolving set of technologies.\n\nSo if you seek a new challenge, if you are experienced in production quality\ncompiler development, if you enjoy working from home, don't hesitate to\napply.\n\n\n## Requirements\n\nThis is your chance to get to work with one of the leading experts in compiler\ndevelopment, meta programming and language design. Here are our requirements:\n\n- Fluent in C++, C, Nim. You should have some Nim related github projects to\n  make it easier for us to judge your skills.\n- Basic knowledge of the lexing, parsing and semantic checking passes a compiler\n  consists of.\n- Knowledge in Nim's standard library; the standard library covers parsers,\n  asynchronous programming, dealing with time and timezones, IO, multi-threaded\n  programming, networking, as well as knowledge about the Posix and the\n  Windows API.\n- Knowledge about type theory and the foundations of programming languages.\n  We are not just looking for programmers, Nim's specification also needs to\n  be improved and extended.\n- Experience in IDE development, there is no reason Nim's tooling can't rival\n  the state-of-the-art when it comes to error messages, auto-completion and\n  automatic refactorings.\n\nNote that you don't have to fulfill *every* one of these criteria; Nim is a\nlarge project with plenty of work covering diverse topics and our requirements\nreflect this.\n\n\n## How to apply\n\nSend your application to `jobs@nim-lang.org`.\n", "tags": [""], "published_at": "", "id": 49}, {"title": "Version 0.19.0 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.19.0, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.# Installing 0.19.0If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.19.0 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim by following the instructions on our[install](https://nim-lang.org/install.html) page.# What's new in 0.19.0The ``nil`` state for strings/seqs is gone. Instead the default value forthese is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period. Thiseliminates a large class of bugs that used to plague the average Nim codeout there, including Nim's standard library.Accessing the binary zero terminator in Nim's native stringsis now invalid. Internally a Nim string still has the trailing zero forzero-copy interoperability with ``cstring``. Compile your code with thenew switch ``--laxStrings:on`` if you need a transition period.These changes to strings and seqs give us more flexibility in how theyare implemented and indeed alternative implementations are in development.``experimental`` is now a pragma and a command line switch that can enablespecific language extensions, it is not an all-or-nothing switch anymore.We think this leads to a more robust development process where it's clearlydocumented which parts of Nim are bleeding edge and which parts can be reliedupon.Other notable language additions:- Dot calls combined with explicit generic instantiations can now be written  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.- ``func`` is now an alias for ``proc {.noSideEffect.}``.- Anonymous tuples with a single element can now be written as ``(1,)`` with a  trailing comma.- In order to make ``for`` loops and iterators more flexible to use Nim now  supports so called \"for-loop macros\". See  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.  This feature enables a Python-like generic ``enumerate`` implementation.- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.  This feature enables custom pattern matching.- The command syntax now supports keyword arguments after the first comma.- Thread-local variables can now be declared inside procs. This implies all  the effects of the ``global`` pragma.- Nim now supports the ``except`` clause in the ``export`` statement.- Range float types, example ``range[0.0 .. Inf]``. More details in language manual.## Breaking changes to be mindful of- The default location of ``nimcache`` for the native code targets was  changed. Read [the compiler user guide](https://nim-lang.org/docs/nimc.html#generated-c-code-directory)  for more information.- Lots of deprecated symbols in the standard library that have been deprecated for  quite some time now like ``system.expr`` or the old type aliases starting with a ``T``  or ``P`` prefix have been removed.- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to  ``CatchableError`` and is the new base class for any exception that is guaranteed to  be catchable. This change should have minimal impact on most existing Nim code.## Async improvementsThe \"closure iterators\" that Nim's ``async`` macro is based on has beenrewritten from the ground up and so ``async`` works completely withexception handling. Finally it is possible to use ``await`` in a ``try``statement!## Nimble 0.9.0This release includes a brand new version of Nimble. The new versioncontains a breaking change which you should read up on if you ownhybrid packages. There are also the usual bug fixes and this releasecontains a lot of them.For more information, see the[Nimble v0.9.0 changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#090---19092018).## Contributors to v0.19.0Our contributors are amazing, and there is[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to listhere. Big thanks to all of you, we couldn't have pulled off this releasewithout you!# Changelog## Changes affecting backwards compatibility### Breaking changes in the standard library- ``re.split`` for empty regular expressions now yields every character in  the string which is what other programming languages chose to do.- The returned tuple of ``system.instantiationInfo`` now has a third field  containing the column of the instantiation.- ``cookies.setCookie`` no longer assumes UTC for the expiration date.- ``strutils.formatEng`` does not distinguish between ``nil`` and ``\"\"``  strings anymore for its ``unit`` parameter. Instead the space is controlled  by a new parameter ``useUnitSpace``.- The ``times.parse`` and ``times.format`` procs have been rewritten.  The proc signatures are the same so it should generally not break anything.  However, the new implementation is a bit stricter, which is a breaking change.  For example ``parse(\"2017-01-01 foo\", \"yyyy-MM-dd\")`` will now raise an error.- ``proc `-`*(a, b: Time): int64`` in the ``times`` module has changed return type  to ``times.Duration`` in order to support higher time resolutions.  The proc is no longer deprecated.- The ``times.Timezone`` is now an immutable ref-type that must be initialized  with an explicit constructor (``newTimezone``).- ``posix.Timeval.tv_sec`` has changed type to ``posix.Time``.- ``math.`mod` `` for floats now behaves the same as ``mod`` for integers  (previously it used floor division like Python). Use ``math.floorMod`` for the old behavior.- For string inputs, ``unicode.isUpper`` and ``unicode.isLower`` now require a  second mandatory parameter ``skipNonAlpha``.- For string inputs, ``strutils.isUpperAscii`` and ``strutils.isLowerAscii`` now  require a second mandatory parameter ``skipNonAlpha``.- ``osLastError`` is now marked with ``sideEffect``- The procs ``parseHexInt`` and ``parseOctInt`` now fail on empty strings  and strings containing only valid prefixes, e.g. \"0x\" for hex integers.- ``terminal.setCursorPos`` and ``terminal.setCursorXPos`` now work correctly  with 0-based coordinates on POSIX (previously, you needed to use  1-based coordinates on POSIX for correct behaviour; the Windows behaviour  was always correct).- ``lineInfoObj`` now returns absolute path instead of project path.  It's used by ``lineInfo``, ``check``, ``expect``, ``require``, etc.- ``net.sendTo`` no longer returns an int and now raises an ``OSError``.- `threadpool`'s `await` and derivatives have been renamed to `blockUntil`  to avoid confusions with `await` from the `async` macro.## Library additions- ``re.split`` now also supports the ``maxsplit`` parameter for consistency  with ``strutils.split``.- Added ``system.toOpenArray`` in order to support zero-copy slicing  operations. This is currently not yet available for the JavaScript target.- Added ``getCurrentDir``, ``findExe``, ``cpDir`` and  ``mvDir`` procs to  ``nimscript``.- The ``times`` module now supports up to nanosecond time resolution when available.- Added the type ``times.Duration`` for representing fixed durations of time.- Added the proc ``times.convert`` for converting between different time units,  e.g days to seconds.- Added the proc ``algorithm.binarySearch[T, K]`` with the ```cmp``` parameter.- Added the proc ``algorithm.upperBound``.- Added inverse hyperbolic functions, ``math.arcsinh``, ``math.arccosh`` and ``math.arctanh`` procs.- Added cotangent, secant and cosecant procs ``math.cot``, ``math.sec`` and ``math.csc``; and their hyperbolic, inverse and inverse hyperbolic functions, ``math.coth``, ``math.sech``, ``math.csch``, ``math.arccot``, ``math.arcsec``, ``math.arccsc``, ``math.arccoth``, ``math.arcsech`` and ``math.arccsch`` procs.- Added the procs ``math.floorMod`` and ``math.floorDiv`` for floor based integer division.- Added the procs ``rationals.`div```, ``rationals.`mod```, ``rationals.floorDiv`` and ``rationals.floorMod`` for rationals.- Added the proc ``math.prod`` for product of elements in an openArray.- Added the proc ``parseBinInt`` to parse a binary integer from a string, which returns the value.- ``parseOct`` and ``parseBin`` in parseutils now also support the ``maxLen`` argument similar to ``parseHexInt``.- Added the proc ``flush`` for memory mapped files.- Added the ``MemMapFileStream``.- Added a simple interpreting event parser template ``eventParser`` to the ``pegs`` module.- Added ``macros.copyLineInfo`` to copy lineInfo from other node.- Added ``system.ashr`` an arithmetic right shift for integers.## Library changes- The stdlib module ``future`` has been renamed to ``sugar``.- ``macros.callsite`` is now deprecated. Since the introduction of ``varargs``  parameters this became unnecessary.- ``macros.astGenRepr``, ``macros.lispRepr`` and ``macros.treeRepr``  now escapes the content of string literals consistently.- ``macros.NimSym`` and ``macros.NimIdent`` is now deprecated in favor  of the more general ``NimNode``.- ``macros.getImpl`` now includes the pragmas of types, instead of omitting them.- ``macros.hasCustomPragma`` and ``macros.getCustomPragmaVal`` now  also support ``ref`` and ``ptr`` types, pragmas on types and variant  fields.- ``system.SomeReal`` is now called ``SomeFloat`` for consistency and  correctness.- ``algorithm.smartBinarySearch`` and ``algorithm.binarySearch`` is  now joined in ``binarySearch``. ``smartbinarySearch`` is now  deprecated.- The `terminal` module now exports additional procs for generating ANSI color  codes as strings.- Added the parameter ``val`` for the ``CritBitTree[int].inc`` proc.- An exception raised from a ``test`` block of ``unittest`` now shows its type in  error message.- The ``compiler/nimeval`` API was rewritten to simplify the \"compiler as an  API\". Using the Nim compiler and its VM as a scripting engine has never been  easier. See ``tests/compilerapi/tcompilerapi.nim`` for an example of how to  use the Nim VM in a native Nim application.- Added the parameter ``val`` for the ``CritBitTree[T].incl`` proc.- The proc ``tgamma`` was renamed to ``gamma``. ``tgamma`` is deprecated.- The ``pegs`` module now exports getters for the fields of its ``Peg`` and ``NonTerminal``  object types. ``Peg``s with child nodes now have the standard ``items`` and ``pairs``  iterators.- The ``accept`` socket procedure defined in the ``net`` module can now accept  a nil socket.## Language additions- Dot calls combined with explicit generic instantiations can now be written  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.- ``func`` is now an alias for ``proc {.noSideEffect.}``.- In order to make ``for`` loops and iterators more flexible to use Nim now  supports so called \"for-loop macros\". See  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.  This feature enables a Python-like generic ``enumerate`` implementation.- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.  This feature enables custom pattern matchers.- the `typedesc` special type has been renamed to just `type`.- `static` and `type` are now also modifiers similar to `ref` and `ptr`.  They denote the special types `static[T]` and `type[T]`.- Forcing compile-time evaluation with `static` now supports specifying  the desired target type (as a concrete type or as a type class)- The `type` operator now supports checking that the supplied expression  matches an expected type constraint.## Language changes- Anonymous tuples with a single element can now be written as ``(1,)`` with a  trailing comma. The underlying AST is ``nnkTupleConstr(newLit 1)`` for this  example. ``nnkTupleConstr`` is a new node kind your macros need to be able  to deal with!- Indexing into a ``cstring`` for the JS target is now mapped  to ``charCodeAt``.- Assignments that would \"slice\" an object into its supertype are now prevented  at runtime. Use ``ref object`` with inheritance rather than ``object`` with  inheritance to prevent this issue.- The ``not nil`` type annotation now has to be enabled explicitly  via ``{.experimental: \"notnil\"}`` as we are still not pleased with how this  feature works with Nim's containers.- The parser now warns about inconsistent spacing around binary operators as  these can easily be confused with unary operators. This warning will likely  become an error in the future.- The ``'c`` and ``'C'`` suffix for octal literals is now deprecated to  bring the language in line with the standard library (e.g. ``parseOct``).- The dot style for import paths (e.g ``import path.to.module`` instead of  ``import path/to/module``) has been deprecated.- The `importcpp` pragma now allows importing the listed fields of generic  C++ types. Support for numeric parameters have also been added through  the use of `static[T]` types.  (#6415)- Native C++ exceptions can now be imported with `importcpp` pragma.  Imported exceptions can be raised and caught just like Nim exceptions.  More details in language manual.- ``nil`` for strings/seqs is finally gone. Instead the default value for  these is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period.- Accessing the binary zero terminator in Nim's native strings  is now invalid. Internally a Nim string still has the trailing zero for  zero-copy interoperability with ``cstring``. Compile your code with the  new switch ``--laxStrings:on`` if you need a transition period.- The command syntax now supports keyword arguments after the first comma.- Thread-local variables can now be declared inside procs. This implies all  the effects of the ``global`` pragma.- Nim now supports the ``except`` clause in the export statement.- Range checked floating point types, for example ``range[0.0 .. Inf]``,  are now supported.- The ``{.this.}`` pragma has been deprecated. It never worked within generics and  we found the resulting code harder to read than the more explicit ``obj.field``  syntax.- \"Memory regions\" for pointer types have been deprecated, they were hardly used  anywhere. Note that this has **nothing** to do with the ``--gc:regions`` switch  of managing memory.- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to  ``CatchableError`` and is the new base class for any exception that is guaranteed to  be catchable. This change should have minimal impact on most existing Nim code.### Tool changes- ``jsondoc2`` has been renamed ``jsondoc``, similar to how ``doc2`` was renamed  ``doc``. The old ``jsondoc`` can still be invoked with ``jsondoc0``.### Compiler changes- The undocumented ``#? braces`` parsing mode was removed.- The undocumented PHP backend was removed.- The VM's instruction count limit was raised to 3 million instructions in  order to support more complex computations at compile-time.- Support for hot code reloading has been implemented for the JavaScript  target. To use it, compile your code with `--hotCodeReloading:on` and use a  helper library such as LiveReload or BrowserSync.- A new compiler option `--cppCompileToNamespace` puts the generated C++ code  into the namespace \"Nim\" in order to avoid naming conflicts with existing  C++ code. This is done for all Nim code - internal and exported.- Added ``macros.getProjectPath`` and ``ospaths.putEnv`` procs to Nim's virtual  machine.- The ``deadCodeElim`` option is now always turned on and the switch has no  effect anymore, but is recognized for backwards compatibility.- ``experimental`` is now a pragma / command line switch that can enable specific  language extensions, it is not an all-or-nothing switch anymore.- Nintendo Switch was added as a new platform target. See [the compiler user guide](https://nim-lang.org/docs/nimc.html)  for more info.- macros.bindSym now capable to accepts not only literal string or string constant expression.  bindSym enhancement make it also can accepts computed string or ident node inside macros /  compile time functions / static blocks. Only in templates / regular code it retains it's  old behavior.  This new feature can be accessed via {.experimental: \"dynamicBindSym\".} pragma/switch.- On Posix systems the global system wide configuration is now put under ``/etc/nim/nim.cfg``,  it used to be ``/etc/nim.cfg``. Usually it does not exist, however.- On Posix systems the user configuration is now looked under ``$XDG_CONFIG_HOME/nim/nim.cfg``  (if ``XDG_CONFIG_HOME`` is not defined, then under ``~/.config/nim/nim.cfg``). It used to be  ``$XDG_CONFIG_DIR/nim.cfg`` (and ``~/.config/nim.cfg``).  Similarly, on Windows, the user configuration is now looked under ``%APPDATA%/nim/nim.cfg``.  This used to be ``%APPDATA%/nim.cfg``.## Bugfixes- Fixed \"constructor pragma leads to \"Most Vexing Parse\" in c++ code gen\"  ([#6837](https://github.com/nim-lang/Nim/issues/6837))- Fixed \"[RFC] newFileStream(string, FileMode) returns nil\"  ([#5588](https://github.com/nim-lang/Nim/issues/5588))- Fixed \"Search feature doesn't work on all docs pages \"  ([#7294](https://github.com/nim-lang/Nim/issues/7294))- Fixed \"Wrong comparison with empty string in version 0.18\"  ([#7291](https://github.com/nim-lang/Nim/issues/7291))- Fixed \"doc2 css troubles\"  ([#5293](https://github.com/nim-lang/Nim/issues/5293))- Fixed \"SIGSEGV when passing empty array to strutils format\"  ([#7293](https://github.com/nim-lang/Nim/issues/7293))- Fixed \"strip() weird behavior \"  ([#7159](https://github.com/nim-lang/Nim/issues/7159))- Fixed \"On Windows: When app type is GUI, error message can't be seen, about missing DLL file or procedure\"  ([#7212](https://github.com/nim-lang/Nim/issues/7212))- Fixed \"Compiler crash: multiple exception types with infix as\"  ([#7115](https://github.com/nim-lang/Nim/issues/7115))- Fixed \"C++ template object: Internal Error mangleRecFieldName\"  ([#6415](https://github.com/nim-lang/Nim/issues/6415))- Fixed \"Undefined Behavior when using const/let tables (Nim v0.18.1)\"  ([#7332](https://github.com/nim-lang/Nim/issues/7332))- Fixed \"Codegen: forward type declarations can be used more aggressively\"  ([#7339](https://github.com/nim-lang/Nim/issues/7339))- Fixed \"asyncfile getFileSize issue in linux\"  ([#7347](https://github.com/nim-lang/Nim/issues/7347))- Fixed \"Compiler manual is not that clear about int literal\"  ([#7304](https://github.com/nim-lang/Nim/issues/7304))- Fixed \"Bad error message when writing to a data structure within read-only object\"  ([#7335](https://github.com/nim-lang/Nim/issues/7335))- Fixed \"Compiler crash using @[int]\"  ([#7331](https://github.com/nim-lang/Nim/issues/7331))- Fixed \"Redefinition of object in C when a proc with sink param is defined.\"  ([#7364](https://github.com/nim-lang/Nim/issues/7364))- Fixed \"[Regression] Missing type declarations in C code if members are used in {.emit.}\"  ([#7363](https://github.com/nim-lang/Nim/issues/7363))- Fixed \"(regression) dereferencing pointer to incomplete type\"  ([#7392](https://github.com/nim-lang/Nim/issues/7392))- Fixed \"In nested try statements finally is not executed\"  ([#7414](https://github.com/nim-lang/Nim/issues/7414))- Fixed \"json.to doesn't work when Option[T] is inside an array\"  ([#7433](https://github.com/nim-lang/Nim/issues/7433))- Fixed \"https://nim-lang.org/docs/lib.html => If you are reading this you are missing nimblepkglist.js...\"  ([#7400](https://github.com/nim-lang/Nim/issues/7400))- Fixed \"json.to and Option[T] fails on JNull in JSON list literal\"  ([#6902](https://github.com/nim-lang/Nim/issues/6902))- Fixed \"inconsistent escaping of string literals\"  ([#7473](https://github.com/nim-lang/Nim/issues/7473))- Fixed \"streams.readLine(): string should raise IOError, but doesn't\"  ([#5281](https://github.com/nim-lang/Nim/issues/5281))- Fixed \"Duplicate definition in cpp codegen\"  ([#6986](https://github.com/nim-lang/Nim/issues/6986))- Fixed \"error at compile-time when case branch has implicit return\"  ([#7407](https://github.com/nim-lang/Nim/issues/7407))- Fixed \"Still some issues with Static[T]\"  ([#6843](https://github.com/nim-lang/Nim/issues/6843))- Fixed \"[regression] compiler/nimeval `execute(\"echo 1\")` => Error: cannot 'importc' variable at compile time\"  ([#7522](https://github.com/nim-lang/Nim/issues/7522))- Fixed \"Too many digits from float32 to string\"  ([#7252](https://github.com/nim-lang/Nim/issues/7252))- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"  ([#7528](https://github.com/nim-lang/Nim/issues/7528))- Fixed \"Catching C++ exceptions in Nim\"  ([#3571](https://github.com/nim-lang/Nim/issues/3571))- Fixed \"[RFC] Naming convention for in-place mutating procs\"  ([#7551](https://github.com/nim-lang/Nim/issues/7551))- Fixed \"Compiler SIGSEGV when trying to use invalid subrange type\"  ([#6895](https://github.com/nim-lang/Nim/issues/6895))- Fixed \"Internal error: invalid kind for first(tyTuple) with parallel block\"  ([#2779](https://github.com/nim-lang/Nim/issues/2779))- Fixed \"type checking issue when using an empty sequence embedded in a table\"  ([#3948](https://github.com/nim-lang/Nim/issues/3948))- Fixed \"Deprecate ``callsite`` builtin\"  ([#7369](https://github.com/nim-lang/Nim/issues/7369))- Fixed \"JS codegen - indexing into cstring.\"  ([#4470](https://github.com/nim-lang/Nim/issues/4470))- Fixed \"strutils.formatEng relies on a distinction of \"\" and nil string\"  ([#6205](https://github.com/nim-lang/Nim/issues/6205))- Fixed \"timeToTimeInfo issue\"  ([#3678](https://github.com/nim-lang/Nim/issues/3678))- Fixed \"checking object type for a pragma is not possible\"  ([#7451](https://github.com/nim-lang/Nim/issues/7451))- Fixed \"nnkBracketExpr.newTree now returns tuple of NimNodes breaking newTree chaining\"  ([#7610](https://github.com/nim-lang/Nim/issues/7610))- Fixed \"\"newNilLitNode\" printed when some objects' AST is dumped shold be \"newNilLit\"\"  ([#7595](https://github.com/nim-lang/Nim/issues/7595))- Fixed \"string.replace() should throw an error when used with an empty string\"  ([#7507](https://github.com/nim-lang/Nim/issues/7507))- Fixed \"Threadpool `awaitAny()` problem on macOS\"  ([#7638](https://github.com/nim-lang/Nim/issues/7638))- Fixed \"TLineInfo on windows 32bit\"  ([#7654](https://github.com/nim-lang/Nim/issues/7654))- Fixed \"Object slicing can bite our arses\"  ([#7637](https://github.com/nim-lang/Nim/issues/7637))- Fixed \"A warning for unused but conflicting procs would be nice\"  ([#6393](https://github.com/nim-lang/Nim/issues/6393))- Fixed \"Using var return types will result in segfaults in some cases\"  ([#5113](https://github.com/nim-lang/Nim/issues/5113))- Fixed \"Borrowing for ``var T`` and ``lent T`` to improve Nim's memory safety\"  ([#7373](https://github.com/nim-lang/Nim/issues/7373))- Fixed \"Documentation/implementation mismatch for --genScript flag\"  ([#802](https://github.com/nim-lang/Nim/issues/802))- Fixed \"httpclient.generateHeaders() not setting Content-Length if body.len=0\"  ([#7680](https://github.com/nim-lang/Nim/issues/7680))- Fixed \"generic object descended from generic ref object sigmatch bug\"  ([#7600](https://github.com/nim-lang/Nim/issues/7600))- Fixed \"array construction of ptr generic object with subtype relation failed\"  ([#7601](https://github.com/nim-lang/Nim/issues/7601))- Fixed \"ambiguously typed/tuple combination with auto result type leads to a compile-time crash with SIGSEGV\"  ([#7663](https://github.com/nim-lang/Nim/issues/7663))- Fixed \"nim --linedir:on c file segfaults\"  ([#7730](https://github.com/nim-lang/Nim/issues/7730))- Fixed \"Better compiler warning/error messages\"  ([#7749](https://github.com/nim-lang/Nim/issues/7749))- Fixed \"Issues with finish.exe\"  ([#7747](https://github.com/nim-lang/Nim/issues/7747))- Fixed \"changed \"encodeUrl\" in lib/pure/uri.nim.\"  ([#7700](https://github.com/nim-lang/Nim/issues/7700))- Fixed \"Unexpected import required\"  ([#7738](https://github.com/nim-lang/Nim/issues/7738))- Fixed \"Strange interaction of add for string without explicit initialization\"  ([#7766](https://github.com/nim-lang/Nim/issues/7766))- Fixed \"Command invocation syntax doesn't work with unary operators\"  ([#7582](https://github.com/nim-lang/Nim/issues/7582))- Fixed \"Command invocation syntax doesn't work with unary operators\"  ([#7582](https://github.com/nim-lang/Nim/issues/7582))- Fixed \"3x performance regression\"  ([#7743](https://github.com/nim-lang/Nim/issues/7743))- Fixed \"seq is still nil in compile time\"  ([#7774](https://github.com/nim-lang/Nim/issues/7774))- Fixed \"Compiler segfault on sink proc for type with destructor under special condition\"  ([#7757](https://github.com/nim-lang/Nim/issues/7757))- Fixed \"Windows getch() does not correctly account for control keys\"  ([#7764](https://github.com/nim-lang/Nim/issues/7764))- Fixed \"thread local variable `threadvar` not working as expected (differs from C++ thread_local and D static)\"  ([#7565](https://github.com/nim-lang/Nim/issues/7565))- Fixed \"Setting a timeout causes assertion failures in httpclient\"  ([#2753](https://github.com/nim-lang/Nim/issues/2753))- Fixed \"Can't convert expression when surrounded with parens using %*\"  ([#7817](https://github.com/nim-lang/Nim/issues/7817))- Fixed \"Line number missing in stdlib trace\"  ([#6832](https://github.com/nim-lang/Nim/issues/6832))- Fixed \"Filter skips lines with only single character\"  ([#7855](https://github.com/nim-lang/Nim/issues/7855))- Fixed \"[regression] nimscript.task crash the compiler\"  ([#7696](https://github.com/nim-lang/Nim/issues/7696))- Fixed \"IndexError in streams.readStr()\"  ([#7877](https://github.com/nim-lang/Nim/issues/7877))- Fixed \"IndexError in streams.readStr()\"  ([#7877](https://github.com/nim-lang/Nim/issues/7877))- Fixed \"generic \"Error: cannot instantiate: 'T'\" with overload(regression)\"  ([#7883](https://github.com/nim-lang/Nim/issues/7883))- Fixed \"marshal.store generates invalid JSON\"  ([#7881](https://github.com/nim-lang/Nim/issues/7881))- Fixed \"inconsistent internal representation of generic objects array construction\"  ([#7818](https://github.com/nim-lang/Nim/issues/7818))- Fixed \"There's no `$` for openArray\"  ([#7940](https://github.com/nim-lang/Nim/issues/7940))- Fixed \"array and openarray arg vs. ptr/ref generic polymorphic issue\"  ([#7906](https://github.com/nim-lang/Nim/issues/7906))- Fixed \"Yield in try generate stack error \"  ([#7969](https://github.com/nim-lang/Nim/issues/7969))- Fixed \"Bad codegen (runtime crash) when catching exceptions in a proc with no stack trace\"  ([#7982](https://github.com/nim-lang/Nim/issues/7982))- Fixed \"`$` doesn't work for CritBitTree[void]\"  ([#7987](https://github.com/nim-lang/Nim/issues/7987))- Fixed \"Assertion  at runtime with await and json.to()\"  ([#7985](https://github.com/nim-lang/Nim/issues/7985))- Fixed \"[critbits[int]] When using `inc` to add new keys, only the first added key gets the value 1\"  ([#7990](https://github.com/nim-lang/Nim/issues/7990))- Fixed \"Error: obsolete usage of 'defined', use 'declared' instead\"  ([#7997](https://github.com/nim-lang/Nim/issues/7997))- Fixed \"C++ codegen: importcpp breaks for generic types.\"  ([#7653](https://github.com/nim-lang/Nim/issues/7653))- Fixed \"Bad line info in async code\"  ([#6803](https://github.com/nim-lang/Nim/issues/6803))- Fixed \"tmacrostmt immediate pragma cannot be removed\"  ([#5930](https://github.com/nim-lang/Nim/issues/5930))- Fixed \"parseBinInt\"  ([#8018](https://github.com/nim-lang/Nim/issues/8018))- Fixed \"RFC: Import Module Namespaces\"  ([#7250](https://github.com/nim-lang/Nim/issues/7250))- Fixed \"All symbols in concepts should be open by default\"  ([#7222](https://github.com/nim-lang/Nim/issues/7222))- Fixed \"static[T] issue with default arguments\"  ([#6928](https://github.com/nim-lang/Nim/issues/6928))- Fixed \"Compiler crash when casting a proc with asm statement to a pointer\"  ([#8076](https://github.com/nim-lang/Nim/issues/8076))- Fixed \"[regression]: nim doc <program.nim> produces <.html> instead of <program.html>\"  ([#8097](https://github.com/nim-lang/Nim/issues/8097))- Fixed \"[Regression] times.format interferes with strformat\"  ([#8100](https://github.com/nim-lang/Nim/issues/8100))- Fixed \"Regression: SIGSEGV caused by using `is` with string\"  ([#8129](https://github.com/nim-lang/Nim/issues/8129))- Fixed \"uninitialized procs variables are not nil at compile time\"  ([#6689](https://github.com/nim-lang/Nim/issues/6689))- Fixed \"unixToNativePath cause IndexError with Empty string or \".\"\"  ([#8173](https://github.com/nim-lang/Nim/issues/8173))- Fixed \"Octal int literal behavior differs from `parseOct` - change `parseOct`?\"  ([#8082](https://github.com/nim-lang/Nim/issues/8082))- Fixed \"[travis] flaky test: \"No output has been received\" caused by no prompt on \"already exists. Overwrite?\" after `nimble install`\"  ([#8227](https://github.com/nim-lang/Nim/issues/8227))- Fixed \"noSideEffect in os module\"  ([#5880](https://github.com/nim-lang/Nim/issues/5880))- Fixed \"missing `ospaths.absolutePath` function to get absolute path from a path\"  ([#8174](https://github.com/nim-lang/Nim/issues/8174))- Fixed \"Render bug with prefix and implicit string/cstring conversion\"  ([#8287](https://github.com/nim-lang/Nim/issues/8287))- Fixed \"ospaths.isAbsolute: uncovering out of bound bugs after updating to 0.18.1 from 0.18.0: empty string and nil string now checked for out of bound errors\"  ([#8251](https://github.com/nim-lang/Nim/issues/8251))- Fixed \"`Error: cannot 'importc' variable at compile time` shows wrong context\"  ([#7405](https://github.com/nim-lang/Nim/issues/7405))- Fixed \"[regression] [times.format] Error: attempting to call undeclared routine: 'format'\"  ([#8273](https://github.com/nim-lang/Nim/issues/8273))- Fixed \"`htmlparser.untilElementEnd` is not GC-safe\"  ([#8338](https://github.com/nim-lang/Nim/issues/8338))- Fixed \"`nim check` internal error\"  ([#8230](https://github.com/nim-lang/Nim/issues/8230))- Fixed \"`nim doc` fails when source file contains `doAssertRaises` in isMainModule\"  ([#8223](https://github.com/nim-lang/Nim/issues/8223))- Fixed \"Windows: can't compile with var name \"far\"\"  ([#8345](https://github.com/nim-lang/Nim/issues/8345))- Fixed \"Render bug: procs with single if statement get incorrent indentation\"  ([#8343](https://github.com/nim-lang/Nim/issues/8343))- Fixed \"json.nim macro `to` does not support objects with distinct types\"  ([#8037](https://github.com/nim-lang/Nim/issues/8037))- Fixed \"macros.hasCustomPragma() crashes when working with variant fields\"  ([#8371](https://github.com/nim-lang/Nim/issues/8371))- Fixed \"await inside stmtListExpr inside a case stmt crashes compiler\"  ([#8399](https://github.com/nim-lang/Nim/issues/8399))- Fixed \"[os] failed operations (eg existsOrCreateDir) should show runtime context (eg file/dir) it failed for\"  ([#8391](https://github.com/nim-lang/Nim/issues/8391))- Fixed \"[ospaths] ospaths.nim says OSX is FileSystemCaseSensitive:true but should be false ; cmpPaths seems wrong\"  ([#8349](https://github.com/nim-lang/Nim/issues/8349))- Fixed \"excessiveStackTrace:on shows non-absolute file in stacktrace\"  ([#7492](https://github.com/nim-lang/Nim/issues/7492))- Fixed \"`nim doc foo` generates stuff that should be under a .gitignore'd directory\"  ([#8323](https://github.com/nim-lang/Nim/issues/8323))- Fixed \"type mismatch shows wrong type for union types T1|T2|T3|T4: only keeps T1 or T2, discards rest\"  ([#8434](https://github.com/nim-lang/Nim/issues/8434))- Fixed \"devel branch encodings.convert broken on Windows\"  ([#8468](https://github.com/nim-lang/Nim/issues/8468))- Fixed \"--app:gui gives an error on osx.\"  ([#2576](https://github.com/nim-lang/Nim/issues/2576))- Fixed \"non ordinal enums are not allowed in set constructor\"  ([#8425](https://github.com/nim-lang/Nim/issues/8425))- Fixed \"[nimweb] ./koch web -o:/tmp/d13/ => `o` is actually unused and docs output dir hardcoded regardless of o\"  ([#8419](https://github.com/nim-lang/Nim/issues/8419))- Fixed \"seq/string initialized with `add` or `setLen` being deallocated\"  ([#7833](https://github.com/nim-lang/Nim/issues/7833))- Fixed \"alloc fails after 4GB\"  ([#7894](https://github.com/nim-lang/Nim/issues/7894))- Fixed \"[feature request] macros.bindSym can accept computed string\"  ([#7827](https://github.com/nim-lang/Nim/issues/7827))- Fixed \"tfragment_alloc.nim (which allocates 4GB) often makes appveyor fail with out of memory\"  ([#8509](https://github.com/nim-lang/Nim/issues/8509))- Fixed \"`echo` not thread safe on windows, causing [appveyor] flaky test: Failure: reOutputsDiffer in tforstmt.nim\"  ([#8511](https://github.com/nim-lang/Nim/issues/8511))- Fixed \"./koch xz doesn't check for dirty work tree\"  ([#7292](https://github.com/nim-lang/Nim/issues/7292))- Fixed \"non ordinal enums are not allowed in set constructor\"  ([#8425](https://github.com/nim-lang/Nim/issues/8425))- Fixed \"bad example in https://nim-lang.org/docs/docgen.html\"  ([#8215](https://github.com/nim-lang/Nim/issues/8215))- Fixed \"Ability to set a NimNode's lineinfo\"  ([#5617](https://github.com/nim-lang/Nim/issues/5617))- Fixed \"winlean.nim has wrong definition for moveFileExA\"  ([#8421](https://github.com/nim-lang/Nim/issues/8421))- Fixed \"shr operator should keep the sign bit on signed types.\"  ([#6255](https://github.com/nim-lang/Nim/issues/6255))- Fixed \"proposal (with implementation): `undistinct(T)`\"  ([#8519](https://github.com/nim-lang/Nim/issues/8519))- Fixed \"`.cache/projectname` pollutes `.cache` - put in `.cache/Nim/projectname` instead\"  ([#8599](https://github.com/nim-lang/Nim/issues/8599))- Fixed \"Iterating closure iterator in nested function is empty\"  ([#8550](https://github.com/nim-lang/Nim/issues/8550))- Fixed \"[TODO] [feature] Nim error messages should show line contents, would save lots of debugging time\"  ([#7586](https://github.com/nim-lang/Nim/issues/7586))- Fixed \"Converter: {lit} parameter constraint is not respected in implicit conversion\"  ([#7520](https://github.com/nim-lang/Nim/issues/7520))- Fixed \"`mapIt` still can't be used with `openArray` even after #8543, #8567: fails during bootstrap\"  ([#8577](https://github.com/nim-lang/Nim/issues/8577))- Fixed \"Config should be in its own directory\"  ([#8653](https://github.com/nim-lang/Nim/issues/8653))- Fixed \"sequtils.toSeq produces the sequence from the iterator twice if compiles(iter.len) == true\"  ([#7187](https://github.com/nim-lang/Nim/issues/7187))- Fixed \"`$` for Option[string] types should double-quote the output\"  ([#8658](https://github.com/nim-lang/Nim/issues/8658))- Fixed \"Config should be in its own directory\"  ([#8653](https://github.com/nim-lang/Nim/issues/8653))- Fixed \"[feature request] compile time check for experimental features\"  ([#8644](https://github.com/nim-lang/Nim/issues/8644))- Fixed \"Changes in typedesc reforms\"  ([#8126](https://github.com/nim-lang/Nim/issues/8126))- Fixed \"json.% regression\"  ([#8716](https://github.com/nim-lang/Nim/issues/8716))- Fixed \"`nim doc2 --project -o:doc/ ` cannot find files in subdirectories\"  ([#8218](https://github.com/nim-lang/Nim/issues/8218))- Fixed \"`onFailedAssert` does not affect `doAssert`\"  ([#8719](https://github.com/nim-lang/Nim/issues/8719))- Fixed \"[travis] [async] flaky test: tests/async/t7758.nim\"  ([#8756](https://github.com/nim-lang/Nim/issues/8756))- Fixed \"float literals are treated differently between manual and compiler\"  ([#8766](https://github.com/nim-lang/Nim/issues/8766))- Fixed \"[cmdline] [minor] `--hint.foo:on` as alias for `--hint[foo]:on`: avoids edge cases with `[` that needs to be escaped on cmd line + other places\"  ([#8739](https://github.com/nim-lang/Nim/issues/8739))- Fixed \"Duplicate member error for union types\"  ([#8781](https://github.com/nim-lang/Nim/issues/8781))- Fixed \"nim c compiler/nimblecmd.nim fails:  Error: type mismatch: got <StringTableRef, string>\"  ([#8776](https://github.com/nim-lang/Nim/issues/8776))- Fixed \"Compiler crash with $, converter and generics\"  ([#4766](https://github.com/nim-lang/Nim/issues/4766))- Fixed \"[unidecode] Fix the `unidecode` example\"  ([#8768](https://github.com/nim-lang/Nim/issues/8768))- Fixed \"[unidecode] Make `loadUnidecodeTable` use the path to unicode.dat on user's system by default\"  ([#8767](https://github.com/nim-lang/Nim/issues/8767))- Fixed \"marshal.load() regression?\"  ([#7854](https://github.com/nim-lang/Nim/issues/7854))- Fixed \"[unidecode] Fix the `unidecode` example\"  ([#8768](https://github.com/nim-lang/Nim/issues/8768))- Fixed \"Converter applied when it should not be\"  ([#8049](https://github.com/nim-lang/Nim/issues/8049))- Fixed \"Pure enums allow using the same name but allow nonqualification with quirky behaviour\"  ([#8066](https://github.com/nim-lang/Nim/issues/8066))- Fixed \"Correctly redirect stderr when using osproc's posix_spawn backend\"  ([#8624](https://github.com/nim-lang/Nim/issues/8624))- Fixed \"`errorStream` doesn't seem to work\"  ([#8442](https://github.com/nim-lang/Nim/issues/8442))- Fixed \"Nested template: SIGSEGV at compile-time\"  ([#8052](https://github.com/nim-lang/Nim/issues/8052))- Fixed \"`Error: undeclared identifier: '|'` when using `|` inside a `runnableExamples:`\"  ([#8694](https://github.com/nim-lang/Nim/issues/8694))- Fixed \"runnableExamples doesn't work at module level\"  ([#8641](https://github.com/nim-lang/Nim/issues/8641))- Fixed \"[runnableExamples] `Hint: operation successful: runnableExamples` even though operation failed: compile error is ignored\"  ([#8831](https://github.com/nim-lang/Nim/issues/8831))- Fixed \"`runnableExamples` don't have own scope for imports\"  ([#7285](https://github.com/nim-lang/Nim/issues/7285))- Fixed \"`nim check` segfaults\"  ([#8028](https://github.com/nim-lang/Nim/issues/8028))- Fixed \"addQuoted gives unquoted result on cstring (works on string)\"  ([#8847](https://github.com/nim-lang/Nim/issues/8847))- Fixed \"[nimscript] exception handling broken: `except BaseClass` doesn't work\"  ([#8740](https://github.com/nim-lang/Nim/issues/8740))- Fixed \"Unary `.` operator can't be parsed\"  ([#8797](https://github.com/nim-lang/Nim/issues/8797))- Fixed \"system.on_raise works only for \"single level\"\"  ([#1652](https://github.com/nim-lang/Nim/issues/1652))- Fixed \"Final facelifiting nimrod -> nim\"  ([#2032](https://github.com/nim-lang/Nim/issues/2032))- Fixed \"marshal: document usage of \"to\"\"  ([#3150](https://github.com/nim-lang/Nim/issues/3150))- Fixed \"Name conflict between template and proc parameter\"  ([#4750](https://github.com/nim-lang/Nim/issues/4750))- Fixed \"Operator overloading bug with unittest check macro\"  ([#5252](https://github.com/nim-lang/Nim/issues/5252))- Fixed \"nim check crash due to typo\"  ([#5745](https://github.com/nim-lang/Nim/issues/5745))- Fixed \"Regression (?): ICE in transformImportAs\"  ([#8852](https://github.com/nim-lang/Nim/issues/8852))- Fixed \"generic match error\"  ([#1156](https://github.com/nim-lang/Nim/issues/1156))- Fixed \"Adding a mention of the `unsafeAddr` operator to the Nim manual\"  ([#5038](https://github.com/nim-lang/Nim/issues/5038))- Fixed \"`using` types should have higher precedence\"  ([#8565](https://github.com/nim-lang/Nim/issues/8565))- Fixed \"Add noSignalHandler documentation and examples\"  ([#8224](https://github.com/nim-lang/Nim/issues/8224))- Fixed \"`-d:identifier` is case insensitive (not partially case insensitive)\"  ([#7506](https://github.com/nim-lang/Nim/issues/7506))- Fixed \"addQuitProc argument requires {.noconv.} not documented\"  ([#5794](https://github.com/nim-lang/Nim/issues/5794))- Fixed \"Compilation error does not point to the actual wrong parameter\"  ([#8043](https://github.com/nim-lang/Nim/issues/8043))- Fixed \"Clean up examples\"  ([#7725](https://github.com/nim-lang/Nim/issues/7725))- Fixed \"Documentation footer timestamp is not UTC\"  ([#7305](https://github.com/nim-lang/Nim/issues/7305))- Fixed \"Regression: compiler stack overflow in transformIteratorBody/lowerStmtListExprs\"  ([#8851](https://github.com/nim-lang/Nim/issues/8851))- Fixed \"The `writeStackTrace` proc listed twice in docs\"  ([#3655](https://github.com/nim-lang/Nim/issues/3655))- Fixed \"Error: unhandled exception: n.kind == nkStmtListExpr  [AssertionError]\"  ([#8243](https://github.com/nim-lang/Nim/issues/8243))- Fixed \"The `writeStackTrace` proc listed twice in docs\"  ([#3655](https://github.com/nim-lang/Nim/issues/3655))- Fixed \"Regression: stack trace line numbers are messed up for asserts\"  ([#8928](https://github.com/nim-lang/Nim/issues/8928))- Fixed \"Regression bug in lines()\"  ([#8961](https://github.com/nim-lang/Nim/issues/8961))- Fixed \"Core dump for RTree module -- regression\"  ([#8883](https://github.com/nim-lang/Nim/issues/8883))- Fixed \"`system.cmp` returns different results for string on different operating systems\"  ([#8930](https://github.com/nim-lang/Nim/issues/8930))- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"  ([#8925](https://github.com/nim-lang/Nim/issues/8925))- Fixed \"Regression bug in lines()\"  ([#8961](https://github.com/nim-lang/Nim/issues/8961))- Fixed \"Typetraits arity: off-by-one for arrays\"  ([#8965](https://github.com/nim-lang/Nim/issues/8965))- Fixed \"`strutils.nim(1533, 29) Error: illegal conversion from '-1' to '[0..9223372036854775807]'` with strutils.replace on empty string at CT\"  ([#8911](https://github.com/nim-lang/Nim/issues/8911))- Fixed \"Iterators in combination with closures misbehave\"  ([#3837](https://github.com/nim-lang/Nim/issues/3837))- Fixed \"procCall is not documented\"  ([#4329](https://github.com/nim-lang/Nim/issues/4329))- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"  ([#8925](https://github.com/nim-lang/Nim/issues/8925))- Fixed \"Add exports section to documentation generator\"  ([#1616](https://github.com/nim-lang/Nim/issues/1616))- Fixed \"Improve error message for redefinitions\"  ([#447](https://github.com/nim-lang/Nim/issues/447))- Fixed \"[minor] operator symbols in anchor text disappear, causing anchor clashes\"  ([#7500](https://github.com/nim-lang/Nim/issues/7500))- Fixed \"Incorrect executable name of the C compiler when performing crosscompilation\"  ([#8081](https://github.com/nim-lang/Nim/issues/8081))- Fixed \"[ICE/regression] when proc with var return type interacting with method\"  ([#9076](https://github.com/nim-lang/Nim/issues/9076))", "content_with_meta": "---\ntitle: \"Version 0.19.0 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.0, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\n# Installing 0.19.0\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n# What's new in 0.19.0\n\nThe ``nil`` state for strings/seqs is gone. Instead the default value for\nthese is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period. This\neliminates a large class of bugs that used to plague the average Nim code\nout there, including Nim's standard library.\n\nAccessing the binary zero terminator in Nim's native strings\nis now invalid. Internally a Nim string still has the trailing zero for\nzero-copy interoperability with ``cstring``. Compile your code with the\nnew switch ``--laxStrings:on`` if you need a transition period.\n\nThese changes to strings and seqs give us more flexibility in how they\nare implemented and indeed alternative implementations are in development.\n\n``experimental`` is now a pragma and a command line switch that can enable\nspecific language extensions, it is not an all-or-nothing switch anymore.\nWe think this leads to a more robust development process where it's clearly\ndocumented which parts of Nim are bleeding edge and which parts can be relied\nupon.\n\nOther notable language additions:\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma.\n\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matching.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the ``export`` statement.\n\n- Range float types, example ``range[0.0 .. Inf]``. More details in language manual.\n\n\n## Breaking changes to be mindful of\n\n- The default location of ``nimcache`` for the native code targets was\n  changed. Read [the compiler user guide](https://nim-lang.org/docs/nimc.html#generated-c-code-directory)\n  for more information.\n- Lots of deprecated symbols in the standard library that have been deprecated for\n  quite some time now like ``system.expr`` or the old type aliases starting with a ``T``\n  or ``P`` prefix have been removed.\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n## Async improvements\n\nThe \"closure iterators\" that Nim's ``async`` macro is based on has been\nrewritten from the ground up and so ``async`` works completely with\nexception handling. Finally it is possible to use ``await`` in a ``try``\nstatement!\n\n\n## Nimble 0.9.0\n\nThis release includes a brand new version of Nimble. The new version\ncontains a breaking change which you should read up on if you own\nhybrid packages. There are also the usual bug fixes and this release\ncontains a lot of them.\n\nFor more information, see the\n[Nimble v0.9.0 changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#090---19092018).\n\n## Contributors to v0.19.0\n\nOur contributors are amazing, and there is\n[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to list\nhere. Big thanks to all of you, we couldn't have pulled off this release\nwithout you!\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n### Breaking changes in the standard library\n\n- ``re.split`` for empty regular expressions now yields every character in\n  the string which is what other programming languages chose to do.\n- The returned tuple of ``system.instantiationInfo`` now has a third field\n  containing the column of the instantiation.\n\n- ``cookies.setCookie`` no longer assumes UTC for the expiration date.\n- ``strutils.formatEng`` does not distinguish between ``nil`` and ``\"\"``\n  strings anymore for its ``unit`` parameter. Instead the space is controlled\n  by a new parameter ``useUnitSpace``.\n\n- The ``times.parse`` and ``times.format`` procs have been rewritten.\n  The proc signatures are the same so it should generally not break anything.\n  However, the new implementation is a bit stricter, which is a breaking change.\n  For example ``parse(\"2017-01-01 foo\", \"yyyy-MM-dd\")`` will now raise an error.\n\n- ``proc `-`*(a, b: Time): int64`` in the ``times`` module has changed return type\n  to ``times.Duration`` in order to support higher time resolutions.\n  The proc is no longer deprecated.\n\n- The ``times.Timezone`` is now an immutable ref-type that must be initialized\n  with an explicit constructor (``newTimezone``).\n\n- ``posix.Timeval.tv_sec`` has changed type to ``posix.Time``.\n\n- ``math.`mod` `` for floats now behaves the same as ``mod`` for integers\n  (previously it used floor division like Python). Use ``math.floorMod`` for the old behavior.\n\n- For string inputs, ``unicode.isUpper`` and ``unicode.isLower`` now require a\n  second mandatory parameter ``skipNonAlpha``.\n\n- For string inputs, ``strutils.isUpperAscii`` and ``strutils.isLowerAscii`` now\n  require a second mandatory parameter ``skipNonAlpha``.\n\n- ``osLastError`` is now marked with ``sideEffect``\n- The procs ``parseHexInt`` and ``parseOctInt`` now fail on empty strings\n  and strings containing only valid prefixes, e.g. \"0x\" for hex integers.\n\n- ``terminal.setCursorPos`` and ``terminal.setCursorXPos`` now work correctly\n  with 0-based coordinates on POSIX (previously, you needed to use\n  1-based coordinates on POSIX for correct behaviour; the Windows behaviour\n  was always correct).\n\n- ``lineInfoObj`` now returns absolute path instead of project path.\n  It's used by ``lineInfo``, ``check``, ``expect``, ``require``, etc.\n\n- ``net.sendTo`` no longer returns an int and now raises an ``OSError``.\n- `threadpool`'s `await` and derivatives have been renamed to `blockUntil`\n  to avoid confusions with `await` from the `async` macro.\n\n\n\n## Library additions\n\n- ``re.split`` now also supports the ``maxsplit`` parameter for consistency\n  with ``strutils.split``.\n- Added ``system.toOpenArray`` in order to support zero-copy slicing\n  operations. This is currently not yet available for the JavaScript target.\n- Added ``getCurrentDir``, ``findExe``, ``cpDir`` and  ``mvDir`` procs to\n  ``nimscript``.\n- The ``times`` module now supports up to nanosecond time resolution when available.\n- Added the type ``times.Duration`` for representing fixed durations of time.\n- Added the proc ``times.convert`` for converting between different time units,\n  e.g days to seconds.\n- Added the proc ``algorithm.binarySearch[T, K]`` with the ```cmp``` parameter.\n- Added the proc ``algorithm.upperBound``.\n- Added inverse hyperbolic functions, ``math.arcsinh``, ``math.arccosh`` and ``math.arctanh`` procs.\n- Added cotangent, secant and cosecant procs ``math.cot``, ``math.sec`` and ``math.csc``; and their hyperbolic, inverse and inverse hyperbolic functions, ``math.coth``, ``math.sech``, ``math.csch``, ``math.arccot``, ``math.arcsec``, ``math.arccsc``, ``math.arccoth``, ``math.arcsech`` and ``math.arccsch`` procs.\n- Added the procs ``math.floorMod`` and ``math.floorDiv`` for floor based integer division.\n- Added the procs ``rationals.`div```, ``rationals.`mod```, ``rationals.floorDiv`` and ``rationals.floorMod`` for rationals.\n- Added the proc ``math.prod`` for product of elements in an openArray.\n- Added the proc ``parseBinInt`` to parse a binary integer from a string, which returns the value.\n- ``parseOct`` and ``parseBin`` in parseutils now also support the ``maxLen`` argument similar to ``parseHexInt``.\n- Added the proc ``flush`` for memory mapped files.\n- Added the ``MemMapFileStream``.\n- Added a simple interpreting event parser template ``eventParser`` to the ``pegs`` module.\n- Added ``macros.copyLineInfo`` to copy lineInfo from other node.\n- Added ``system.ashr`` an arithmetic right shift for integers.\n\n\n## Library changes\n\n- The stdlib module ``future`` has been renamed to ``sugar``.\n- ``macros.callsite`` is now deprecated. Since the introduction of ``varargs``\n  parameters this became unnecessary.\n\n- ``macros.astGenRepr``, ``macros.lispRepr`` and ``macros.treeRepr``\n  now escapes the content of string literals consistently.\n- ``macros.NimSym`` and ``macros.NimIdent`` is now deprecated in favor\n  of the more general ``NimNode``.\n- ``macros.getImpl`` now includes the pragmas of types, instead of omitting them.\n- ``macros.hasCustomPragma`` and ``macros.getCustomPragmaVal`` now\n  also support ``ref`` and ``ptr`` types, pragmas on types and variant\n  fields.\n- ``system.SomeReal`` is now called ``SomeFloat`` for consistency and\n  correctness.\n- ``algorithm.smartBinarySearch`` and ``algorithm.binarySearch`` is\n  now joined in ``binarySearch``. ``smartbinarySearch`` is now\n  deprecated.\n- The `terminal` module now exports additional procs for generating ANSI color\n  codes as strings.\n- Added the parameter ``val`` for the ``CritBitTree[int].inc`` proc.\n- An exception raised from a ``test`` block of ``unittest`` now shows its type in\n  error message.\n- The ``compiler/nimeval`` API was rewritten to simplify the \"compiler as an\n  API\". Using the Nim compiler and its VM as a scripting engine has never been\n  easier. See ``tests/compilerapi/tcompilerapi.nim`` for an example of how to\n  use the Nim VM in a native Nim application.\n- Added the parameter ``val`` for the ``CritBitTree[T].incl`` proc.\n- The proc ``tgamma`` was renamed to ``gamma``. ``tgamma`` is deprecated.\n- The ``pegs`` module now exports getters for the fields of its ``Peg`` and ``NonTerminal``\n  object types. ``Peg``s with child nodes now have the standard ``items`` and ``pairs``\n  iterators.\n- The ``accept`` socket procedure defined in the ``net`` module can now accept\n  a nil socket.\n\n\n## Language additions\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matchers.\n\n- the `typedesc` special type has been renamed to just `type`.\n- `static` and `type` are now also modifiers similar to `ref` and `ptr`.\n  They denote the special types `static[T]` and `type[T]`.\n- Forcing compile-time evaluation with `static` now supports specifying\n  the desired target type (as a concrete type or as a type class)\n- The `type` operator now supports checking that the supplied expression\n  matches an expected type constraint.\n\n\n## Language changes\n\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma. The underlying AST is ``nnkTupleConstr(newLit 1)`` for this\n  example. ``nnkTupleConstr`` is a new node kind your macros need to be able\n  to deal with!\n- Indexing into a ``cstring`` for the JS target is now mapped\n  to ``charCodeAt``.\n- Assignments that would \"slice\" an object into its supertype are now prevented\n  at runtime. Use ``ref object`` with inheritance rather than ``object`` with\n  inheritance to prevent this issue.\n- The ``not nil`` type annotation now has to be enabled explicitly\n  via ``{.experimental: \"notnil\"}`` as we are still not pleased with how this\n  feature works with Nim's containers.\n- The parser now warns about inconsistent spacing around binary operators as\n  these can easily be confused with unary operators. This warning will likely\n  become an error in the future.\n- The ``'c`` and ``'C'`` suffix for octal literals is now deprecated to\n  bring the language in line with the standard library (e.g. ``parseOct``).\n- The dot style for import paths (e.g ``import path.to.module`` instead of\n  ``import path/to/module``) has been deprecated.\n\n- The `importcpp` pragma now allows importing the listed fields of generic\n  C++ types. Support for numeric parameters have also been added through\n  the use of `static[T]` types.\n  (#6415)\n\n- Native C++ exceptions can now be imported with `importcpp` pragma.\n  Imported exceptions can be raised and caught just like Nim exceptions.\n  More details in language manual.\n\n- ``nil`` for strings/seqs is finally gone. Instead the default value for\n  these is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period.\n\n- Accessing the binary zero terminator in Nim's native strings\n  is now invalid. Internally a Nim string still has the trailing zero for\n  zero-copy interoperability with ``cstring``. Compile your code with the\n  new switch ``--laxStrings:on`` if you need a transition period.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the export statement.\n\n- Range checked floating point types, for example ``range[0.0 .. Inf]``,\n  are now supported.\n- The ``{.this.}`` pragma has been deprecated. It never worked within generics and\n  we found the resulting code harder to read than the more explicit ``obj.field``\n  syntax.\n- \"Memory regions\" for pointer types have been deprecated, they were hardly used\n  anywhere. Note that this has **nothing** to do with the ``--gc:regions`` switch\n  of managing memory.\n\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n### Tool changes\n\n- ``jsondoc2`` has been renamed ``jsondoc``, similar to how ``doc2`` was renamed\n  ``doc``. The old ``jsondoc`` can still be invoked with ``jsondoc0``.\n\n### Compiler changes\n\n- The undocumented ``#? braces`` parsing mode was removed.\n- The undocumented PHP backend was removed.\n\n- The VM's instruction count limit was raised to 3 million instructions in\n  order to support more complex computations at compile-time.\n\n- Support for hot code reloading has been implemented for the JavaScript\n  target. To use it, compile your code with `--hotCodeReloading:on` and use a\n  helper library such as LiveReload or BrowserSync.\n\n- A new compiler option `--cppCompileToNamespace` puts the generated C++ code\n  into the namespace \"Nim\" in order to avoid naming conflicts with existing\n  C++ code. This is done for all Nim code - internal and exported.\n\n- Added ``macros.getProjectPath`` and ``ospaths.putEnv`` procs to Nim's virtual\n  machine.\n\n- The ``deadCodeElim`` option is now always turned on and the switch has no\n  effect anymore, but is recognized for backwards compatibility.\n\n- ``experimental`` is now a pragma / command line switch that can enable specific\n  language extensions, it is not an all-or-nothing switch anymore.\n\n- Nintendo Switch was added as a new platform target. See [the compiler user guide](https://nim-lang.org/docs/nimc.html)\n  for more info.\n\n- macros.bindSym now capable to accepts not only literal string or string constant expression.\n  bindSym enhancement make it also can accepts computed string or ident node inside macros /\n  compile time functions / static blocks. Only in templates / regular code it retains it's\n  old behavior.\n  This new feature can be accessed via {.experimental: \"dynamicBindSym\".} pragma/switch.\n\n- On Posix systems the global system wide configuration is now put under ``/etc/nim/nim.cfg``,\n  it used to be ``/etc/nim.cfg``. Usually it does not exist, however.\n\n- On Posix systems the user configuration is now looked under ``$XDG_CONFIG_HOME/nim/nim.cfg``\n  (if ``XDG_CONFIG_HOME`` is not defined, then under ``~/.config/nim/nim.cfg``). It used to be\n  ``$XDG_CONFIG_DIR/nim.cfg`` (and ``~/.config/nim.cfg``).\n\n  Similarly, on Windows, the user configuration is now looked under ``%APPDATA%/nim/nim.cfg``.\n  This used to be ``%APPDATA%/nim.cfg``.\n\n\n## Bugfixes\n\n- Fixed \"constructor pragma leads to \"Most Vexing Parse\" in c++ code gen\"\n  ([#6837](https://github.com/nim-lang/Nim/issues/6837))\n\n- Fixed \"[RFC] newFileStream(string, FileMode) returns nil\"\n  ([#5588](https://github.com/nim-lang/Nim/issues/5588))\n- Fixed \"Search feature doesn't work on all docs pages \"\n  ([#7294](https://github.com/nim-lang/Nim/issues/7294))\n- Fixed \"Wrong comparison with empty string in version 0.18\"\n  ([#7291](https://github.com/nim-lang/Nim/issues/7291))\n- Fixed \"doc2 css troubles\"\n  ([#5293](https://github.com/nim-lang/Nim/issues/5293))\n- Fixed \"SIGSEGV when passing empty array to strutils format\"\n  ([#7293](https://github.com/nim-lang/Nim/issues/7293))\n- Fixed \"strip() weird behavior \"\n  ([#7159](https://github.com/nim-lang/Nim/issues/7159))\n- Fixed \"On Windows: When app type is GUI, error message can't be seen, about missing DLL file or procedure\"\n  ([#7212](https://github.com/nim-lang/Nim/issues/7212))\n- Fixed \"Compiler crash: multiple exception types with infix as\"\n  ([#7115](https://github.com/nim-lang/Nim/issues/7115))\n- Fixed \"C++ template object: Internal Error mangleRecFieldName\"\n  ([#6415](https://github.com/nim-lang/Nim/issues/6415))\n- Fixed \"Undefined Behavior when using const/let tables (Nim v0.18.1)\"\n  ([#7332](https://github.com/nim-lang/Nim/issues/7332))\n- Fixed \"Codegen: forward type declarations can be used more aggressively\"\n  ([#7339](https://github.com/nim-lang/Nim/issues/7339))\n- Fixed \"asyncfile getFileSize issue in linux\"\n  ([#7347](https://github.com/nim-lang/Nim/issues/7347))\n- Fixed \"Compiler manual is not that clear about int literal\"\n  ([#7304](https://github.com/nim-lang/Nim/issues/7304))\n- Fixed \"Bad error message when writing to a data structure within read-only object\"\n  ([#7335](https://github.com/nim-lang/Nim/issues/7335))\n- Fixed \"Compiler crash using @[int]\"\n  ([#7331](https://github.com/nim-lang/Nim/issues/7331))\n- Fixed \"Redefinition of object in C when a proc with sink param is defined.\"\n  ([#7364](https://github.com/nim-lang/Nim/issues/7364))\n- Fixed \"[Regression] Missing type declarations in C code if members are used in {.emit.}\"\n  ([#7363](https://github.com/nim-lang/Nim/issues/7363))\n- Fixed \"(regression) dereferencing pointer to incomplete type\"\n  ([#7392](https://github.com/nim-lang/Nim/issues/7392))\n- Fixed \"In nested try statements finally is not executed\"\n  ([#7414](https://github.com/nim-lang/Nim/issues/7414))\n- Fixed \"json.to doesn't work when Option[T] is inside an array\"\n  ([#7433](https://github.com/nim-lang/Nim/issues/7433))\n- Fixed \"https://nim-lang.org/docs/lib.html => If you are reading this you are missing nimblepkglist.js...\"\n  ([#7400](https://github.com/nim-lang/Nim/issues/7400))\n- Fixed \"json.to and Option[T] fails on JNull in JSON list literal\"\n  ([#6902](https://github.com/nim-lang/Nim/issues/6902))\n- Fixed \"inconsistent escaping of string literals\"\n  ([#7473](https://github.com/nim-lang/Nim/issues/7473))\n- Fixed \"streams.readLine(): string should raise IOError, but doesn't\"\n  ([#5281](https://github.com/nim-lang/Nim/issues/5281))\n\n- Fixed \"Duplicate definition in cpp codegen\"\n  ([#6986](https://github.com/nim-lang/Nim/issues/6986))\n- Fixed \"error at compile-time when case branch has implicit return\"\n  ([#7407](https://github.com/nim-lang/Nim/issues/7407))\n- Fixed \"Still some issues with Static[T]\"\n  ([#6843](https://github.com/nim-lang/Nim/issues/6843))\n- Fixed \"[regression] compiler/nimeval `execute(\"echo 1\")` => Error: cannot 'importc' variable at compile time\"\n  ([#7522](https://github.com/nim-lang/Nim/issues/7522))\n- Fixed \"Too many digits from float32 to string\"\n  ([#7252](https://github.com/nim-lang/Nim/issues/7252))\n- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\n  ([#7528](https://github.com/nim-lang/Nim/issues/7528))\n- Fixed \"Catching C++ exceptions in Nim\"\n  ([#3571](https://github.com/nim-lang/Nim/issues/3571))\n- Fixed \"[RFC] Naming convention for in-place mutating procs\"\n  ([#7551](https://github.com/nim-lang/Nim/issues/7551))\n- Fixed \"Compiler SIGSEGV when trying to use invalid subrange type\"\n  ([#6895](https://github.com/nim-lang/Nim/issues/6895))\n- Fixed \"Internal error: invalid kind for first(tyTuple) with parallel block\"\n  ([#2779](https://github.com/nim-lang/Nim/issues/2779))\n- Fixed \"type checking issue when using an empty sequence embedded in a table\"\n  ([#3948](https://github.com/nim-lang/Nim/issues/3948))\n- Fixed \"Deprecate ``callsite`` builtin\"\n  ([#7369](https://github.com/nim-lang/Nim/issues/7369))\n- Fixed \"JS codegen - indexing into cstring.\"\n  ([#4470](https://github.com/nim-lang/Nim/issues/4470))\n\n- Fixed \"strutils.formatEng relies on a distinction of \"\" and nil string\"\n  ([#6205](https://github.com/nim-lang/Nim/issues/6205))\n- Fixed \"timeToTimeInfo issue\"\n  ([#3678](https://github.com/nim-lang/Nim/issues/3678))\n- Fixed \"checking object type for a pragma is not possible\"\n  ([#7451](https://github.com/nim-lang/Nim/issues/7451))\n- Fixed \"nnkBracketExpr.newTree now returns tuple of NimNodes breaking newTree chaining\"\n  ([#7610](https://github.com/nim-lang/Nim/issues/7610))\n\n- Fixed \"\"newNilLitNode\" printed when some objects' AST is dumped shold be \"newNilLit\"\"\n  ([#7595](https://github.com/nim-lang/Nim/issues/7595))\n\n- Fixed \"string.replace() should throw an error when used with an empty string\"\n  ([#7507](https://github.com/nim-lang/Nim/issues/7507))\n- Fixed \"Threadpool `awaitAny()` problem on macOS\"\n  ([#7638](https://github.com/nim-lang/Nim/issues/7638))\n- Fixed \"TLineInfo on windows 32bit\"\n  ([#7654](https://github.com/nim-lang/Nim/issues/7654))\n- Fixed \"Object slicing can bite our arses\"\n  ([#7637](https://github.com/nim-lang/Nim/issues/7637))\n- Fixed \"A warning for unused but conflicting procs would be nice\"\n  ([#6393](https://github.com/nim-lang/Nim/issues/6393))\n- Fixed \"Using var return types will result in segfaults in some cases\"\n  ([#5113](https://github.com/nim-lang/Nim/issues/5113))\n- Fixed \"Borrowing for ``var T`` and ``lent T`` to improve Nim's memory safety\"\n  ([#7373](https://github.com/nim-lang/Nim/issues/7373))\n- Fixed \"Documentation/implementation mismatch for --genScript flag\"\n  ([#802](https://github.com/nim-lang/Nim/issues/802))\n- Fixed \"httpclient.generateHeaders() not setting Content-Length if body.len=0\"\n  ([#7680](https://github.com/nim-lang/Nim/issues/7680))\n- Fixed \"generic object descended from generic ref object sigmatch bug\"\n  ([#7600](https://github.com/nim-lang/Nim/issues/7600))\n- Fixed \"array construction of ptr generic object with subtype relation failed\"\n  ([#7601](https://github.com/nim-lang/Nim/issues/7601))\n- Fixed \"ambiguously typed/tuple combination with auto result type leads to a compile-time crash with SIGSEGV\"\n  ([#7663](https://github.com/nim-lang/Nim/issues/7663))\n- Fixed \"nim --linedir:on c file segfaults\"\n  ([#7730](https://github.com/nim-lang/Nim/issues/7730))\n- Fixed \"Better compiler warning/error messages\"\n  ([#7749](https://github.com/nim-lang/Nim/issues/7749))\n\n- Fixed \"Issues with finish.exe\"\n  ([#7747](https://github.com/nim-lang/Nim/issues/7747))\n\n- Fixed \"changed \"encodeUrl\" in lib/pure/uri.nim.\"\n  ([#7700](https://github.com/nim-lang/Nim/issues/7700))\n- Fixed \"Unexpected import required\"\n  ([#7738](https://github.com/nim-lang/Nim/issues/7738))\n- Fixed \"Strange interaction of add for string without explicit initialization\"\n  ([#7766](https://github.com/nim-lang/Nim/issues/7766))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"3x performance regression\"\n  ([#7743](https://github.com/nim-lang/Nim/issues/7743))\n- Fixed \"seq is still nil in compile time\"\n  ([#7774](https://github.com/nim-lang/Nim/issues/7774))\n- Fixed \"Compiler segfault on sink proc for type with destructor under special condition\"\n  ([#7757](https://github.com/nim-lang/Nim/issues/7757))\n- Fixed \"Windows getch() does not correctly account for control keys\"\n  ([#7764](https://github.com/nim-lang/Nim/issues/7764))\n- Fixed \"thread local variable `threadvar` not working as expected (differs from C++ thread_local and D static)\"\n  ([#7565](https://github.com/nim-lang/Nim/issues/7565))\n- Fixed \"Setting a timeout causes assertion failures in httpclient\"\n  ([#2753](https://github.com/nim-lang/Nim/issues/2753))\n- Fixed \"Can't convert expression when surrounded with parens using %*\"\n  ([#7817](https://github.com/nim-lang/Nim/issues/7817))\n- Fixed \"Line number missing in stdlib trace\"\n  ([#6832](https://github.com/nim-lang/Nim/issues/6832))\n- Fixed \"Filter skips lines with only single character\"\n  ([#7855](https://github.com/nim-lang/Nim/issues/7855))\n- Fixed \"[regression] nimscript.task crash the compiler\"\n  ([#7696](https://github.com/nim-lang/Nim/issues/7696))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"generic \"Error: cannot instantiate: 'T'\" with overload(regression)\"\n  ([#7883](https://github.com/nim-lang/Nim/issues/7883))\n- Fixed \"marshal.store generates invalid JSON\"\n  ([#7881](https://github.com/nim-lang/Nim/issues/7881))\n- Fixed \"inconsistent internal representation of generic objects array construction\"\n  ([#7818](https://github.com/nim-lang/Nim/issues/7818))\n- Fixed \"There's no `$` for openArray\"\n  ([#7940](https://github.com/nim-lang/Nim/issues/7940))\n- Fixed \"array and openarray arg vs. ptr/ref generic polymorphic issue\"\n  ([#7906](https://github.com/nim-lang/Nim/issues/7906))\n- Fixed \"Yield in try generate stack error \"\n  ([#7969](https://github.com/nim-lang/Nim/issues/7969))\n- Fixed \"Bad codegen (runtime crash) when catching exceptions in a proc with no stack trace\"\n  ([#7982](https://github.com/nim-lang/Nim/issues/7982))\n- Fixed \"`$` doesn't work for CritBitTree[void]\"\n  ([#7987](https://github.com/nim-lang/Nim/issues/7987))\n- Fixed \"Assertion  at runtime with await and json.to()\"\n  ([#7985](https://github.com/nim-lang/Nim/issues/7985))\n- Fixed \"[critbits[int]] When using `inc` to add new keys, only the first added key gets the value 1\"\n  ([#7990](https://github.com/nim-lang/Nim/issues/7990))\n- Fixed \"Error: obsolete usage of 'defined', use 'declared' instead\"\n  ([#7997](https://github.com/nim-lang/Nim/issues/7997))\n\n- Fixed \"C++ codegen: importcpp breaks for generic types.\"\n  ([#7653](https://github.com/nim-lang/Nim/issues/7653))\n- Fixed \"Bad line info in async code\"\n  ([#6803](https://github.com/nim-lang/Nim/issues/6803))\n- Fixed \"tmacrostmt immediate pragma cannot be removed\"\n  ([#5930](https://github.com/nim-lang/Nim/issues/5930))\n- Fixed \"parseBinInt\"\n  ([#8018](https://github.com/nim-lang/Nim/issues/8018))\n- Fixed \"RFC: Import Module Namespaces\"\n  ([#7250](https://github.com/nim-lang/Nim/issues/7250))\n- Fixed \"All symbols in concepts should be open by default\"\n  ([#7222](https://github.com/nim-lang/Nim/issues/7222))\n- Fixed \"static[T] issue with default arguments\"\n  ([#6928](https://github.com/nim-lang/Nim/issues/6928))\n- Fixed \"Compiler crash when casting a proc with asm statement to a pointer\"\n  ([#8076](https://github.com/nim-lang/Nim/issues/8076))\n- Fixed \"[regression]: nim doc <program.nim> produces <.html> instead of <program.html>\"\n  ([#8097](https://github.com/nim-lang/Nim/issues/8097))\n\n- Fixed \"[Regression] times.format interferes with strformat\"\n  ([#8100](https://github.com/nim-lang/Nim/issues/8100))\n- Fixed \"Regression: SIGSEGV caused by using `is` with string\"\n  ([#8129](https://github.com/nim-lang/Nim/issues/8129))\n- Fixed \"uninitialized procs variables are not nil at compile time\"\n  ([#6689](https://github.com/nim-lang/Nim/issues/6689))\n- Fixed \"unixToNativePath cause IndexError with Empty string or \".\"\"\n  ([#8173](https://github.com/nim-lang/Nim/issues/8173))\n\n- Fixed \"Octal int literal behavior differs from `parseOct` - change `parseOct`?\"\n  ([#8082](https://github.com/nim-lang/Nim/issues/8082))\n\n- Fixed \"[travis] flaky test: \"No output has been received\" caused by no prompt on \"already exists. Overwrite?\" after `nimble install`\"\n  ([#8227](https://github.com/nim-lang/Nim/issues/8227))\n\n- Fixed \"noSideEffect in os module\"\n  ([#5880](https://github.com/nim-lang/Nim/issues/5880))\n- Fixed \"missing `ospaths.absolutePath` function to get absolute path from a path\"\n  ([#8174](https://github.com/nim-lang/Nim/issues/8174))\n- Fixed \"Render bug with prefix and implicit string/cstring conversion\"\n  ([#8287](https://github.com/nim-lang/Nim/issues/8287))\n\n- Fixed \"ospaths.isAbsolute: uncovering out of bound bugs after updating to 0.18.1 from 0.18.0: empty string and nil string now checked for out of bound errors\"\n  ([#8251](https://github.com/nim-lang/Nim/issues/8251))\n- Fixed \"`Error: cannot 'importc' variable at compile time` shows wrong context\"\n  ([#7405](https://github.com/nim-lang/Nim/issues/7405))\n- Fixed \"[regression] [times.format] Error: attempting to call undeclared routine: 'format'\"\n  ([#8273](https://github.com/nim-lang/Nim/issues/8273))\n- Fixed \"`htmlparser.untilElementEnd` is not GC-safe\"\n  ([#8338](https://github.com/nim-lang/Nim/issues/8338))\n- Fixed \"`nim check` internal error\"\n  ([#8230](https://github.com/nim-lang/Nim/issues/8230))\n- Fixed \"`nim doc` fails when source file contains `doAssertRaises` in isMainModule\"\n  ([#8223](https://github.com/nim-lang/Nim/issues/8223))\n- Fixed \"Windows: can't compile with var name \"far\"\"\n  ([#8345](https://github.com/nim-lang/Nim/issues/8345))\n- Fixed \"Render bug: procs with single if statement get incorrent indentation\"\n  ([#8343](https://github.com/nim-lang/Nim/issues/8343))\n- Fixed \"json.nim macro `to` does not support objects with distinct types\"\n  ([#8037](https://github.com/nim-lang/Nim/issues/8037))\n- Fixed \"macros.hasCustomPragma() crashes when working with variant fields\"\n  ([#8371](https://github.com/nim-lang/Nim/issues/8371))\n- Fixed \"await inside stmtListExpr inside a case stmt crashes compiler\"\n  ([#8399](https://github.com/nim-lang/Nim/issues/8399))\n\n- Fixed \"[os] failed operations (eg existsOrCreateDir) should show runtime context (eg file/dir) it failed for\"\n  ([#8391](https://github.com/nim-lang/Nim/issues/8391))\n\n- Fixed \"[ospaths] ospaths.nim says OSX is FileSystemCaseSensitive:true but should be false ; cmpPaths seems wrong\"\n  ([#8349](https://github.com/nim-lang/Nim/issues/8349))\n- Fixed \"excessiveStackTrace:on shows non-absolute file in stacktrace\"\n  ([#7492](https://github.com/nim-lang/Nim/issues/7492))\n\n- Fixed \"`nim doc foo` generates stuff that should be under a .gitignore'd directory\"\n  ([#8323](https://github.com/nim-lang/Nim/issues/8323))\n- Fixed \"type mismatch shows wrong type for union types T1|T2|T3|T4: only keeps T1 or T2, discards rest\"\n  ([#8434](https://github.com/nim-lang/Nim/issues/8434))\n- Fixed \"devel branch encodings.convert broken on Windows\"\n  ([#8468](https://github.com/nim-lang/Nim/issues/8468))\n- Fixed \"--app:gui gives an error on osx.\"\n  ([#2576](https://github.com/nim-lang/Nim/issues/2576))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"[nimweb] ./koch web -o:/tmp/d13/ => `o` is actually unused and docs output dir hardcoded regardless of o\"\n  ([#8419](https://github.com/nim-lang/Nim/issues/8419))\n- Fixed \"seq/string initialized with `add` or `setLen` being deallocated\"\n  ([#7833](https://github.com/nim-lang/Nim/issues/7833))\n- Fixed \"alloc fails after 4GB\"\n  ([#7894](https://github.com/nim-lang/Nim/issues/7894))\n- Fixed \"[feature request] macros.bindSym can accept computed string\"\n  ([#7827](https://github.com/nim-lang/Nim/issues/7827))\n- Fixed \"tfragment_alloc.nim (which allocates 4GB) often makes appveyor fail with out of memory\"\n  ([#8509](https://github.com/nim-lang/Nim/issues/8509))\n- Fixed \"`echo` not thread safe on windows, causing [appveyor] flaky test: Failure: reOutputsDiffer in tforstmt.nim\"\n  ([#8511](https://github.com/nim-lang/Nim/issues/8511))\n- Fixed \"./koch xz doesn't check for dirty work tree\"\n  ([#7292](https://github.com/nim-lang/Nim/issues/7292))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"bad example in https://nim-lang.org/docs/docgen.html\"\n  ([#8215](https://github.com/nim-lang/Nim/issues/8215))\n- Fixed \"Ability to set a NimNode's lineinfo\"\n  ([#5617](https://github.com/nim-lang/Nim/issues/5617))\n- Fixed \"winlean.nim has wrong definition for moveFileExA\"\n  ([#8421](https://github.com/nim-lang/Nim/issues/8421))\n- Fixed \"shr operator should keep the sign bit on signed types.\"\n  ([#6255](https://github.com/nim-lang/Nim/issues/6255))\n- Fixed \"proposal (with implementation): `undistinct(T)`\"\n  ([#8519](https://github.com/nim-lang/Nim/issues/8519))\n- Fixed \"`.cache/projectname` pollutes `.cache` - put in `.cache/Nim/projectname` instead\"\n  ([#8599](https://github.com/nim-lang/Nim/issues/8599))\n\n- Fixed \"Iterating closure iterator in nested function is empty\"\n  ([#8550](https://github.com/nim-lang/Nim/issues/8550))\n- Fixed \"[TODO] [feature] Nim error messages should show line contents, would save lots of debugging time\"\n  ([#7586](https://github.com/nim-lang/Nim/issues/7586))\n- Fixed \"Converter: {lit} parameter constraint is not respected in implicit conversion\"\n  ([#7520](https://github.com/nim-lang/Nim/issues/7520))\n- Fixed \"`mapIt` still can't be used with `openArray` even after #8543, #8567: fails during bootstrap\"\n  ([#8577](https://github.com/nim-lang/Nim/issues/8577))\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"sequtils.toSeq produces the sequence from the iterator twice if compiles(iter.len) == true\"\n  ([#7187](https://github.com/nim-lang/Nim/issues/7187))\n- Fixed \"`$` for Option[string] types should double-quote the output\"\n  ([#8658](https://github.com/nim-lang/Nim/issues/8658))\n\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"[feature request] compile time check for experimental features\"\n  ([#8644](https://github.com/nim-lang/Nim/issues/8644))\n- Fixed \"Changes in typedesc reforms\"\n  ([#8126](https://github.com/nim-lang/Nim/issues/8126))\n- Fixed \"json.% regression\"\n  ([#8716](https://github.com/nim-lang/Nim/issues/8716))\n- Fixed \"`nim doc2 --project -o:doc/ ` cannot find files in subdirectories\"\n  ([#8218](https://github.com/nim-lang/Nim/issues/8218))\n- Fixed \"`onFailedAssert` does not affect `doAssert`\"\n  ([#8719](https://github.com/nim-lang/Nim/issues/8719))\n\n- Fixed \"[travis] [async] flaky test: tests/async/t7758.nim\"\n  ([#8756](https://github.com/nim-lang/Nim/issues/8756))\n- Fixed \"float literals are treated differently between manual and compiler\"\n  ([#8766](https://github.com/nim-lang/Nim/issues/8766))\n- Fixed \"[cmdline] [minor] `--hint.foo:on` as alias for `--hint[foo]:on`: avoids edge cases with `[` that needs to be escaped on cmd line + other places\"\n  ([#8739](https://github.com/nim-lang/Nim/issues/8739))\n\n- Fixed \"Duplicate member error for union types\"\n  ([#8781](https://github.com/nim-lang/Nim/issues/8781))\n- Fixed \"nim c compiler/nimblecmd.nim fails:  Error: type mismatch: got <StringTableRef, string>\"\n  ([#8776](https://github.com/nim-lang/Nim/issues/8776))\n- Fixed \"Compiler crash with $, converter and generics\"\n  ([#4766](https://github.com/nim-lang/Nim/issues/4766))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"[unidecode] Make `loadUnidecodeTable` use the path to unicode.dat on user's system by default\"\n  ([#8767](https://github.com/nim-lang/Nim/issues/8767))\n- Fixed \"marshal.load() regression?\"\n  ([#7854](https://github.com/nim-lang/Nim/issues/7854))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"Converter applied when it should not be\"\n  ([#8049](https://github.com/nim-lang/Nim/issues/8049))\n- Fixed \"Pure enums allow using the same name but allow nonqualification with quirky behaviour\"\n  ([#8066](https://github.com/nim-lang/Nim/issues/8066))\n\n- Fixed \"Correctly redirect stderr when using osproc's posix_spawn backend\"\n  ([#8624](https://github.com/nim-lang/Nim/issues/8624))\n- Fixed \"`errorStream` doesn't seem to work\"\n  ([#8442](https://github.com/nim-lang/Nim/issues/8442))\n- Fixed \"Nested template: SIGSEGV at compile-time\"\n  ([#8052](https://github.com/nim-lang/Nim/issues/8052))\n- Fixed \"`Error: undeclared identifier: '|'` when using `|` inside a `runnableExamples:`\"\n  ([#8694](https://github.com/nim-lang/Nim/issues/8694))\n- Fixed \"runnableExamples doesn't work at module level\"\n  ([#8641](https://github.com/nim-lang/Nim/issues/8641))\n- Fixed \"[runnableExamples] `Hint: operation successful: runnableExamples` even though operation failed: compile error is ignored\"\n  ([#8831](https://github.com/nim-lang/Nim/issues/8831))\n- Fixed \"`runnableExamples` don't have own scope for imports\"\n  ([#7285](https://github.com/nim-lang/Nim/issues/7285))\n- Fixed \"`nim check` segfaults\"\n  ([#8028](https://github.com/nim-lang/Nim/issues/8028))\n- Fixed \"addQuoted gives unquoted result on cstring (works on string)\"\n  ([#8847](https://github.com/nim-lang/Nim/issues/8847))\n- Fixed \"[nimscript] exception handling broken: `except BaseClass` doesn't work\"\n  ([#8740](https://github.com/nim-lang/Nim/issues/8740))\n- Fixed \"Unary `.` operator can't be parsed\"\n  ([#8797](https://github.com/nim-lang/Nim/issues/8797))\n- Fixed \"system.on_raise works only for \"single level\"\"\n  ([#1652](https://github.com/nim-lang/Nim/issues/1652))\n- Fixed \"Final facelifiting nimrod -> nim\"\n  ([#2032](https://github.com/nim-lang/Nim/issues/2032))\n- Fixed \"marshal: document usage of \"to\"\"\n  ([#3150](https://github.com/nim-lang/Nim/issues/3150))\n- Fixed \"Name conflict between template and proc parameter\"\n  ([#4750](https://github.com/nim-lang/Nim/issues/4750))\n- Fixed \"Operator overloading bug with unittest check macro\"\n  ([#5252](https://github.com/nim-lang/Nim/issues/5252))\n- Fixed \"nim check crash due to typo\"\n  ([#5745](https://github.com/nim-lang/Nim/issues/5745))\n- Fixed \"Regression (?): ICE in transformImportAs\"\n  ([#8852](https://github.com/nim-lang/Nim/issues/8852))\n- Fixed \"generic match error\"\n  ([#1156](https://github.com/nim-lang/Nim/issues/1156))\n- Fixed \"Adding a mention of the `unsafeAddr` operator to the Nim manual\"\n  ([#5038](https://github.com/nim-lang/Nim/issues/5038))\n- Fixed \"`using` types should have higher precedence\"\n  ([#8565](https://github.com/nim-lang/Nim/issues/8565))\n- Fixed \"Add noSignalHandler documentation and examples\"\n  ([#8224](https://github.com/nim-lang/Nim/issues/8224))\n- Fixed \"`-d:identifier` is case insensitive (not partially case insensitive)\"\n  ([#7506](https://github.com/nim-lang/Nim/issues/7506))\n- Fixed \"addQuitProc argument requires {.noconv.} not documented\"\n  ([#5794](https://github.com/nim-lang/Nim/issues/5794))\n- Fixed \"Compilation error does not point to the actual wrong parameter\"\n  ([#8043](https://github.com/nim-lang/Nim/issues/8043))\n- Fixed \"Clean up examples\"\n  ([#7725](https://github.com/nim-lang/Nim/issues/7725))\n- Fixed \"Documentation footer timestamp is not UTC\"\n  ([#7305](https://github.com/nim-lang/Nim/issues/7305))\n- Fixed \"Regression: compiler stack overflow in transformIteratorBody/lowerStmtListExprs\"\n  ([#8851](https://github.com/nim-lang/Nim/issues/8851))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Error: unhandled exception: n.kind == nkStmtListExpr  [AssertionError]\"\n  ([#8243](https://github.com/nim-lang/Nim/issues/8243))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Regression: stack trace line numbers are messed up for asserts\"\n  ([#8928](https://github.com/nim-lang/Nim/issues/8928))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Core dump for RTree module -- regression\"\n  ([#8883](https://github.com/nim-lang/Nim/issues/8883))\n\n- Fixed \"`system.cmp` returns different results for string on different operating systems\"\n  ([#8930](https://github.com/nim-lang/Nim/issues/8930))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Typetraits arity: off-by-one for arrays\"\n  ([#8965](https://github.com/nim-lang/Nim/issues/8965))\n- Fixed \"`strutils.nim(1533, 29) Error: illegal conversion from '-1' to '[0..9223372036854775807]'` with strutils.replace on empty string at CT\"\n  ([#8911](https://github.com/nim-lang/Nim/issues/8911))\n- Fixed \"Iterators in combination with closures misbehave\"\n  ([#3837](https://github.com/nim-lang/Nim/issues/3837))\n- Fixed \"procCall is not documented\"\n  ([#4329](https://github.com/nim-lang/Nim/issues/4329))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n- Fixed \"Add exports section to documentation generator\"\n  ([#1616](https://github.com/nim-lang/Nim/issues/1616))\n- Fixed \"Improve error message for redefinitions\"\n  ([#447](https://github.com/nim-lang/Nim/issues/447))\n- Fixed \"[minor] operator symbols in anchor text disappear, causing anchor clashes\"\n  ([#7500](https://github.com/nim-lang/Nim/issues/7500))\n\n- Fixed \"Incorrect executable name of the C compiler when performing crosscompilation\"\n  ([#8081](https://github.com/nim-lang/Nim/issues/8081))\n- Fixed \"[ICE/regression] when proc with var return type interacting with method\"\n  ([#9076](https://github.com/nim-lang/Nim/issues/9076))", "tags": ["nim", "python"], "published_at": "", "id": 50}, {"title": "Hacktoberfest with Nim", "slug": "hacktoberfest-with-nim", "content": "[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is an annual event happening in October which celebrates open source software and encourages meaningful contributions to the open source ecosystem.To win a T-shirt, you must sign up on the [Hacktoberfest site](https://hacktoberfest.digitalocean.com/) and make five pull requests to any repo on Github by the end of October.Even if you don't manage to make five pull requests, you win Hacktoberfest stickers.Nim would like to encourage you to participate in Hacktoberfest by contributing to the [Nim repo](https://github.com/nim-lang/nim) or any other Nim-related repos.# How can you help?* bug-fixing* improving documentation* writing a library## Bug fixing[Nim repo](https://github.com/nim-lang/nim) has more than 1400 open issues, which might be overwhelming to start.Here are some categories you might find interesting:* Why don't you start with some of [easy issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AEasy)?* You can help with [cleanup](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ACleanup).* You don't want to write code? Plenty of issues involve [documentation](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ADocumentation).* Everybody uses stdlib. How about fixing one of the more than 200 issues in the [stdlib](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AStdlib)?* You want to earn some money while fixing bugs? Here are the issues with a [bounty](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3Abounty).* What are our priorities? Take a look at [high priority issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3A\"High+Priority\").## Improving documentationPoor documentation is often mentioned when people discuss Nim.Let's make it better together!Based on [this research](https://gist.github.com/GULPF/6d49e74af9992f8fc65476a9264488a0), the most used modules are: strutils, os, tables, math, sequtils, macros, times, unittest and json -- improving these would be beneficial to most people, but feel free to choose any other Nim module.For example, in the [tables module](https://nim-lang.org/docs/tables.html) what is missing is:* a general example which shows a usage of `OrderedTable` and `CountTable`,* for each procedure, a short example which shows the results of applying it.**How to go about improving these?**Open the [source file for tables module](https://github.com/nim-lang/Nim/blob/master/lib/pure/collections/tables.nim) and you'll see that the general documentation is at the top of the file, and to make an example, put it inside of a `runnableExamples` block like this, which will make sure the code snippet stays valid:```proc addBar*(a: string): string =  ## Adds \"Bar\" to ``a``.  runnableExamples:    doAssert \"baz\".addBar == \"bazBar\"      result = a & \"Bar\"```For embedded code block documentation you can also use `.. code-block::`:```proc foo*() =  ## Beginning of comment.  ##  ## .. code-block::  ##    :test:  ##    foo()  ##  ## Rest of comment.  raise newException(Exception, \"boo!\")```The best examples are self-contained and specific. This means they show how to do one thing. You should use headings to make them as easy to understand as possible, for example:```## Initialising an empty table## ---------------------------#### An empty table can be created on the stack or on the heap.#### Stack allocated table## ~~~~~~~~~~~~~~~~~~~~~#### .. code-block:: nim##    :test:##   import tables##   var phonebook = initTable[string, string]()#### Heap allocated table## ~~~~~~~~~~~~~~~~~~~~~#### .. code-block:: nim##    :test:##   import tables##   var phonebook = newTable[string, string]()```If your example is more than 5 lines of code, then it's likely too long. Consider separating it into multiple examples.Nim's documentation generator uses reStructuredText, take a look at some references if you want to get more familiar with it.## Writing a libraryThere is a [list of needed libraries](https://github.com/nim-lang/needed-libraries/issues), can you help us shorten it?Once you have written a library, you can send a PR to [nimble package repo](https://github.com/nim-lang/nimble) to include your package in the official list of packages!If writing a library seems like a too demanding task, you can help improve [one of the existing Nim packages](https://nimble.directory/) by adding a feature, fixing a bug, or writing more informative documentation.# I want to help, but I've run into some problemIf you need any help, the Nim community is very welcoming.Ask a question in [Nim's IRC Channel on Freenode](irc://freenode.net/nim), [Nim's room on Gitter](https://gitter.im/nim-lang/Nim) or the [Nim Telegram group](https://t.me/nim_lang) and somebody will help you. Other communication channels can be found on our [community page](https://nim-lang.org/community.html).Happy coding!", "content_with_meta": "---\ntitle: Hacktoberfest with Nim\nauthor: The Nim Team\ntags: nim, python\n---\n\n[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is an annual event happening in October which celebrates open source software and encourages meaningful contributions to the open source ecosystem.\n\nTo win a T-shirt, you must sign up on the [Hacktoberfest site](https://hacktoberfest.digitalocean.com/) and make five pull requests to any repo on Github by the end of October.\nEven if you don't manage to make five pull requests, you win Hacktoberfest stickers.\n\nNim would like to encourage you to participate in Hacktoberfest by contributing to the [Nim repo](https://github.com/nim-lang/nim) or any other Nim-related repos.\n\n\n\n# How can you help?\n\n* bug-fixing\n* improving documentation\n* writing a library\n\n\n\n## Bug fixing\n\n[Nim repo](https://github.com/nim-lang/nim) has more than 1400 open issues, which might be overwhelming to start.\nHere are some categories you might find interesting:\n\n* Why don't you start with some of [easy issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AEasy)?\n* You can help with [cleanup](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ACleanup).\n* You don't want to write code? Plenty of issues involve [documentation](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ADocumentation).\n* Everybody uses stdlib. How about fixing one of the more than 200 issues in the [stdlib](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AStdlib)?\n* You want to earn some money while fixing bugs? Here are the issues with a [bounty](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3Abounty).\n* What are our priorities? Take a look at [high priority issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3A\"High+Priority\").\n\n\n\n## Improving documentation\n\nPoor documentation is often mentioned when people discuss Nim.\nLet's make it better together!\n\nBased on [this research](https://gist.github.com/GULPF/6d49e74af9992f8fc65476a9264488a0), the most used modules are: strutils, os, tables, math, sequtils, macros, times, unittest and json -- improving these would be beneficial to most people, but feel free to choose any other Nim module.\n\nFor example, in the [tables module](https://nim-lang.org/docs/tables.html) what is missing is:\n* a general example which shows a usage of `OrderedTable` and `CountTable`,\n* for each procedure, a short example which shows the results of applying it.\n\n**How to go about improving these?**\n\nOpen the [source file for tables module](https://github.com/nim-lang/Nim/blob/master/lib/pure/collections/tables.nim) and you'll see that the general documentation is at the top of the file, and to make an example, put it inside of a `runnableExamples` block like this, which will make sure the code snippet stays valid:\n\n```\nproc addBar*(a: string): string =\n  ## Adds \"Bar\" to ``a``.\n  runnableExamples:\n    doAssert \"baz\".addBar == \"bazBar\"\n   \n   result = a & \"Bar\"\n```\n\nFor embedded code block documentation you can also use `.. code-block::`:\n```\nproc foo*() =\n  ## Beginning of comment.\n  ##\n  ## .. code-block::\n  ##    :test:\n  ##    foo()\n  ##\n  ## Rest of comment.\n  raise newException(Exception, \"boo!\")\n```\nThe best examples are self-contained and specific. This means they show how to do one thing. You should use headings to make them as easy to understand as possible, for example:\n\n```\n## Initialising an empty table\n## ---------------------------\n##\n## An empty table can be created on the stack or on the heap.\n##\n## Stack allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = initTable[string, string]()\n##\n## Heap allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = newTable[string, string]()\n```\n\nIf your example is more than 5 lines of code, then it's likely too long. Consider separating it into multiple examples.\n\nNim's documentation generator uses reStructuredText, take a look at some references if you want to get more familiar with it.\n\n## Writing a library\n\nThere is a [list of needed libraries](https://github.com/nim-lang/needed-libraries/issues), can you help us shorten it?\n\nOnce you have written a library, you can send a PR to [nimble package repo](https://github.com/nim-lang/nimble) to include your package in the official list of packages!\n\nIf writing a library seems like a too demanding task, you can help improve [one of the existing Nim packages](https://nimble.directory/) by adding a feature, fixing a bug, or writing more informative documentation.\n\n\n\n# I want to help, but I've run into some problem\n\nIf you need any help, the Nim community is very welcoming.\nAsk a question in [Nim's IRC Channel on Freenode](irc://freenode.net/nim), [Nim's room on Gitter](https://gitter.im/nim-lang/Nim) or the [Nim Telegram group](https://t.me/nim_lang) and somebody will help you. Other communication channels can be found on our [community page](https://nim-lang.org/community.html).\n\nHappy coding!\n", "tags": ["nim", "python"], "published_at": "", "id": 51}, {"title": "Welcome our new team member, Arne Döring!", "slug": "hired-krux02", "content": "Arne has been programming in Nim for quite some time now and has also contributedvaluable patches before, especially regarding Nim's macro system. Now that hehas completed his master thesis about how to leverage Nim's macro system to generateshader programs for graphical applications, he is ready to take the full diveinto Nim's core, the compiler and its libraries.Interestingly he wrote all the code for his master thesis in Nim and argued indetail that C++ would have been unfeasible. Shader programs are separate fromordinary native code and this means usually you are programming in a mixedlanguage environment with all its known downsides like the difficulty todebug, the violations of DRY and the mental overhead of having to switch betweentwo different programming languages.Nim allows you to tackle these problems via its powerful macro system. Arnedeveloped a Nim to GLSL compiler entirely with macros. A subset of Nim istranslated to GLSL code but his compiler also produces automatic interfacingcode between the \"native Nim world\" and the \"Nim shader world\". This interfacingcode usually has to be written manually and is an error prone, type unsafe task.Nim allowed Arne to automate this critical step in realtime graphics programming,we let the results speak for themselves:<iframe width=\"752\" height=\"424\" src=\"https://www.youtube.com/embed/_Hiamk2O3aM?start=192\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>All of these demos were created with a fraction of the code that a solution inC/C++ or most other common programming languages would require, the Nim codeis small, easy to read and type safe.Arne's mission is not only core Nim development but also involves improvingthe tooling around Nim, especially Nim's debugging support. He started withgiving Nim a frequently requested feature; `sizeof` can now be evaluated atcompiletime by the Nim compiler, previously this expression was delegated tothe C compiler. As a nice bonus, Arne also added `alignof` and `offsetof`builtins.[We are still hiring.](https://nim-lang.org/blog/2018/09/11/nim-is-hiring.html)", "content_with_meta": "---\ntitle: \"Welcome our new team member, Arne Döring!\"\nauthor: Nim Team\nexcerpt: \"We are glad that Arne Döring joined us as a fulltime core Nim developer.\"\ntags: nim, python, markdown\n---\n\nArne has been programming in Nim for quite some time now and has also contributed\nvaluable patches before, especially regarding Nim's macro system. Now that he\nhas completed his master thesis about how to leverage Nim's macro system to generate\nshader programs for graphical applications, he is ready to take the full dive\ninto Nim's core, the compiler and its libraries.\n\nInterestingly he wrote all the code for his master thesis in Nim and argued in\ndetail that C++ would have been unfeasible. Shader programs are separate from\nordinary native code and this means usually you are programming in a mixed\nlanguage environment with all its known downsides like the difficulty to\ndebug, the violations of DRY and the mental overhead of having to switch between\ntwo different programming languages.\n\nNim allows you to tackle these problems via its powerful macro system. Arne\ndeveloped a Nim to GLSL compiler entirely with macros. A subset of Nim is\ntranslated to GLSL code but his compiler also produces automatic interfacing\ncode between the \"native Nim world\" and the \"Nim shader world\". This interfacing\ncode usually has to be written manually and is an error prone, type unsafe task.\nNim allowed Arne to automate this critical step in realtime graphics programming,\nwe let the results speak for themselves:\n\n<iframe width=\"752\" height=\"424\" src=\"https://www.youtube.com/embed/_Hiamk2O3aM?start=192\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nAll of these demos were created with a fraction of the code that a solution in\nC/C++ or most other common programming languages would require, the Nim code\nis small, easy to read and type safe.\n\nArne's mission is not only core Nim development but also involves improving\nthe tooling around Nim, especially Nim's debugging support. He started with\ngiving Nim a frequently requested feature; `sizeof` can now be evaluated at\ncompiletime by the Nim compiler, previously this expression was delegated to\nthe C compiler. As a nice bonus, Arne also added `alignof` and `offsetof`\nbuiltins.\n\n[We are still hiring.](https://nim-lang.org/blog/2018/09/11/nim-is-hiring.html)\n", "tags": ["nim", "python", "markdown"], "published_at": "", "id": 52}, {"title": "Nim Community Survey 2018 Results", "slug": "community-survey-results-2018", "content": "We have recently closed the 2018 Nim Community Survey. I am happy tosay that we have received exactly 771 responses, huge thanks to all the peoplethat took the time to respond. We're incredibly thankful for this very valuablefeedback.For the results of the previous year's survey, take a look at the[2017 results analysis](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html).Our survey ran from the 23rd of June 2018 until the 31st of July 2018.The goal of this survey was primarily to determine how our community is usingNim, in order to better understand how we should be improving it. In particular,we wanted to know what people feel is missing from Nim in the lead up toversion 1.0. We have also asked our respondents about how well the Nim toolsworked, the challenges of adopting Nim, the resources that they used to learnNim and more.This article goes through some of the highlights in the results for the surveyand discusses them in the context of the previous year's results. The aim is tounderstand our users and to figure out priorities for Nim's future.This time around I have decided to publish the Google Survey resultspage, for some this may be more interesting than reading the highlights.It's available here: [https://i.imgur.com/g7slQ8w.png](https://i.imgur.com/g7slQ8w.png).# Changes since the last surveyThe questions in this survey were largely the same as last year's,but there were some key changes. In particular, the following questions wereadded:* How do you learn about the new functionality added to Nim?* Should Nim 1.0 have been released already?The following questions were removed:* Which direction should Nim’s GC/memory management take?* What domain do you work in currently?* What domain do you use Nim in?The following questions were modified:* \"How did you install Nim?\" was changed to \"How did you most recently install Nim?\"* What improvements are needed before Nim v1.0 can be released?  * This question was streamlined into a single long form question.The \"What critical libraries are missing in the Nim ecosystem?\" and\"What development tools, if any, can make you more productive when working with Nim?\"questions were merged into\"What features, tools, or libraries would you like Nim to have?\"We wanted to gain deeper knowledge of our contributor's experiences, soa brand new section titled \"Contributor questions\" was introduced.# Do you use Nim?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/></a>Like last year the respondents were split up into three groups:* Current users of Nim* Ex-Nim users* Those that never used NimThis enabled each group to be targeted with specific questions.For example, ex-Nim users were asked why they've stopped using Nim.This year the proportion of responses from current Nim users has grownfrom 43% to 47%. This is a slight increase in the proportion of Nim usersanswering the survey, but it's important to note that the absolute numberwent up by over 100 users from last year.# How could we help make Nim more accepted at your company?This was a free-form question so there were many different answers, but a fewanswers were very common. By far the most common request was \"version 1.0.\"Other honourable mentions include \"more documentation\", \"more stability\" and\"Free balloons\". These mostly align well with the general wishes of ourcommunity so you will see similar answers in later questions as well.# What editor(s) do you use when writing Nim?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/></a>Visual Studio Code continues its dominance and has become even more dominantsince the last survey. 51% of respondents selected Visual Studio Code, whereasonly 35.5% selected it last year.# What is your experience with the following tools?This questions gives a good idea about how popular Nim tools are and whetherusing them is enjoyable.The most popular tool, as one might expect, is Nimble. The Nimble packagemanager also boasts a high like rating, with over 75% of respondents answeringeither \"Like\" or \"Extreme Like\" for Nimble.The most unpopular tool is nimpretty, with 75% of respondents answering thatthey haven't used it.The most disliked tool is nimsuggest, although it is only disliked by 6% of therespondents.# How did you most recently install Nim?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\" alt=\"How did you most recently install Nim?\" style=\"width:60%\"/></a>Choosenim takes the crown as the most popular installation method, but only justbarely. Other installation methods are also very popular.# Top reasons why programmers stopped using NimThe reasons given vary widely which makes their analysis challenging. In orderto make it easier to see the reasons at a high level, I went through and groupedthem into generic categories.<a href=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\" alt=\"Why did you stop using Nim?\" style=\"width:80%\"/></a>This offers some good insight into why programmers have stopped using Nim.The number one reason is Nim's relative lack of maturity, manyrespondents have quoted this as thereason why they have stopped using Nim. In most cases the respondents simplywant 1.0 to be released. Together with maturity, multiple respondents alsomentioned a general lack of libraries and Nim's small ecosystem. These respondentswere all counted under the \"Maturity\" category.The \"Missing library\" category mostly counts respondents whomentioned a specific library that was missing. This category couldhave easily been merged into the \"Maturity\" category but wasn't for greater detail.The second reason, categorised as \"Not sufficiently better than other languages\",was mostly the respondent specifying that they are happy with another language,or that their project is more suited to another language.Stability was the third reason. For this category, the respondents mostlytalked about the stability of Nim as a whole. In many cases this meant toolssuch as IDEs not working properly rather than the compiler being buggy, althoughthe latter was prevalent as well.# Top reasons why programmers are not using NimThis is similar to the previous section, but it focuses on respondents whodo not use Nim. As previously these vary widely so they have been put intocategories.<a href=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\" alt=\"Why aren't you using Nim?\" style=\"width:80%\"/></a>Note that this is based on the long-form question which was asked inaddition to the multiple choice question.It seems that the number one reason why respondents are not using Nim isbecause they do not see the value in it. Many of the respondents didn't seea reason why learning Nim was worthwhile. This is reflected in the number 1category: \"Not sufficiently better than other languages\".Lack of time is of course a big factor too and in many cases it ties inwith respondents not seeing value in learning Nim.Nim's relative immaturity was another strong theme among the responses.An interesting number of respondents specified that they simply didn't havea project, or couldn't come up with a project to write in Nim. It may be worthexposing newcomers to some project ideas to alleviate this.# Do you feel well informed in the direction that the Nim project is heading?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\" alt=\"Do you feel well informed in the direction that the Nim project is heading?\" style=\"width:60%\"/></a>This question was asked last year to gauge how well we are informing usersabout where the Nim project is heading. In comparison to last year, theproportion of respondents answering \"Yes\" has increased to 25.8% from 23.5%.This is positive but we should do better, while it is an increase it isrelatively minor. We should look into further ways to inform our community ofour roadmap and other plans for the future.# Should Nim 1.0 have been released already?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\" alt=\"Should Nim 1.0 have been released already?\" style=\"width:60%\"/></a>This is a new question, it's aim is to gauge the feeling in the community aroundwhether a stable 1.0 release of Nim should have been made already.Right now, the results are fairly even and thus it's hard to know what to takeaway from them.# What improvements are needed before Nim v1.0 can be released?<a href=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\">  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\" alt=\"What improvements are needed before Nim v1.0 can be released??\" style=\"width:80%\"/></a>The chart above shows the general trends of what respondents felt was neededfor Nim v1.0 to be released.It was surprising to see so many respondents mentioning destructors, itseems that many people are excited about this feature and want it to beincluded in v1.0 of Nim.The top three improvements though were, in order, \"Better Docs\", \"Stabilization\"and finally \"Better Stdlib\".For the first one, respondents generally asked formore polished documentation but a significant portion of them also asked forvideo tutorials. Many felt that video tutorials were a good way to learn aprogramming language, we have already[created some live streams](https://nim-lang.org/blog/2017/12/28/nim-in-2017-a-short-recap.html#nim-livestreams)where we codedNim projects but it is obvious that we need to do more. In particular,we should:* Create more video tutorial material* Ensure that our video tutorials are accessible to all and easy to find* Improve the general written documentation, both in its presentation but also  in the amount of content availableFor the second one, respondents generally asked for a more reliable experiencewith all language features. A reduction of compiler crashes and surprisingbehaviour was among the top wishes.Finally for the \"Better Stdlib\" responses, many of them asked for a cleanupof the standard library. In particular the removal of deprecated functions butalso the migration of some modules to a separate repository available viathe Nimble package manager.## Last wordsThank you to each and every one of you who took the time to answer this survey.Your time is precious and we are deeply thankful that you used it to share yourfeedback.Please remember that you do not need to wait for a survey in order to give usfeedback, of course you're more than welcome to wait if you wish, but ideallyshare your feedback with us immediately. We can be found in various differentplaces, see the community page for links and instructions on how to get in touch:https://nim-lang.org/community.html.If there are any questions about this survey I'm more than happy to answer them.Feel free to reach out to me on the community channels linked above.Thanks for reading, and have a good day!", "content_with_meta": "---\ntitle: \"Nim Community Survey 2018 Results\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe have recently closed the 2018 Nim Community Survey. I am happy to\nsay that we have received exactly 771 responses, huge thanks to all the people\nthat took the time to respond. We're incredibly thankful for this very valuable\nfeedback.\n\nFor the results of the previous year's survey, take a look at the\n[2017 results analysis](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html).\n\nOur survey ran from the 23rd of June 2018 until the 31st of July 2018.\nThe goal of this survey was primarily to determine how our community is using\nNim, in order to better understand how we should be improving it. In particular,\nwe wanted to know what people feel is missing from Nim in the lead up to\nversion 1.0. We have also asked our respondents about how well the Nim tools\nworked, the challenges of adopting Nim, the resources that they used to learn\nNim and more.\n\nThis article goes through some of the highlights in the results for the survey\nand discusses them in the context of the previous year's results. The aim is to\nunderstand our users and to figure out priorities for Nim's future.\n\nThis time around I have decided to publish the Google Survey results\npage, for some this may be more interesting than reading the highlights.\nIt's available here: [https://i.imgur.com/g7slQ8w.png](https://i.imgur.com/g7slQ8w.png).\n\n# Changes since the last survey\n\nThe questions in this survey were largely the same as last year's,\nbut there were some key changes. In particular, the following questions were\nadded:\n\n* How do you learn about the new functionality added to Nim?\n* Should Nim 1.0 have been released already?\n\nThe following questions were removed:\n\n* Which direction should Nim’s GC/memory management take?\n* What domain do you work in currently?\n* What domain do you use Nim in?\n\nThe following questions were modified:\n\n* \"How did you install Nim?\" was changed to \"How did you most recently install Nim?\"\n* What improvements are needed before Nim v1.0 can be released?\n  * This question was streamlined into a single long form question.\n\nThe \"What critical libraries are missing in the Nim ecosystem?\" and\n\"What development tools, if any, can make you more productive when working with Nim?\"\nquestions were merged into\n\"What features, tools, or libraries would you like Nim to have?\"\n\nWe wanted to gain deeper knowledge of our contributor's experiences, so\na brand new section titled \"Contributor questions\" was introduced.\n\n# Do you use Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>\n</a>\n\nLike last year the respondents were split up into three groups:\n\n* Current users of Nim\n* Ex-Nim users\n* Those that never used Nim\n\nThis enabled each group to be targeted with specific questions.\nFor example, ex-Nim users were asked why they've stopped using Nim.\n\nThis year the proportion of responses from current Nim users has grown\nfrom 43% to 47%. This is a slight increase in the proportion of Nim users\nanswering the survey, but it's important to note that the absolute number\nwent up by over 100 users from last year.\n\n# How could we help make Nim more accepted at your company?\n\nThis was a free-form question so there were many different answers, but a few\nanswers were very common. By far the most common request was \"version 1.0.\"\n\nOther honourable mentions include \"more documentation\", \"more stability\" and\n\"Free balloons\". These mostly align well with the general wishes of our\ncommunity so you will see similar answers in later questions as well.\n\n# What editor(s) do you use when writing Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/>\n</a>\n\nVisual Studio Code continues its dominance and has become even more dominant\nsince the last survey. 51% of respondents selected Visual Studio Code, whereas\nonly 35.5% selected it last year.\n\n# What is your experience with the following tools?\n\nThis questions gives a good idea about how popular Nim tools are and whether\nusing them is enjoyable.\n\nThe most popular tool, as one might expect, is Nimble. The Nimble package\nmanager also boasts a high like rating, with over 75% of respondents answering\neither \"Like\" or \"Extreme Like\" for Nimble.\n\nThe most unpopular tool is nimpretty, with 75% of respondents answering that\nthey haven't used it.\n\nThe most disliked tool is nimsuggest, although it is only disliked by 6% of the\nrespondents.\n\n# How did you most recently install Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\" alt=\"How did you most recently install Nim?\" style=\"width:60%\"/>\n</a>\n\nChoosenim takes the crown as the most popular installation method, but only just\nbarely. Other installation methods are also very popular.\n\n# Top reasons why programmers stopped using Nim\n\nThe reasons given vary widely which makes their analysis challenging. In order\nto make it easier to see the reasons at a high level, I went through and grouped\nthem into generic categories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\" alt=\"Why did you stop using Nim?\" style=\"width:80%\"/>\n</a>\n\nThis offers some good insight into why programmers have stopped using Nim.\n\nThe number one reason is Nim's relative lack of maturity, many\nrespondents have quoted this as the\nreason why they have stopped using Nim. In most cases the respondents simply\nwant 1.0 to be released. Together with maturity, multiple respondents also\nmentioned a general lack of libraries and Nim's small ecosystem. These respondents\nwere all counted under the \"Maturity\" category.\nThe \"Missing library\" category mostly counts respondents who\nmentioned a specific library that was missing. This category could\nhave easily been merged into the \"Maturity\" category but wasn't for greater detail.\n\nThe second reason, categorised as \"Not sufficiently better than other languages\",\nwas mostly the respondent specifying that they are happy with another language,\nor that their project is more suited to another language.\n\nStability was the third reason. For this category, the respondents mostly\ntalked about the stability of Nim as a whole. In many cases this meant tools\nsuch as IDEs not working properly rather than the compiler being buggy, although\nthe latter was prevalent as well.\n\n# Top reasons why programmers are not using Nim\n\nThis is similar to the previous section, but it focuses on respondents who\ndo not use Nim. As previously these vary widely so they have been put into\ncategories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\" alt=\"Why aren't you using Nim?\" style=\"width:80%\"/>\n</a>\n\nNote that this is based on the long-form question which was asked in\naddition to the multiple choice question.\n\nIt seems that the number one reason why respondents are not using Nim is\nbecause they do not see the value in it. Many of the respondents didn't see\na reason why learning Nim was worthwhile. This is reflected in the number 1\ncategory: \"Not sufficiently better than other languages\".\n\nLack of time is of course a big factor too and in many cases it ties in\nwith respondents not seeing value in learning Nim.\n\nNim's relative immaturity was another strong theme among the responses.\n\nAn interesting number of respondents specified that they simply didn't have\na project, or couldn't come up with a project to write in Nim. It may be worth\nexposing newcomers to some project ideas to alleviate this.\n\n# Do you feel well informed in the direction that the Nim project is heading?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\" alt=\"Do you feel well informed in the direction that the Nim project is heading?\" style=\"width:60%\"/>\n</a>\n\nThis question was asked last year to gauge how well we are informing users\nabout where the Nim project is heading. In comparison to last year, the\nproportion of respondents answering \"Yes\" has increased to 25.8% from 23.5%.\nThis is positive but we should do better, while it is an increase it is\nrelatively minor. We should look into further ways to inform our community of\nour roadmap and other plans for the future.\n\n# Should Nim 1.0 have been released already?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\" alt=\"Should Nim 1.0 have been released already?\" style=\"width:60%\"/>\n</a>\n\nThis is a new question, it's aim is to gauge the feeling in the community around\nwhether a stable 1.0 release of Nim should have been made already.\n\nRight now, the results are fairly even and thus it's hard to know what to take\naway from them.\n\n# What improvements are needed before Nim v1.0 can be released?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\" alt=\"What improvements are needed before Nim v1.0 can be released??\" style=\"width:80%\"/>\n</a>\n\nThe chart above shows the general trends of what respondents felt was needed\nfor Nim v1.0 to be released.\n\nIt was surprising to see so many respondents mentioning destructors, it\nseems that many people are excited about this feature and want it to be\nincluded in v1.0 of Nim.\n\nThe top three improvements though were, in order, \"Better Docs\", \"Stabilization\"\nand finally \"Better Stdlib\".\n\nFor the first one, respondents generally asked for\nmore polished documentation but a significant portion of them also asked for\nvideo tutorials. Many felt that video tutorials were a good way to learn a\nprogramming language, we have already\n[created some live streams](https://nim-lang.org/blog/2017/12/28/nim-in-2017-a-short-recap.html#nim-livestreams)\nwhere we coded\nNim projects but it is obvious that we need to do more. In particular,\nwe should:\n\n* Create more video tutorial material\n* Ensure that our video tutorials are accessible to all and easy to find\n* Improve the general written documentation, both in its presentation but also\n  in the amount of content available\n\nFor the second one, respondents generally asked for a more reliable experience\nwith all language features. A reduction of compiler crashes and surprising\nbehaviour was among the top wishes.\n\nFinally for the \"Better Stdlib\" responses, many of them asked for a cleanup\nof the standard library. In particular the removal of deprecated functions but\nalso the migration of some modules to a separate repository available via\nthe Nimble package manager.\n\n## Last words\n\nThank you to each and every one of you who took the time to answer this survey.\nYour time is precious and we are deeply thankful that you used it to share your\nfeedback.\n\nPlease remember that you do not need to wait for a survey in order to give us\nfeedback, of course you're more than welcome to wait if you wish, but ideally\nshare your feedback with us immediately. We can be found in various different\nplaces, see the community page for links and instructions on how to get in touch:\nhttps://nim-lang.org/community.html.\n\nIf there are any questions about this survey I'm more than happy to answer them.\nFeel free to reach out to me on the community channels linked above.\n\nThanks for reading, and have a good day!\n", "tags": ["nim", "python"], "published_at": "", "id": 53}, {"title": "Advent of Nim", "slug": "advent-of-nim", "content": "Saturday December 1st at 5 a.m. UTC will mark the start of the fourth incarnation of [Advent of Code](https://adventofcode.com/), popular programming contest started back in 2015.The author describes Advent of Code (AoC) as \"*a series of small programming puzzles for a variety of skill sets and skill levels in any programming language you like*\".The rules of AoC are quite simple.Starting from December 1st until Christmas, every day at 5 a.m. UTC a new task is released.The tasks consist of two parts, where second part is revealed after you solve the first part, and it is a continuation and/or variation of the first part.You don't submit your code, just the result of your calculation.The participation in AoC is free (although, if you like it, consider [donating](https://adventofcode.com/2018/support)), all you need to do is log in with your Github, Google, Twitter, or Reddit account.## Nim leaderboardWe are organizing the official Nim [private leaderboard](https://adventofcode.com/2018/leaderboard/private), where you can compete against other Nim users.To join the Nim leaderboard, all you have to do is use `40415-c732e66e` code in the previous link.The Nim team has decided to reward the best (fastest) player on Nim leaderboard, as well as the solutions which best showcase the power and capabilities of Nim language.Post a link to your AoC repository in [this forum thread](https://forum.nim-lang.org/t/4416) and share the solutions you're most proud of, and maybe you'll be one of the winners of [\"Nim in Action\"](https://book.picheta.me/) book, Nim [T-shirt](https://vangogh.teespring.com/v3/image/RBPbLAWhGKK_o7nwZHp6gYTN1d8/480/560.jpg), or stickers.People usually share their solutions on [r/adventofcode subreddit](https://old.reddit.com/r/adventofcode/) and we encourage you to share your Nim solutions there too.If you have never participated in AoC before or you want to prepare yourself for the start of the competition by solving some tasks, take a look at [the previous events](https://adventofcode.com/2018/events).", "content_with_meta": "---\ntitle: Advent of Nim\nauthor: The Nim Team\ntags: nim, python, markdown\n---\n\nSaturday December 1st at 5 a.m. UTC will mark the start of the fourth incarnation of [Advent of Code](https://adventofcode.com/), popular programming contest started back in 2015.\nThe author describes Advent of Code (AoC) as \"*a series of small programming puzzles for a variety of skill sets and skill levels in any programming language you like*\".\n\nThe rules of AoC are quite simple.\nStarting from December 1st until Christmas, every day at 5 a.m. UTC a new task is released.\nThe tasks consist of two parts, where second part is revealed after you solve the first part, and it is a continuation and/or variation of the first part.\nYou don't submit your code, just the result of your calculation.\n\nThe participation in AoC is free (although, if you like it, consider [donating](https://adventofcode.com/2018/support)), all you need to do is log in with your Github, Google, Twitter, or Reddit account.\n\n\n\n## Nim leaderboard\n\nWe are organizing the official Nim [private leaderboard](https://adventofcode.com/2018/leaderboard/private), where you can compete against other Nim users.\nTo join the Nim leaderboard, all you have to do is use `40415-c732e66e` code in the previous link.\n\nThe Nim team has decided to reward the best (fastest) player on Nim leaderboard, as well as the solutions which best showcase the power and capabilities of Nim language.\nPost a link to your AoC repository in [this forum thread](https://forum.nim-lang.org/t/4416) and share the solutions you're most proud of, and maybe you'll be one of the winners of [\"Nim in Action\"](https://book.picheta.me/) book, Nim [T-shirt](https://vangogh.teespring.com/v3/image/RBPbLAWhGKK_o7nwZHp6gYTN1d8/480/560.jpg), or stickers.\n\nPeople usually share their solutions on [r/adventofcode subreddit](https://old.reddit.com/r/adventofcode/) and we encourage you to share your Nim solutions there too.\n\nIf you have never participated in AoC before or you want to prepare yourself for the start of the competition by solving some tasks, take a look at [the previous events](https://adventofcode.com/2018/events).\n", "tags": ["nim", "python", "markdown"], "published_at": "", "id": 54}, {"title": "Nim: The good, the OK, and the hard", "slug": "nim-good-ok-hard", "content": "## BackgroundI'm a software engineer at [ThreeFoldTech](https://threefold.io) and the author of [Nim Days](https://xmonader.github.io/nimdays)One of the projects we develop at ThreeFoldTech is [Zero-OS](https://github.com/threefoldtech/0-core) a stateless Linux operating system designed for clustered deployments to host virtual machines and containerized applications.We wanted to have a CLI (like docker) to manage the containers and communicate with zero-os instead of using Python client.## Application requirements- single binary- zos should be like docker for dockerd- commands to interact with zero-os (via redis)- subcommands to interact with containers on zero-os- documentation (soft documentation, hard documentation)- tabular output for humans (listing containers and such) - support json output when needed too (for further manipulation by tools like jq)Sounds simple enough. Any language would do just fine## Choosing NimFrom [Nim](https://nim-lang.org) website> Nim is a systems and applications programming language. Statically typed and compiled, it provides unparalleled performance in an elegant package.- High-performance garbage-collected language- Compiles to C, C++ or JavaScript- Produces dependency-free binaries- Runs on Windows, macOS, Linux, and moreIn the upcoming sections, I'll talk about the good, the okay, and the hard points I faced while developing this simple CLI application with the requirements above.## The good### Static typingNim eliminates a whole class of errors by being statically typed### Expressiveness Nim is like python (whitespace sensitive language) and there's even a guide on the official repo [Nim for Python programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers). Seeing some of Pascal concepts in Nim gets me very nostalgic too.{% highlight nim %}import strutils, strformat, os, ospaths, osproc, tables, parsecfg, json, marshal, loggingimport net, asyncdispatch, asyncnet, streams, threadpool, uriimport loggingimport algorithmimport base64import redisclient, redisparserimport asciitablesimport docoptproc checkContainerExists*(this:App, containerid:int): bool=  ## checks if container `containerid` exists or not  try:    discard this.containerInfo(containerid)    result = true  except:    result = false{% endhighlight %}I find UFCS (Uniform Function Call Syntax) really great too [excellent nim basics](https://narimiran.github.io/nim-basics/){% highlight nim %}proc plus(x, y: int): int =  # <1>  return x + yproc multi(x, y: int): int =  return x * ylet  a = 2  b = 3  c = 4echo a.plus(b) == plus(a, b)echo c.multi(a) == multi(c, a)echo a.plus(b).multi(c)  # <2>echo c.multi(b).plus(a)  # <3>{% endhighlight %}Also case insensitivity `toUpper` `toupper` `to_upper` is pretty neat> I don't use the same identifier with different cases in the same scope {% highlight nim %}type ContainerInfo* = object of RootObj  id*: string  cpu*: float  root*: string  hostname*: string  name*: string  storage*: string  pid*: int  ports*: string{% endhighlight %}I like the way of defining types, enums and access control `*` means public.### Developing sync, async in the same interface> Pragmas are Nim's method to give the compiler additional information/commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special {. and .} curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.I'm a fan of `multisync` pragma because it allows you to define procs for async, sync code easily{% highlight nim %}proc readMany(this:Redis|AsyncRedis, count:int=1): Future[string] {.multisync.} =  if count == 0:    return \"\"  let data = await this.receiveManaged(count)  return data{% endhighlight %}Basically in sync execution multisync will remove Future, and await from the code definition and will leave them in case of async execution### The tooling#### vscode-nim[vscode-nim](https://github.com/pragmagic/vscode-nim) is my daily driver, works as expected, but sometimes it consumes so much memory. there's also [LSP](https://github.com/PMunch/nimlsp) in the works #### nimbleEverything you expect from the package manager, creating projects, custom tasks, managing dependencies and publishing (too coupled with github, but that's fine with me)#### Generating documentation[nim doc](https://nim-lang.org/docs/docgen.html) is the default tool in Nim to generate indexed and searchable documentation for the projectHere's a nimble task to generate documentation{% highlight nim%}task genDocs, \"Create code documentation for zos\":    exec \"nim doc --project src/zos.nim \"{% endhighlight %}{% highlight bash %}nim doc src/zos.nim Hint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nim.cfg' [Conf]Hint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nimdoc.cfg' [Conf]Hint: system [Processing]Hint: zos [Processing]Hint: strutils [Processing]Hint: parseutils [Processing]Hint: math [Processing]Hint: bitops [Processing]Hint: algorithm [Processing]Hint: unicode [Processing]Hint: strformat [Processing]Hint: macros [Processing]Hint: os [Processing]Hint: times [Processing]Hint: options [Processing]Hint: typetraits [Processing]Hint: posix [Processing]Hint: ospaths [Processing]Hint: osproc [Processing]Hint: strtabs [Processing]Hint: hashes [Processing]Hint: streams [Processing]Hint: cpuinfo [Processing]Hint: linux [Processing]Hint: tables [Processing]Hint: parsecfg [Processing]Hint: lexbase [Processing]Hint: json [Processing]Hint: parsejson [Processing]Hint: marshal [Processing]Hint: typeinfo [Processing]Hint: intsets [Processing]Hint: logging [Processing]Hint: net [Processing]Hint: nativesockets [Processing]Hint: winlean [Processing]Hint: dynlib [Processing]Hint: sets [Processing]Hint: openssl [Processing]Hint: asyncdispatch [Processing]Hint: heapqueue [Processing]Hint: lists [Processing]Hint: asyncstreams [Processing]Hint: asyncfutures [Processing]Hint: deques [Processing]Hint: cstrutils [Processing]Hint: asyncnet [Processing]Hint: threadpool [Processing]../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(13, 10) Error: Threadpool requires --threads:on option.Hint: cpuload [Processing]Hint: locks [Processing]../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 26) Error: undeclared identifier: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: expression 'fence' cannot be called../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: expression 'fence' cannot be called../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: expression 'fence' cannot be called../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: expression 'fence' cannot be called../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 37) Error: undeclared identifier: 'Thread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 43) Error: no generic parameters allowed for Thread../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(363, 54) Error: no generic parameters allowed for Thread../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 3) Error: undeclared identifier: 'createThread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: expression 'createThread' cannot be called../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: expression 'createThread' cannot be calledHint: uri [Processing]Hint: base64 [Processing]Hint: redisclient [Processing]Hint: redisparser [Processing]Hint: sequtils [Processing]Hint: docopt [Processing]Hint: nre [Processing]Hint: pcre [Processing]Hint: util [Processing]Hint: util [Processing]Hint: logger [Processing]Hint: settings [Processing]Hint: apphelp [Processing]Hint: errorcodes [Processing]Hint: sshexec [Processing]Hint: hostnamegenerator [Processing]Hint: random [Processing]Hint: app [Processing]Hint: asciitables [Processing]Hint: zosclient [Processing]Hint: uuids [Processing]Hint: isaac [Processing]Hint: urandom [Processing]Hint: vbox [Processing]{% endhighlight %} No idea why `generating docs` gives these errors (most likely because I'm using threadpool in my code?) so I went with my gut feeling and `--threads:on` {% highlight nim%}task genDocs, \"Create code documentation for zos\":    exec \"nim doc  --threads:on --project src/zos.nim \"{% endhighlight %}and now it works just fine, and earned its place in the Good parts.## the OKThese are the OK parts that can be improved in my opinion### DocumentationThere's a great community effort to provide [documentation](https://nim-lang.org/documentation.html). I hope we get more and more soft documentation and better quality on the official docs too.### Weird symbols / jsonNim chooses unreadable symbols `%*` and `$$` over clear names like dumps or loads :(### Error MessagesSometimes the error messages aren't good enough. For instance, I got [i is not accessible](https://github.com/nim-lang/Nim/blob/27b081d1f77604ee47c886e69dbc52f53ea3741f/lib/system/chcks.nim#L21) and even with using `writeStackTrace` I couldn't get anything useful. So I grepped the codebase where `accessible` comes from and continued from there.Another example was this {% highlight bash %}timeddoutable.nim(44, 16) template/generic instantiation from heretimeddoutable.nim(34, 6) Error: type mismatch: got <Thread[ptr Channel[system.bool]], proc (cancelChan: ptr Channel[system.bool]):bool{.gcsafe, locks: 0.}, ptr Channel[system.bool]>but expected one of:proc createThread[TArg](t: var Thread[TArg];                       tp: proc (arg: TArg) {.thread, nimcall.}; param: TArg)  first type mismatch at position: 2  required type: proc (arg: TArg){.gcsafe.}  but expression 'p' is of type: proc (cancelChan: ptr Channel[system.bool]): bool{.gcsafe, locks: 0.}proc createThread(t: var Thread[void]; tp: proc () {.thread, nimcall.})  first type mismatch at position: 1  required type: var Thread[system.void]  but expression 't' is of type: Thread[ptr Channel[system.bool]]expression: createThread(t, p, addr(cancelChan)){% endhighlight %}While the error is clear I just had a hard time reading it## The Hard I really considered switching to language with a more mature ecosystem for these points (multiple times) ### Static linkingNim promises `Produces dependency-free binaries` as stated on its website, but getting a static linked binary is hard, and undocumented process while it was one of the cases I hoped to use Nim for. I managed to statically link with PCRE and SSL [with lots of help from the community](https://github.com/kaushalmodi/hello_musl). ### Dynamic linkingBuilding on Mac OSX with SSL is no fun, specially when your SSL isn't 1.1 [I managed to do with lots of help from the community] {% highlight bash %}brew install openssl@1.1nim c -d:ssl  --dynlibOverride:ssl --dynlibOverride:crypto --threads:on --passC:'-I/usr/local/opt/openssl\\@1.1/include/' --passL:'-lssl -lcrypto -lpcre' --passL:'-L/usr/local/opt/openssl\\@1.1/lib/' src/zos.nim{% endhighlight %}### Developing a redisclientWe have a redis protocol keyvalue store [0-db](https://github.com/threefoldtech/0-db) that I needed to work against a while ago, and I found a major [problem](https://github.com/nim-lang/redis/issues/11) with the implementation of the parser and the client in the official nim redis library. So I had to roll my own [parser](https://github.com/xmonader/nim-redisparser)/[client](https://github.com/xmonader/nim-redisclient) ### Developing asciitable library To show a table listing all of the containers (id, name, open ports and image it's running from) I needed an ascii table library in Nim (I found 0 libraries). I had to write my own [nim-asciitables](https://github.com/xmonader/nim-asciitables)### Nim-JWT In the transport layer, we send a JWT token to request extra privileges on zero-os and for that, I needed jwt support. Again, jwt libraries are far from complete in Nim and had to try to fix it [ES384 support](https://github.com/yglukhov/nim-jwt/pull/1) with that fix I was able to get the claims, but I couldn't really verify it with the public key :( So I decided not to do client side validation and leave the validation to zero-os (the backend)### Concurrency and communicationIn some parts of the application we want to add the ability to timeout after some period of time, andNim supports multithreading using `threadpool` and async/await combo and has [HTTPBeast](https://github.com/dom96/httpbeast), So that shouldn't be a problem.When I saw `Channels` and `spawn` I thought it'd be as easy as goroutines in Go or fibers in Crystal So that was my first try with `spawn`{% highlight nim %}import os, threadpoolvar cancelChan: Channel[bool]cancelChan.open()proc p1():bool=    result = true    for i in countup(0,50):        echo \"p1 Doing action\"        sleep(1000)        let (hasData, msg) = cancelChan.tryRecv()        if msg == true:            echo \"Cancelling p1\"            return     echo \"Done p1...\"proc p2(): bool =    result = true    for i in countup(0,5):        echo \"p2 Doing action\"        sleep(1000)        let (hasData, msg) = cancelChan.tryRecv()        if msg == true:            echo \"Cancelling p1\"            return    echo \"Done p2\"proc timeoutable(p:proc, timeout=10)=     var t = (spawn p())    for i in countup(0, timeout):        if t.isReady():            return        sleep(1000)    cancelChan.send(true)when isMainModule:    timeoutable(p1)    timeoutable(p2){% endhighlight %}However, The Nim creator `Andreas Rumpf` said using Spawn/Channels is a bad idea and channels are meant to be used with Threads, So I tried to move it to threads{% highlight nim %}import os, threadpooltype Args = tuple[cancelChan:ptr Channel[bool], respChan: ptr Channel[bool]]proc p1(a: Args): void {.thread.}=    var cancelChan = a.cancelChan[]    var respChan = a.respChan[]    for i in countup(0,50):        let (hasData, msg) = cancelChan.tryRecv()        echo \"p1 HASDATA: \" & $hasData        echo \"p1 MSG: \" & $msg        if hasData == true:            echo \"Cancelling p1\"            respChan.send(false)            return         echo \"p1 Doing action\"        sleep(1000)    echo \"Done p1...\"    respChan.send(true)proc p2(a: Args): void {.thread.}=    var cancelChan = a.cancelChan[]    var respChan = a.respChan[]    for i in countup(0,5):        let (hasData, msg) = cancelChan.tryRecv()        echo \"p2 HASDATA: \" & $hasData        echo \"p2 MSG: \" & $msg        if hasData:            echo \"proc cancelled successfully\"             respChan.send(false)            return         echo \"p2 Doing action\"        sleep(1000)    echo \"Done p2...\"    respChan.send(true)proc timeoutable(p:proc, timeout=10): bool=     var cancelChan: Channel[bool]    var respChan: Channel[bool]    var t:  Thread[Args]    cancelChan.open()    respChan.open()    var args = (cancelChan.addr, respChan.addr)     createThread[Args](t, p, (args))    for i in countup(0, timeout):        let (hasData, msg) = respChan.tryRecv()        if hasData:            return msg         sleep(1000)    echo \"Cancelling proc..\"    cancelChan.send(true)    close(cancelChan)    close(respChan)    return falsewhen isMainModule:    echo \"P1: \" & $timeoutable(p1)    echo \"P2: \" & $timeoutable(p2){% endhighlight %}I'm not a fan of this `passing pointers`, `casting`, `.addr`### MacrosMacros allow you to apply transformations on AST on compile time which is really amazing, but It can be very challenging to follow or even work with specially if it's not well documented and I feel they're kinda abused in the language resulting in half-baked libraries and macros playground.## Conclusion Overall, Nim is a language with a great potential, and its small team is doing an excellent job. Just be prepared to write lots of missing libraries if you want to use it in production. It's a great chance to reinvent the wheel with no one blaming you :) ", "content_with_meta": "---\nlayout: post\ntitle:  \"Nim: The good, the OK, and the hard\"\ndate:   2018-12-06 23:34:30 +0200\ncategories: nim\n---\n\n## Background\n\nI'm a software engineer at [ThreeFoldTech](https://threefold.io) and the author of [Nim Days](https://xmonader.github.io/nimdays)\n\nOne of the projects we develop at ThreeFoldTech is [Zero-OS](https://github.com/threefoldtech/0-core) a stateless Linux operating system designed for clustered deployments to host virtual machines and containerized applications.\nWe wanted to have a CLI (like docker) to manage the containers and communicate with zero-os instead of using Python client.\n\n\n## Application requirements\n- single binary\n- zos should be like docker for dockerd\n- commands to interact with zero-os (via redis)\n- subcommands to interact with containers on zero-os\n- documentation (soft documentation, hard documentation)\n- tabular output for humans (listing containers and such) \n- support json output when needed too (for further manipulation by tools like jq)\n\nSounds simple enough. Any language would do just fine\n\n\n## Choosing Nim\n\nFrom [Nim](https://nim-lang.org) website\n\n> Nim is a systems and applications programming language. Statically typed and compiled, it provides unparalleled performance in an elegant package.\n- High-performance garbage-collected language\n- Compiles to C, C++ or JavaScript\n- Produces dependency-free binaries\n- Runs on Windows, macOS, Linux, and more\n\n\n\nIn the upcoming sections, I'll talk about the good, the okay, and the hard points I faced while developing this simple CLI application with the requirements above.\n\n\n## The good\n\n### Static typing\nNim eliminates a whole class of errors by being statically typed\n\n### Expressiveness \nNim is like python (whitespace sensitive language) and there's even a guide on the official repo [Nim for Python programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers). Seeing some of Pascal concepts in Nim gets me very nostalgic too.\n\n{% highlight nim %}\nimport strutils, strformat, os, ospaths, osproc, tables, parsecfg, json, marshal, logging\nimport net, asyncdispatch, asyncnet, streams, threadpool, uri\nimport logging\nimport algorithm\nimport base64\n\nimport redisclient, redisparser\nimport asciitables\nimport docopt\nproc checkContainerExists*(this:App, containerid:int): bool=\n  ## checks if container `containerid` exists or not\n  try:\n    discard this.containerInfo(containerid)\n    result = true\n  except:\n    result = false\n{% endhighlight %}\n\n\nI find UFCS (Uniform Function Call Syntax) really great too [excellent nim basics](https://narimiran.github.io/nim-basics/)\n\n{% highlight nim %}\nproc plus(x, y: int): int =  # <1>\n  return x + y\n\nproc multi(x, y: int): int =\n  return x * y\n\nlet\n  a = 2\n  b = 3\n  c = 4\n\necho a.plus(b) == plus(a, b)\necho c.multi(a) == multi(c, a)\n\n\necho a.plus(b).multi(c)  # <2>\necho c.multi(b).plus(a)  # <3>\n{% endhighlight %}\n\nAlso case insensitivity `toUpper` `toupper` `to_upper` is pretty neat\n> I don't use the same identifier with different cases in the same scope \n\n\n{% highlight nim %}\ntype ContainerInfo* = object of RootObj\n  id*: string\n  cpu*: float\n  root*: string\n  hostname*: string\n  name*: string\n  storage*: string\n  pid*: int\n  ports*: string\n{% endhighlight %}\n\nI like the way of defining types, enums and access control `*` means public.\n\n\n### Developing sync, async in the same interface\n\n> Pragmas are Nim's method to give the compiler additional information/commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special {. and .} curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.\n\nI'm a fan of `multisync` pragma because it allows you to define procs for async, sync code easily\n\n{% highlight nim %}\n\n\nproc readMany(this:Redis|AsyncRedis, count:int=1): Future[string] {.multisync.} =\n  if count == 0:\n    return \"\"\n  let data = await this.receiveManaged(count)\n  return data\n\n{% endhighlight %}\nBasically in sync execution multisync will remove Future, and await from the code definition and will leave them in case of async execution\n\n### The tooling\n\n#### vscode-nim\n[vscode-nim](https://github.com/pragmagic/vscode-nim) is my daily driver, works as expected, but sometimes it consumes so much memory. there's also [LSP](https://github.com/PMunch/nimlsp) in the works \n\n#### nimble\nEverything you expect from the package manager, creating projects, custom tasks, managing dependencies and publishing (too coupled with github, but that's fine with me)\n\n\n#### Generating documentation\n[nim doc](https://nim-lang.org/docs/docgen.html) is the default tool in Nim to generate indexed and searchable documentation for the project\n\nHere's a nimble task to generate documentation\n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc --project src/zos.nim \"\n{% endhighlight %}\n\n\n{% highlight bash %}\nnim doc src/zos.nim \nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nim.cfg' [Conf]\nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nimdoc.cfg' [Conf]\nHint: system [Processing]\nHint: zos [Processing]\nHint: strutils [Processing]\nHint: parseutils [Processing]\nHint: math [Processing]\nHint: bitops [Processing]\nHint: algorithm [Processing]\nHint: unicode [Processing]\nHint: strformat [Processing]\nHint: macros [Processing]\nHint: os [Processing]\nHint: times [Processing]\nHint: options [Processing]\nHint: typetraits [Processing]\nHint: posix [Processing]\nHint: ospaths [Processing]\nHint: osproc [Processing]\nHint: strtabs [Processing]\nHint: hashes [Processing]\nHint: streams [Processing]\nHint: cpuinfo [Processing]\nHint: linux [Processing]\nHint: tables [Processing]\nHint: parsecfg [Processing]\nHint: lexbase [Processing]\nHint: json [Processing]\nHint: parsejson [Processing]\nHint: marshal [Processing]\nHint: typeinfo [Processing]\nHint: intsets [Processing]\nHint: logging [Processing]\nHint: net [Processing]\nHint: nativesockets [Processing]\nHint: winlean [Processing]\nHint: dynlib [Processing]\nHint: sets [Processing]\nHint: openssl [Processing]\nHint: asyncdispatch [Processing]\nHint: heapqueue [Processing]\nHint: lists [Processing]\nHint: asyncstreams [Processing]\nHint: asyncfutures [Processing]\nHint: deques [Processing]\nHint: cstrutils [Processing]\nHint: asyncnet [Processing]\nHint: threadpool [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(13, 10) Error: Threadpool requires --threads:on option.\nHint: cpuload [Processing]\nHint: locks [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 26) Error: undeclared identifier: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 37) Error: undeclared identifier: 'Thread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 43) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(363, 54) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 3) Error: undeclared identifier: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: expression 'createThread' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: expression 'createThread' cannot be called\nHint: uri [Processing]\nHint: base64 [Processing]\nHint: redisclient [Processing]\nHint: redisparser [Processing]\nHint: sequtils [Processing]\nHint: docopt [Processing]\nHint: nre [Processing]\nHint: pcre [Processing]\nHint: util [Processing]\nHint: util [Processing]\nHint: logger [Processing]\nHint: settings [Processing]\nHint: apphelp [Processing]\nHint: errorcodes [Processing]\nHint: sshexec [Processing]\nHint: hostnamegenerator [Processing]\nHint: random [Processing]\nHint: app [Processing]\nHint: asciitables [Processing]\nHint: zosclient [Processing]\nHint: uuids [Processing]\nHint: isaac [Processing]\nHint: urandom [Processing]\nHint: vbox [Processing]\n\n{% endhighlight %} \nNo idea why `generating docs` gives these errors (most likely because I'm using threadpool in my code?) so I went with my gut feeling and `--threads:on` \n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc  --threads:on --project src/zos.nim \"\n{% endhighlight %}\nand now it works just fine, and earned its place in the Good parts.\n\n\n## the OK\nThese are the OK parts that can be improved in my opinion\n\n### Documentation\nThere's a great community effort to provide [documentation](https://nim-lang.org/documentation.html). I hope we get more and more soft documentation and better quality on the official docs too.\n\n\n### Weird symbols / json\nNim chooses unreadable symbols `%*` and `$$` over clear names like dumps or loads :(\n\n### Error Messages\nSometimes the error messages aren't good enough. For instance, I got [i is not accessible](https://github.com/nim-lang/Nim/blob/27b081d1f77604ee47c886e69dbc52f53ea3741f/lib/system/chcks.nim#L21) and even with using `writeStackTrace` I couldn't get anything useful. So I grepped the codebase where `accessible` comes from and continued from there.\n\nAnother example was this \n{% highlight bash %}\ntimeddoutable.nim(44, 16) template/generic instantiation from here\ntimeddoutable.nim(34, 6) Error: type mismatch: got <Thread[ptr Channel[system.bool]], proc (cancelChan: ptr Channel[system.bool]):bool{.gcsafe, locks: 0.}, ptr Channel[system.bool]>\nbut expected one of:\nproc createThread[TArg](t: var Thread[TArg];\n                       tp: proc (arg: TArg) {.thread, nimcall.}; param: TArg)\n  first type mismatch at position: 2\n  required type: proc (arg: TArg){.gcsafe.}\n  but expression 'p' is of type: proc (cancelChan: ptr Channel[system.bool]): bool{.gcsafe, locks: 0.}\nproc createThread(t: var Thread[void]; tp: proc () {.thread, nimcall.})\n  first type mismatch at position: 1\n  required type: var Thread[system.void]\n  but expression 't' is of type: Thread[ptr Channel[system.bool]]\n\nexpression: createThread(t, p, addr(cancelChan))\n{% endhighlight %}\nWhile the error is clear I just had a hard time reading it\n\n## The Hard \n\nI really considered switching to language with a more mature ecosystem for these points (multiple times) \n\n### Static linking\nNim promises `Produces dependency-free binaries` as stated on its website, but getting a static linked binary is hard, and undocumented process while it was one of the cases I hoped to use Nim for. \n\nI managed to statically link with PCRE and SSL [with lots of help from the community](https://github.com/kaushalmodi/hello_musl). \n\n### Dynamic linking\nBuilding on Mac OSX with SSL is no fun, specially when your SSL isn't 1.1 [I managed to do with lots of help from the community] \n\n{% highlight bash %}\nbrew install openssl@1.1\n\nnim c -d:ssl  --dynlibOverride:ssl --dynlibOverride:crypto --threads:on --passC:'-I/usr/local/opt/openssl\\@1.1/include/' --passL:'-lssl -lcrypto -lpcre' --passL:'-L/usr/local/opt/openssl\\@1.1/lib/' src/zos.nim\n{% endhighlight %}\n\n\n### Developing a redisclient\nWe have a redis protocol keyvalue store [0-db](https://github.com/threefoldtech/0-db) that I needed to work against a while ago, and I found a major [problem](https://github.com/nim-lang/redis/issues/11) with the implementation of the parser and the client in the official nim redis library. So I had to roll my own [parser](https://github.com/xmonader/nim-redisparser)/[client](https://github.com/xmonader/nim-redisclient) \n\n### Developing asciitable library \nTo show a table listing all of the containers (id, name, open ports and image it's running from) I needed an ascii table library in Nim (I found 0 libraries). I had to write my own [nim-asciitables](https://github.com/xmonader/nim-asciitables)\n\n\n### Nim-JWT \nIn the transport layer, we send a JWT token to request extra privileges on zero-os and for that, I needed jwt support. Again, jwt libraries are far from complete in Nim and had to try to fix it [ES384 support](https://github.com/yglukhov/nim-jwt/pull/1) with that fix I was able to get the claims, but I couldn't really verify it with the public key :( So I decided not to do client side validation and leave the validation to zero-os (the backend)\n\n### Concurrency and communication\nIn some parts of the application we want to add the ability to timeout after some period of time, and\nNim supports multithreading using `threadpool` and async/await combo and has [HTTPBeast](https://github.com/dom96/httpbeast), So that shouldn't be a problem.\n\nWhen I saw `Channels` and `spawn` I thought it'd be as easy as goroutines in Go or fibers in Crystal\n \nSo that was my first try with `spawn`\n\n{% highlight nim %}\nimport os, threadpool\n\nvar cancelChan: Channel[bool]\n\ncancelChan.open()\n\nproc p1():bool=\n    result = true\n    for i in countup(0,50):\n        echo \"p1 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return \n    echo \"Done p1...\"\n\nproc p2(): bool =\n    result = true\n    for i in countup(0,5):\n        echo \"p2 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return\n    echo \"Done p2\"\n\n\nproc timeoutable(p:proc, timeout=10)= \n    var t = (spawn p())\n    for i in countup(0, timeout):\n        if t.isReady():\n            return\n        sleep(1000)\n\n    cancelChan.send(true)\n\nwhen isMainModule:\n    timeoutable(p1)\n    timeoutable(p2)\n{% endhighlight %}\n\n\nHowever, The Nim creator `Andreas Rumpf` said using Spawn/Channels is a bad idea and channels are meant to be used with Threads, So I tried to move it to threads\n\n{% highlight nim %}\n\nimport os, threadpool\n\ntype Args = tuple[cancelChan:ptr Channel[bool], respChan: ptr Channel[bool]]\n\nproc p1(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,50):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p1 HASDATA: \" & $hasData\n        echo \"p1 MSG: \" & $msg\n        if hasData == true:\n            echo \"Cancelling p1\"\n            respChan.send(false)\n            return \n        echo \"p1 Doing action\"\n        sleep(1000)\n\n    echo \"Done p1...\"\n    respChan.send(true)\n\nproc p2(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,5):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p2 HASDATA: \" & $hasData\n        echo \"p2 MSG: \" & $msg\n        if hasData:\n            echo \"proc cancelled successfully\" \n            respChan.send(false)\n            return \n        echo \"p2 Doing action\"\n        sleep(1000)\n\n    echo \"Done p2...\"\n    respChan.send(true)\n\n\nproc timeoutable(p:proc, timeout=10): bool= \n\n    var cancelChan: Channel[bool]\n    var respChan: Channel[bool]\n    var t:  Thread[Args]\n    cancelChan.open()\n    respChan.open()\n    var args = (cancelChan.addr, respChan.addr) \n    createThread[Args](t, p, (args))\n\n    for i in countup(0, timeout):\n        let (hasData, msg) = respChan.tryRecv()\n        if hasData:\n            return msg \n        sleep(1000)\n\n    echo \"Cancelling proc..\"\n    cancelChan.send(true)\n    close(cancelChan)\n    close(respChan)\n\n    return false\n\nwhen isMainModule:\n    echo \"P1: \" & $timeoutable(p1)\n    echo \"P2: \" & $timeoutable(p2)\n{% endhighlight %}\n\n\nI'm not a fan of this `passing pointers`, `casting`, `.addr`\n\n\n### Macros\nMacros allow you to apply transformations on AST on compile time which is really amazing, but It can be very challenging to follow or even work with specially if it's not well documented and I feel they're kinda abused in the language resulting in half-baked libraries and macros playground.\n\n\n## Conclusion \nOverall, Nim is a language with a great potential, and its small team is doing an excellent job. Just be prepared to write lots of missing libraries if you want to use it in production. It's a great chance to reinvent the wheel with no one blaming you :) ", "tags": [""], "published_at": "", "id": 55}, {"title": "Solving murder with Prolog", "slug": "solving-murder-prolog", "content": "In our company we usually have a fun quiz every sunday and this was one of them## The puzzleTo discover who killed Mr. Boddy, you need to learn where each person was, and what weapon was in the room. Clues are scattered throughout the quiz (you cannot solve question 1 until all 10 are read).- To begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).Who was found in the kitchen?- Clue 1: The man in the kitchen was not found with the rope, knife, or bag.Which weapon, then, which was not the firearm, was found in the kitchen?- Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.Which room was Barbara found in?- Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.Who had the bag in the room with them?- Clue 4: The woman with the rope was found in the study.Who had the rope?- Clue 5: The weapon in the living room was found with either John or George.What weapon was in the living room?- Clue 6: The knife was not in the dining room.So where was the knife?- Clue 7: Yolanda was not with the weapon found in the study nor the pantry.What weapon was found with Yolanda?- Clue 8: The firearm was in the room with George.In which room was the firearm found?- It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.Who, then, do you point the finger towards?I suck at these kind of puzzles (actually most of the puzzles), and those can take hours and hours of thinking, but there's always Prolog to the rescue! Prolog can help solving these kinds of reasoning puzzles and we will see how.## prolog 101### Install SWI-Prolog```prolog~> swiplWelcome to SWI-Prolog (Multi-threaded, 64 bits, Version 6.6.6)Copyright (c) 1990-2013 University of Amsterdam, VU AmsterdamSWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software,and you are welcome to redistribute it under certain conditions.Please visit http://www.swi-prolog.org for details. For help, use ?- help(Topic). or ?- apropos(Word). ?- write('Hello, World!').Hello, World!true.?- write('Hello,'), nl, write('world').Hello,worldtrue.?- X is 3*4 + 2.X = 14.```- `swipl` is our prolog interpreter binary- `write` is called a `functor` and represented as `write/1` means it takes 1 argument. (same concept in erlang or elixir to add the number of arguments to the function name)- `nl` used to print newline- to execute sequence of commands you use `,` which is the AND operator also if it fails the whole computation fails- `is` assginment operator followed by math expression- variables are Capitalized `X` not x### Knowledge baseProlog is all about stating facts, composing facts and querying them. create a file `hello.pl````prologfriend(john, julia).friend(john, jack).friend(julia, sam).friend(julia, molly). loves(john, julia).loves(julia, sam).loves(sam, julia). male(brad).male(john).male(jim).male(alfred).female(marry).child(brad, alfred).child(john, jim).child(john, marry).```- to load it we use `[hello].` : notice the . in the end- use `listing` to list all the facts in the knowledge base```prolog?- [hello].% hello compiled 0.00 sec, 3 clausestrue. ?- listing(friend).friend(john, julia).friend(john, jack).friend(julia, sam).friend(julia, molly). true. ?- listing(loves).loves(john, julia).loves(julia, sam).loves(sam, julia). true.```\t### Querying the factsAfter stating the facts in our knowledge base we can go ahead and ask prolog about the truth or what it can deduce from the facts we gave it.```prolog?- friend(john, julia).true . ?- friend(john, jack).true. ?- loves(john, julia).true. ?- loves(john, sam).false.```We can go for more complex queries like asking (Who is friend with john or Who loves julia)```prolog?- friend(john, Who).Who = julia ;Who = jack.``````prolog?- listing(child).child(brad, alfred).child(john, jim).child(john, mary). true. ?- child(john, X).X = jim ;X = mary.```### Is John friendzoned?We defined `friend` relation `friend(john, julia)` It says `john is friend with julia`, but for prolog that doesn't mean `julia is friend with john` you need to add another fact saying  `friend(julia, john)`, also we already defined the `child` relations, for sure we don't want to duplicate it again and flip the arguments to define `parent` relations. We don't want to write```child(brad, alfred).child(john, jim).child(john, mary).parent(alfred, brad).parent(jim, john).parent(mary, john).```Prolog helps by allowing inference rules. `rule :- stmt1, stmt2,...`rule is true if all of the inner statements are true (ANDed together with `,`)```prologfriend(X, Y) :- friend(Y,X).parent(X, Y) :- child(Y,X).father(X, Y) :- child(Y,X), male(X).mother(X, Y) :- child(Y,X), female(X).friendzoned(X) :- loves(X, Y), \\+ loves(Y,X).```- `friend(X,Y)` is a rule that is true if also `friend(Y,X`)- `parent(X,Y)` is true if `child(Y,X)` is defined - `father(X,Y)` is true if `parent(X,Y)` and `male(X)` are defined- `mother(X,Y)` is true if `parent(X,Y)` and `female(X)` are defined.- `friendzoned(X)` is true if X loves `SOMEONE Y` and that Y doesn't love X (notice the hidden variable Y?)```prolog?- friend(julia, john).true .?- male(jim).true. ?- parent(jim,X).X = john. ?- father(jim, X).X = john. ?- mother(X, john).X = marry. ?- mother(marry,X).X = john. ?- mother(marry, john).true.?- loves(julia, X).X = sam. ?- friendzoned(julia).false. ?- friendzoned(john).true.```OK now we know enough prolog to be dangerous. we will warm up with map coloring problem## Map coloringFirst we will start with solving a map coloring problem. A famous problem in mathematics concerns coloring regions on the maps. it is required that any two adjacent regions may not have the same color.![Map](https://ai.ia.agh.edu.pl/wiki/_media/pl:prolog:prolog_lab:map_coloring.png?cache=&w=640&h=400&tok=8ffff3)So our reasoning should be, we have 1- Variables: areas we want to color A,B,C,D,E2- Domain: the range of values that can be assigned to our variables) and that would be (red, blue, green)3- Stating the constraints that no adjacent areas can have the same color.### DomainLet's define the domain of our Areas (red, green, blue)```prologcolor(red).color(green).color(blue).```Just like that### Asking for solution```prologcolorify(A,B,C,D,E) :-       color(A), color(B), color(C), color(D), color(E),    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,    \\+ B=C, \\+ C=D, \\+ D=E.```Here we define our solution as a rule `colorify` that has 5 `variables` A,B,C,D,E and in the body we assign the domain color `red, blue, green` to our variables `A,B,C,D,E` and state the constraints that A not equal to B an A not equal to C, ... etc> `\\+ X=Y` means X is not equal to YProlog now will keep generating values like (red, blue, green) and assigns them our variables `A,B,C,D,E` until our constraints are met ```bash?- [mapcoloring]|    .true.?- colorify(A,B,C,D,E)|    .A = red,B = D, D = green,C = E, E = blue ;A = red,B = D, D = blue,C = E, E = green ;A = green,B = D, D = red,C = E, E = blue ;A = green,B = D, D = blue,C = E, E = red ;A = blue,B = D, D = red,C = E, E = green ;A = blue,B = D, D = green,C = E, E = red ``````prologcolor(red).color(green).color(blue).colorify(A,B,C,D,E) :-    color(A), color(B), color(C), color(D), color(E),    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,    \\+ B=C, \\+ C=D, \\+ D=E.```but we aren't here to solve map coloring.. let's get back to the murder.## The murderTo begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).Who was found in the kitchen?### DomainFrom that we can infer that our domains contains `man`, `woman` `person` or suspect, `location` and `weapons` and our variables are (A,B,C,D,E,F) need to represent (a Person and a location and a weapon) with some constraints that will be revealed in the upcoming clues```prologman(george). man(john). man(robert).woman(barbara). woman(christine). woman(yolanda).person(X):- man(X).person(X):- woman(X).location(bathroom). location(dining). location(kitchen). location(livingroom). location(pantry). location(study).weapon(bag). weapon(firearm). weapon(gas). weapon(knife). weapon(poison). weapon(rope).````uniq_ppl` rule generates unique values for our variables (A,B,C,D,E) such that they are all unique.```prologuniq_ppl(A,B,C,D,E,F):- person(A), person(B), person(C), person(D), person(E), person(F),  \\+A=B, \\+A=C, \\+A=D, \\+A=E, \\+A=F, \\+B=C, \\+B=D, \\+B=E, \\+B=F, \\+C=D, \\+C=E, \\+C=F, \\+D=E, \\+D=F, \\+E=F.```### SolutionWe start by defining `murderer` rule with unique people `in locations` and unique people `having weapons` and now will specify the relation between the people in the locations with those having weapons> Note we are still working against 6 suspects.#### Entry```prologmurderer(X) :-   uniq_ppl(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study),   uniq_ppl(Bag, Firearm, Gas, Knife, Poison, Rope),```To easily reason about the variables like `Bathroom, Dining, Firearm, Gas` we say - Bathroom: the suspect (man or woman) in Bathroom- Firearm: the suspect (man or woman) has a Firearm.. etc, you can also think of it as a [grid](https://docs.google.com/spreadsheets/d/1pxmVaG6eMbkVg55rVYJquIVxaN3l09nrW6HJH7xdITM/edit#gid=0) now we will keep adding constraints `after the last comma in our murderer rule`#### Clue 1The man in the kitchen was not found with the rope, knife, or bag. Which weapon, then, which was not the firearm, was found in the kitchen?```prolog% 2. Clue 1: The man in the kitchen was not found with the rope, knife, or bag.% Which weapon, then, which was not the firearm, was found in the kitchen?   man(Kitchen),    \\+Kitchen=Rope, \\+Kitchen=Knife, \\+Kitchen=Bag, \\+Kitchen=Firearm,```So we say the one the `Kitchen` is variable satisfying `man` fact (defined in our domain) and we state that whoever `man` in the `Kitchen` doesn't have any of (`Rope`, `Knife`, `Bag`, `Firearm`)#### Clue 2Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.Which room was Barbara found in?So we can say it was a `woman` in the `Study` and a `woman` in the `Bathroom` AND it wasn't `christine` and we cross the other options for `Barbara` (Kitchen, Dining, Livingroom, Pantry)```prolog% % 3. Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.% % Which room was Barbara found in?    woman(Bathroom), woman(Study), \\+christine=Bathroom, \\+christine=Study,     \\+barbara=Dining, \\+barbara=Kitchen, \\+barbara=Livingroom, \\+barbara=Pantry,```#### Clue 3Clue 3: The person with the bag, who was not barbara nor George, was not in the bathroom nor the dining room.% % Who had the bag in the room with them?```prolog% % 4. Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.% % Who had the bag in the room with them?    \\+barbara=Bag, \\+george=Bag, \\+Bag=Bathroom, \\+Bag=Dining,         ```- `Barbara` not the one with bag - `george` isn't the one with the bag- the one with the `Bag` isn't the one in the Bathroom AND isn't the one in the `Dining`> Edit: thanks to the nice people on reddit corrected the misinterpretation I had for clue no.3#### Clue 4Clue 4: The woman with the rope was found in the study.Who had the rope?- The one with the `Rope` is `woman`- She was found in the `Study`   ```prolog% % 5. Clue 4: The woman with the rope was found in the study.% % Who had the rope?       woman(Rope), Rope=Study,  ```#### Clue 5Clue 5: The weapon in the living room was found with either John or George. What weapon was in the living room?- `man` in `Livingroom`- `Livingroom` isn't `robert````prolog% % 6. Clue 5: The weapon in the living room was found with either John or George.% % What weapon was in the living room?    man(Livingroom), \\+Livingroom=robert,```#### Clue 6Clue 6: The knife was not in the dining room.So where was the knife?```prolog% % 7. Clue 6: The knife was not in the dining room.% % So where was the knife?    \\+Knife=Dining,```- the suspect with `Knife` wasn't in `Dining`#### Clue 7 Clue 7: Yolanda was not with the weapon found in the study nor the pantry. What weapon was found with Yolanda?```prolog% % 8. Clue 7: Yolanda was not with the weapon found in the study nor the pantry.% % What weapon was found with Yolanda?    \\+yolanda=Pantry, \\+yolanda=Study,```- `yolanda` isn't the one in `Pantry` - `yolanda` isn't the one in `Study` #### Clue 8```prolog% % 9. Clue 8: The firearm was in the room with George.% % In which room was the firearm found?    Firearm=george,```- `george` is the perrson with the `Firearm`#### Clue 9```prolog% % 10. It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.% % Who, then, do you point the finger towards?Pantry=Gas, Pantry=X, write(\"KILLER IS :\"), write(X), nl, writeanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope).```- `Gas` in `Pantry` so those are equal- `Pantry` has the murderer X- we write the murderer X name using `write`- we write the the variables `Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope` using `writeanswers` which is defined like so```prologwriteanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope):-     write(\"Bathroom: \"), write(Bathroom), nl,    write(\"Dining: \"), write(Dining), nl,    write(\"Livingroom: \"), write(Livingroom), nl,     write(\"Pantry: \"), write(Pantry), nl,    write(\"Study: \"), write(Study), nl,    write(\"Kitchen: \"), write(Kitchen), nl,    write(\"Knife: \"), write(Knife), nl,    write(\"Gas: \"), write(Gas), nl,    write(\"Rope: \"), write(Rope), nl,     write(\"Bag: \"), write(Bag), nl,    write(\"Poison: \"), write(Poison), nl,    write(\"Firearm: \"), write(Firearm), nl. ```\t\t### Who is the murderer? ```bash ?- [crime2].true.?- murderer(X).KILLER IS :christineBathroom: yolandaDining: georgeLivingroom: johnPantry: christineStudy: barbaraKitchen: robertKnife: yolandaGas: christineRope: barbaraBag: johnPoison: robertFirearm: georgeX = christine ;```Code is available [here](https://github.com/xmonader/prolog-rands/blob/master/crime.pl) probably can be much better as I'm no expert in prolog :) ", "content_with_meta": "---\nlayout: post\ntitle:  \"Solving murder with Prolog\"\ndate:   2018-12-22 01:17:30 +0200\ncategories: prolog\n---\n\nIn our company we usually have a fun quiz every sunday and this was one of them\n\n## The puzzle\n\nTo discover who killed Mr. Boddy, you need to learn where each person was, and what weapon was in the room. Clues are scattered throughout the quiz (you cannot solve question 1 until all 10 are read).\n\n- To begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\nWho was found in the kitchen?\n\n- Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\nWhich weapon, then, which was not the firearm, was found in the kitchen?\n\n- Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\n- Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\nWho had the bag in the room with them?\n\n- Clue 4: The woman with the rope was found in the study.\nWho had the rope?\n\n- Clue 5: The weapon in the living room was found with either John or George.\nWhat weapon was in the living room?\n\n- Clue 6: The knife was not in the dining room.\nSo where was the knife?\n\n- Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\nWhat weapon was found with Yolanda?\n\n- Clue 8: The firearm was in the room with George.\nIn which room was the firearm found?\n\n- It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\nWho, then, do you point the finger towards?\n\n\nI suck at these kind of puzzles (actually most of the puzzles), and those can take hours and hours of thinking, but there's always Prolog to the rescue! Prolog can help solving these kinds of reasoning puzzles and we will see how.\n\n\n## prolog 101\n\n### Install SWI-Prolog\n```prolog\n~> swipl\nWelcome to SWI-Prolog (Multi-threaded, 64 bits, Version 6.6.6)\nCopyright (c) 1990-2013 University of Amsterdam, VU Amsterdam\nSWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software,\nand you are welcome to redistribute it under certain conditions.\nPlease visit http://www.swi-prolog.org for details.\n \nFor help, use ?- help(Topic). or ?- apropos(Word).\n \n?- write('Hello, World!').\nHello, World!\ntrue.\n?- write('Hello,'), nl, write('world').\nHello,\nworld\ntrue.\n?- X is 3*4 + 2.\nX = 14.\n```\n- `swipl` is our prolog interpreter binary\n- `write` is called a `functor` and represented as `write/1` means it takes 1 argument. (same concept in erlang or elixir to add the number of arguments to the function name)\n- `nl` used to print newline\n- to execute sequence of commands you use `,` which is the AND operator also if it fails the whole computation fails\n- `is` assginment operator followed by math expression\n- variables are Capitalized `X` not x\n\n### Knowledge base\nProlog is all about stating facts, composing facts and querying them. \n\ncreate a file `hello.pl`\n\n```prolog\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \nmale(brad).\nmale(john).\nmale(jim).\nmale(alfred).\nfemale(marry).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, marry).\n```\n\n- to load it we use `[hello].` : notice the . in the end\n- use `listing` to list all the facts in the knowledge base\n\n```prolog\n?- [hello].\n% hello compiled 0.00 sec, 3 clauses\ntrue.\n \n?- listing(friend).\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \ntrue.\n \n?- listing(loves).\nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \ntrue.\n```\t\n\n### Querying the facts\nAfter stating the facts in our knowledge base we can go ahead and ask prolog about the truth or what it can deduce from the facts we gave it.\n```prolog\n?- friend(john, julia).\ntrue .\n \n?- friend(john, jack).\ntrue.\n \n?- loves(john, julia).\ntrue.\n \n?- loves(john, sam).\nfalse.\n```\n\nWe can go for more complex queries like asking (Who is friend with john or Who loves julia)\n```prolog\n?- friend(john, Who).\nWho = julia ;\nWho = jack.\n```\n\n```prolog\n?- listing(child).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n \ntrue.\n \n?- child(john, X).\nX = jim ;\nX = mary.\n```\n\n### Is John friendzoned?\nWe defined `friend` relation `friend(john, julia)` It says `john is friend with julia`, but for prolog that doesn't mean `julia is friend with john` you need to add another fact saying  `friend(julia, john)`, also we already defined the `child` relations, for sure we don't want to duplicate it again and flip the arguments to define `parent` relations. We don't want to write\n```\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n\nparent(alfred, brad).\nparent(jim, john).\nparent(mary, john).\n```\nProlog helps by allowing inference rules. \n\n`rule :- stmt1, stmt2,...`\n\nrule is true if all of the inner statements are true (ANDed together with `,`)\n\n\n```prolog\nfriend(X, Y) :- friend(Y,X).\nparent(X, Y) :- child(Y,X).\nfather(X, Y) :- child(Y,X), male(X).\nmother(X, Y) :- child(Y,X), female(X).\nfriendzoned(X) :- loves(X, Y), \\+ loves(Y,X).\n\n```\n- `friend(X,Y)` is a rule that is true if also `friend(Y,X`)\n- `parent(X,Y)` is true if `child(Y,X)` is defined \n- `father(X,Y)` is true if `parent(X,Y)` and `male(X)` are defined\n- `mother(X,Y)` is true if `parent(X,Y)` and `female(X)` are defined.\n- `friendzoned(X)` is true if X loves `SOMEONE Y` and that Y doesn't love X (notice the hidden variable Y?)\n\n\n```prolog\n?- friend(julia, john).\ntrue .\n?- male(jim).\ntrue.\n \n?- parent(jim,X).\nX = john.\n \n?- father(jim, X).\nX = john.\n \n?- mother(X, john).\nX = marry.\n \n?- mother(marry,X).\nX = john.\n \n?- mother(marry, john).\ntrue.\n\n?- loves(julia, X).\nX = sam.\n \n?- friendzoned(julia).\nfalse.\n \n?- friendzoned(john).\ntrue.\n```\n\nOK now we know enough prolog to be dangerous. we will warm up with map coloring problem\n\n## Map coloring\nFirst we will start with solving a map coloring problem. A famous problem in mathematics concerns coloring regions on the maps. it is required that any two adjacent regions may not have the same color.\n\n![Map](https://ai.ia.agh.edu.pl/wiki/_media/pl:prolog:prolog_lab:map_coloring.png?cache=&w=640&h=400&tok=8ffff3)\n\nSo our reasoning should be, we have \n1- Variables: areas we want to color A,B,C,D,E\n2- Domain: the range of values that can be assigned to our variables) and that would be (red, blue, green)\n3- Stating the constraints that no adjacent areas can have the same color.\n\n### Domain\n\nLet's define the domain of our Areas (red, green, blue)\n\n```prolog\n\ncolor(red).\ncolor(green).\ncolor(blue).\n\n```\nJust like that\n\n### Asking for solution\n\n```prolog\n\n\ncolorify(A,B,C,D,E) :-\n   \n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\nHere we define our solution as a rule `colorify` that has 5 `variables` A,B,C,D,E and in the body we assign the domain color `red, blue, green` to our variables `A,B,C,D,E` and state the constraints that A not equal to B an A not equal to C, ... etc\n> `\\+ X=Y` means X is not equal to Y\n\nProlog now will keep generating values like (red, blue, green) and assigns them our variables `A,B,C,D,E` until our constraints are met \n\n```bash\n?- [mapcoloring]\n|    .\ntrue.\n\n?- colorify(A,B,C,D,E)\n|    .\nA = red,\nB = D, D = green,\nC = E, E = blue ;\nA = red,\nB = D, D = blue,\nC = E, E = green ;\nA = green,\nB = D, D = red,\nC = E, E = blue ;\nA = green,\nB = D, D = blue,\nC = E, E = red ;\nA = blue,\nB = D, D = red,\nC = E, E = green ;\nA = blue,\nB = D, D = green,\nC = E, E = red \n\n```\n\n\n```prolog\ncolor(red).\ncolor(green).\ncolor(blue).\n\ncolorify(A,B,C,D,E) :-\n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\n\nbut we aren't here to solve map coloring.. let's get back to the murder.\n\n## The murder\n\nTo begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\n\nWho was found in the kitchen?\n\n### Domain\n\nFrom that we can infer that our domains contains `man`, `woman` `person` or suspect, `location` and `weapons` and our variables are (A,B,C,D,E,F) need to represent (a Person and a location and a weapon) with some constraints that will be revealed in the upcoming clues\n\n\n```prolog\n\nman(george). man(john). man(robert).\nwoman(barbara). woman(christine). woman(yolanda).\nperson(X):- man(X).\nperson(X):- woman(X).\nlocation(bathroom). location(dining). location(kitchen). location(livingroom). location(pantry). location(study).\nweapon(bag). weapon(firearm). weapon(gas). weapon(knife). weapon(poison). weapon(rope).\n```\n\n`uniq_ppl` rule generates unique values for our variables (A,B,C,D,E) such that they are all unique.\n\n```prolog\nuniq_ppl(A,B,C,D,E,F):- person(A), person(B), person(C), person(D), person(E), person(F),  \\+A=B, \\+A=C, \\+A=D, \\+A=E, \\+A=F, \\+B=C, \\+B=D, \\+B=E, \\+B=F, \\+C=D, \\+C=E, \\+C=F, \\+D=E, \\+D=F, \\+E=F.\n\n```\n\n\n### Solution\n\nWe start by defining `murderer` rule with unique people `in locations` and unique people `having weapons` and now will specify the relation between the people in the locations with those having weapons\n\n> Note we are still working against 6 suspects.\n\n#### Entry\n```prolog\nmurderer(X) :-\n   uniq_ppl(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study),\n   uniq_ppl(Bag, Firearm, Gas, Knife, Poison, Rope),\n```\nTo easily reason about the variables like `Bathroom, Dining, Firearm, Gas` we say \n- Bathroom: the suspect (man or woman) in Bathroom\n- Firearm: the suspect (man or woman) has a Firearm\n.. etc, you can also think of it as a [grid](https://docs.google.com/spreadsheets/d/1pxmVaG6eMbkVg55rVYJquIVxaN3l09nrW6HJH7xdITM/edit#gid=0) \n\nnow we will keep adding constraints `after the last comma in our murderer rule`\n\n#### Clue 1\n\nThe man in the kitchen was not found with the rope, knife, or bag. Which weapon, then, which was not the firearm, was found in the kitchen?\n\n```prolog\n% 2. Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\n% Which weapon, then, which was not the firearm, was found in the kitchen?\n\n   man(Kitchen), \n   \\+Kitchen=Rope, \\+Kitchen=Knife, \\+Kitchen=Bag, \\+Kitchen=Firearm,\n```\nSo we say the one the `Kitchen` is variable satisfying `man` fact (defined in our domain) and we state that whoever `man` in the `Kitchen` doesn't have any of (`Rope`, `Knife`, `Bag`, `Firearm`)\n\n\n#### Clue 2\n\nClue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\nSo we can say it was a `woman` in the `Study` and a `woman` in the `Bathroom` AND it wasn't `christine` and we cross the other options for `Barbara` (Kitchen, Dining, Livingroom, Pantry)\n\n```prolog\n% % 3. Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\n% % Which room was Barbara found in?\n    woman(Bathroom), woman(Study), \\+christine=Bathroom, \\+christine=Study, \n    \\+barbara=Dining, \\+barbara=Kitchen, \\+barbara=Livingroom, \\+barbara=Pantry,\n```\n\n#### Clue 3\nClue 3: The person with the bag, who was not barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n```prolog\n% % 4. Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n    \\+barbara=Bag, \\+george=Bag, \\+Bag=Bathroom, \\+Bag=Dining,\n   \n   \n   \n```\n- `Barbara` not the one with bag \n- `george` isn't the one with the bag\n- the one with the `Bag` isn't the one in the Bathroom AND isn't the one in the `Dining`\n\n> Edit: thanks to the nice people on reddit corrected the misinterpretation I had for clue no.3\n\n#### Clue 4\nClue 4: The woman with the rope was found in the study.Who had the rope?\n\n- The one with the `Rope` is `woman`\n- She was found in the `Study`   \n```prolog\n% % 5. Clue 4: The woman with the rope was found in the study.\n% % Who had the rope?\n   \n    woman(Rope), Rope=Study,  \n```\n\n\n#### Clue 5\nClue 5: The weapon in the living room was found with either John or George. What weapon was in the living room?\n\n\n- `man` in `Livingroom`\n- `Livingroom` isn't `robert`\n\n\n```prolog\n% % 6. Clue 5: The weapon in the living room was found with either John or George.\n% % What weapon was in the living room?\n    man(Livingroom), \\+Livingroom=robert,\n\n```\n#### Clue 6\nClue 6: The knife was not in the dining room.So where was the knife?\n\n\n```prolog\n% % 7. Clue 6: The knife was not in the dining room.\n% % So where was the knife?\n    \\+Knife=Dining,\n```\n- the suspect with `Knife` wasn't in `Dining`\n\n\n#### Clue 7\n Clue 7: Yolanda was not with the weapon found in the study nor the pantry. What weapon was found with Yolanda?\n\n```prolog\n% % 8. Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\n% % What weapon was found with Yolanda?\n    \\+yolanda=Pantry, \\+yolanda=Study,\n```\n- `yolanda` isn't the one in `Pantry` \n- `yolanda` isn't the one in `Study` \n\n#### Clue 8\n\n```prolog\n% % 9. Clue 8: The firearm was in the room with George.\n% % In which room was the firearm found?\n    Firearm=george,\n\n```\n- `george` is the perrson with the `Firearm`\n\n#### Clue 9\n\n```prolog\n% % 10. It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\n% % Who, then, do you point the finger towards?\nPantry=Gas, Pantry=X, write(\"KILLER IS :\"), write(X), nl, writeanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope).\n```\n- `Gas` in `Pantry` so those are equal\n- `Pantry` has the murderer X\n- we write the murderer X name using `write`\n- we write the the variables `Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope` using `writeanswers` which is defined like so\n```prolog\nwriteanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope):- \n    write(\"Bathroom: \"), write(Bathroom), nl,\n    write(\"Dining: \"), write(Dining), nl,\n    write(\"Livingroom: \"), write(Livingroom), nl, \n    write(\"Pantry: \"), write(Pantry), nl,\n    write(\"Study: \"), write(Study), nl,\n    write(\"Kitchen: \"), write(Kitchen), nl,\n\n    write(\"Knife: \"), write(Knife), nl,\n    write(\"Gas: \"), write(Gas), nl,\n    write(\"Rope: \"), write(Rope), nl, \n    write(\"Bag: \"), write(Bag), nl,\n    write(\"Poison: \"), write(Poison), nl,\n    write(\"Firearm: \"), write(Firearm), nl.\n ```\t\t\n\n\n### Who is the murderer?\n\n ```bash\n ?- [crime2].\ntrue.\n?- murderer(X).\nKILLER IS :christine\nBathroom: yolanda\nDining: george\nLivingroom: john\nPantry: christine\nStudy: barbara\nKitchen: robert\nKnife: yolanda\nGas: christine\nRope: barbara\nBag: john\nPoison: robert\nFirearm: george\nX = christine ;\n\n```\n\nCode is available [here](https://github.com/xmonader/prolog-rands/blob/master/crime.pl) probably can be much better as I'm no expert in prolog :) ", "tags": [""], "published_at": "", "id": 56}, {"title": "Version 0.19.2 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.19.2, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.This is mostly a bugfix release of version 0.19.0.It adds RISC-V support and there are no breaking changes.The most important bugfixes are:- ``spawn`` can handle the empty seqs/strings that are internally  represented as ``nil``.- The most pressing bugs of the documentation generator have been fixed.- async streaming of the httpclient has been fixed.## Installing 0.19.2If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.19.2 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim by following the instructions on our[install](https://nim-lang.org/install.html) page.### Compiler changes- Added support for the RISC-V 64 bit architecture named riscv64(e.g. [HiFive](https://www.sifive.com/boards/hifive-unleashed))### Bugfixes- Fixed \"Nim 0.19.0 docs have incorrect Source/Edit links\"  ([#9083](https://github.com/nim-lang/Nim/issues/9083))- Fixed \"Json: compilation fails with aliased type\"  ([#9111](https://github.com/nim-lang/Nim/issues/9111))- Fixed \"https://nim-lang.org/docs/nre.html gives 404 error\"  ([#9119](https://github.com/nim-lang/Nim/issues/9119))- Fixed \"Leaving `\\\\` at the end of a path in `copyDir` removes every file's first char\"  ([#9126](https://github.com/nim-lang/Nim/issues/9126))- Fixed \"nim doc SIGSEGV: Illegal storage access.\"  ([#9140](https://github.com/nim-lang/Nim/issues/9140))- Fixed \"[doc] List of broken links in the doc site\"  ([#9109](https://github.com/nim-lang/Nim/issues/9109))- Fixed \"Fix incorrect examples in nre docs\"  ([#9053](https://github.com/nim-lang/Nim/issues/9053))- Fixed \"Clean up root of repo and release archives\"  ([#4934](https://github.com/nim-lang/Nim/issues/4934))- Fixed \"Concept/converter/generics-related compiler crash\"  ([#7351](https://github.com/nim-lang/Nim/issues/7351))- Fixed \"converter + concept causes compiler to quit without error\"  ([#6249](https://github.com/nim-lang/Nim/issues/6249))- Fixed \"Error: internal error\"  ([#6533](https://github.com/nim-lang/Nim/issues/6533))- Fixed \"Methods break static[T] (internal error: nesting too deep)\"  ([#5479](https://github.com/nim-lang/Nim/issues/5479))- Fixed \"Memory error when checking if a variable is a string in concept\"  ([#7092](https://github.com/nim-lang/Nim/issues/7092))- Fixed \"Internal error when using array of procs\"  ([#5015](https://github.com/nim-lang/Nim/issues/5015))- Fixed \"[Regression] Compiler crash on proc with static, used to compile in nim 0.16\"  ([#5868](https://github.com/nim-lang/Nim/issues/5868))- Fixed \"fixes/8099\"  ([#8451](https://github.com/nim-lang/Nim/issues/8451))- Fixed \"distinct generic typeclass not treated as distinct\"  ([#4435](https://github.com/nim-lang/Nim/issues/4435))- Fixed \"multiple dynlib pragmas with function calls conflict with each other causing link time error\"  ([#9222](https://github.com/nim-lang/Nim/issues/9222))- Fixed \"\\0 in comment replaced with 0 in docs\"  ([#8841](https://github.com/nim-lang/Nim/issues/8841))- Fixed \"Async readAll in httpclient produces garbled output.\"  ([#8994](https://github.com/nim-lang/Nim/issues/8994))- Fixed \"`runnableExamples` should be run by `nim doc` even if symbol is not public\"  ([#9216](https://github.com/nim-lang/Nim/issues/9216))- Fixed \"[regression] project `config.nims` not being read anymore\"  ([#9264](https://github.com/nim-lang/Nim/issues/9264))- Fixed \"Using iterator within another iterator fails\"  ([#3819](https://github.com/nim-lang/Nim/issues/3819))- Fixed \"`nim js -o:dirname main.nim` writes nothing, and no error shown\"  ([#9154](https://github.com/nim-lang/Nim/issues/9154))- Fixed \"devel docs in nim-lang.github.io `Source` links point to master instead of devel\"  ([#9295](https://github.com/nim-lang/Nim/issues/9295))- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"  ([#9306](https://github.com/nim-lang/Nim/issues/9306))- Fixed \"counting the empty substring in a string results in infinite loop\"  ([#8919](https://github.com/nim-lang/Nim/issues/8919))- Fixed \"[nimpretty] raw strings are transformed into normal strings\"  ([#9236](https://github.com/nim-lang/Nim/issues/9236))- Fixed \"[nimpretty] proc is transfered to incorrect code\"  ([#8626](https://github.com/nim-lang/Nim/issues/8626))- Fixed \"[nimpretty] Additional new line is added with each format\"  ([#9144](https://github.com/nim-lang/Nim/issues/9144))- Fixed \"\"%NIM%/config/nim.cfg\" is not being read\"  ([#9244](https://github.com/nim-lang/Nim/issues/9244))- Fixed \"Illegal capture on async proc (except when the argument is `seq`)\"  ([#2361](https://github.com/nim-lang/Nim/issues/2361))- Fixed \"Jsondoc0 doesn't output module comments.\"  ([#9364](https://github.com/nim-lang/Nim/issues/9364))- Fixed \"NimPretty has troubles with source code filter\"  ([#9384](https://github.com/nim-lang/Nim/issues/9384))- Fixed \"tfragment_gc test is flaky on OSX\"  ([#9421](https://github.com/nim-lang/Nim/issues/9421))- Fixed \"ansi color code templates fail to bind symbols\"  ([#9394](https://github.com/nim-lang/Nim/issues/9394))- Fixed \"SIGSEGV when converting `lines` to closure iterator, most likely caused by defer\"  ([#5321](https://github.com/nim-lang/Nim/issues/5321))- Fixed \"Compiler crash when creating a variant type\"  ([#6220](https://github.com/nim-lang/Nim/issues/6220))- Fixed \"old changelogs should be kept instead of erased\"  ([#9376](https://github.com/nim-lang/Nim/issues/9376))- Fixed \"Crash when closing an unopened file on debian 8.\"  ([#9456](https://github.com/nim-lang/Nim/issues/9456))- Fixed \"nimpretty joins regular and doc comment\"  ([#9400](https://github.com/nim-lang/Nim/issues/9400))- Fixed \"nimpretty changes indentation level of trailing comment\"  ([#9398](https://github.com/nim-lang/Nim/issues/9398))- Fixed \"Some bugs with nimpretty\"  ([#8078](https://github.com/nim-lang/Nim/issues/8078))- Fixed \"nimpretty not idempotent: keeps adding newlines below block comment\"  ([#9483](https://github.com/nim-lang/Nim/issues/9483))- Fixed \"nimpretty shouldn't format differently whether there's a top-level newline\"  ([#9484](https://github.com/nim-lang/Nim/issues/9484))- Fixed \"nimpretty shouldn't change file modif time if no changes => use os.updateFile\"  ([#9499](https://github.com/nim-lang/Nim/issues/9499))- Fixed \"nimpretty adds a space before type, ptr, ref, object in wrong places\"  ([#9504](https://github.com/nim-lang/Nim/issues/9504))- Fixed \"nimpretty badly indents block comment\"  ([#9500](https://github.com/nim-lang/Nim/issues/9500))- Fixed \"nimpretty wrongly adds empty newlines inside proc signature\"  ([#9506](https://github.com/nim-lang/Nim/issues/9506))- Fixed \"Duplicate definition in cpp codegen\"  ([#6986](https://github.com/nim-lang/Nim/issues/6986))- Fixed \"`nim doc strutils.nim` fails on 32 bit compiler with AssertionError on a RunnableExample\"  ([#9525](https://github.com/nim-lang/Nim/issues/9525))- Fixed \"using Selectors, Error: undeclared field: 'OSErrorCode'\"  ([#7667](https://github.com/nim-lang/Nim/issues/7667))- Fixed \"strutils.multiReplace() crashes if search string is \"\"\"  ([#9557](https://github.com/nim-lang/Nim/issues/9557))- Fixed \"Type which followed by a function and generated by a template will not shown in docs generated by `nim doc`\"  ([#9235](https://github.com/nim-lang/Nim/issues/9235))- Fixed \"Module docs: 2 suggestions...\"  ([#5525](https://github.com/nim-lang/Nim/issues/5525))- Fixed \"Missing docstrings are replaced with other text\"  ([#9169](https://github.com/nim-lang/Nim/issues/9169))- Fixed \"templates expand doc comments as documentation of other procedures\"  ([#9432](https://github.com/nim-lang/Nim/issues/9432))- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"  ([#9556](https://github.com/nim-lang/Nim/issues/9556))- Fixed \"Nim/compiler/pathutils.nim(226, 12) `canon\"/foo/../bar\" == \"/bar\"`  [AssertionError]\" ([#9507](https://github.com/nim-lang/Nim/issues/9507))- Fixed \"[Regression] Borrow stringify operator no longer works as expected\"  ([#9322](https://github.com/nim-lang/Nim/issues/9322))- Fixed \"[NimScript] Error: arguments can only be given if the '--run' option is selected\"  ([#9246](https://github.com/nim-lang/Nim/issues/9246))- Fixed \"nim check: `internal error: (filename: \"vmgen.nim\", line: 1119, column: 19)`\"  ([#9609](https://github.com/nim-lang/Nim/issues/9609))- Fixed \"`optInd` missing indent specification in grammar.txt\"  ([#9608](https://github.com/nim-lang/Nim/issues/9608))- Fixed \"nimpretty should hardcode indentation amount to 2 spaces\"  ([#9502](https://github.com/nim-lang/Nim/issues/9502))- Fixed \"Nimpretty adds instead of removes incorrect spacing inside backticks\"  ([#9673](https://github.com/nim-lang/Nim/issues/9673))- Fixed \"Compiler segfault (stack overflow) compiling code on 0.19.0 that works on 0.18.0\"  ([#9694](https://github.com/nim-lang/Nim/issues/9694))", "content_with_meta": "---\ntitle: \"Version 0.19.2 released\"\nauthor: The Nim Team\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.2, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\nThis is mostly a bugfix release of version 0.19.0.\nIt adds RISC-V support and there are no breaking changes.\nThe most important bugfixes are:\n\n- ``spawn`` can handle the empty seqs/strings that are internally\n  represented as ``nil``.\n- The most pressing bugs of the documentation generator have been fixed.\n- async streaming of the httpclient has been fixed.\n\n\n## Installing 0.19.2\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.2 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n### Compiler changes\n\n- Added support for the RISC-V 64 bit architecture named riscv64\n(e.g. [HiFive](https://www.sifive.com/boards/hifive-unleashed))\n\n### Bugfixes\n\n- Fixed \"Nim 0.19.0 docs have incorrect Source/Edit links\"\n  ([#9083](https://github.com/nim-lang/Nim/issues/9083))\n- Fixed \"Json: compilation fails with aliased type\"\n  ([#9111](https://github.com/nim-lang/Nim/issues/9111))\n- Fixed \"https://nim-lang.org/docs/nre.html gives 404 error\"\n  ([#9119](https://github.com/nim-lang/Nim/issues/9119))\n- Fixed \"Leaving `\\\\` at the end of a path in `copyDir` removes every file's first char\"\n  ([#9126](https://github.com/nim-lang/Nim/issues/9126))\n- Fixed \"nim doc SIGSEGV: Illegal storage access.\"\n  ([#9140](https://github.com/nim-lang/Nim/issues/9140))\n- Fixed \"[doc] List of broken links in the doc site\"\n  ([#9109](https://github.com/nim-lang/Nim/issues/9109))\n- Fixed \"Fix incorrect examples in nre docs\"\n  ([#9053](https://github.com/nim-lang/Nim/issues/9053))\n- Fixed \"Clean up root of repo and release archives\"\n  ([#4934](https://github.com/nim-lang/Nim/issues/4934))\n- Fixed \"Concept/converter/generics-related compiler crash\"\n  ([#7351](https://github.com/nim-lang/Nim/issues/7351))\n- Fixed \"converter + concept causes compiler to quit without error\"\n  ([#6249](https://github.com/nim-lang/Nim/issues/6249))\n- Fixed \"Error: internal error\"\n  ([#6533](https://github.com/nim-lang/Nim/issues/6533))\n- Fixed \"Methods break static[T] (internal error: nesting too deep)\"\n  ([#5479](https://github.com/nim-lang/Nim/issues/5479))\n- Fixed \"Memory error when checking if a variable is a string in concept\"\n  ([#7092](https://github.com/nim-lang/Nim/issues/7092))\n- Fixed \"Internal error when using array of procs\"\n  ([#5015](https://github.com/nim-lang/Nim/issues/5015))\n- Fixed \"[Regression] Compiler crash on proc with static, used to compile in nim 0.16\"\n  ([#5868](https://github.com/nim-lang/Nim/issues/5868))\n- Fixed \"fixes/8099\"\n  ([#8451](https://github.com/nim-lang/Nim/issues/8451))\n- Fixed \"distinct generic typeclass not treated as distinct\"\n  ([#4435](https://github.com/nim-lang/Nim/issues/4435))\n- Fixed \"multiple dynlib pragmas with function calls conflict with each other causing link time error\"\n  ([#9222](https://github.com/nim-lang/Nim/issues/9222))\n- Fixed \"\\0 in comment replaced with 0 in docs\"\n  ([#8841](https://github.com/nim-lang/Nim/issues/8841))\n- Fixed \"Async readAll in httpclient produces garbled output.\"\n  ([#8994](https://github.com/nim-lang/Nim/issues/8994))\n- Fixed \"`runnableExamples` should be run by `nim doc` even if symbol is not public\"\n  ([#9216](https://github.com/nim-lang/Nim/issues/9216))\n- Fixed \"[regression] project `config.nims` not being read anymore\"\n  ([#9264](https://github.com/nim-lang/Nim/issues/9264))\n- Fixed \"Using iterator within another iterator fails\"\n  ([#3819](https://github.com/nim-lang/Nim/issues/3819))\n- Fixed \"`nim js -o:dirname main.nim` writes nothing, and no error shown\"\n  ([#9154](https://github.com/nim-lang/Nim/issues/9154))\n- Fixed \"devel docs in nim-lang.github.io `Source` links point to master instead of devel\"\n  ([#9295](https://github.com/nim-lang/Nim/issues/9295))\n- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"\n  ([#9306](https://github.com/nim-lang/Nim/issues/9306))\n- Fixed \"counting the empty substring in a string results in infinite loop\"\n  ([#8919](https://github.com/nim-lang/Nim/issues/8919))\n- Fixed \"[nimpretty] raw strings are transformed into normal strings\"\n  ([#9236](https://github.com/nim-lang/Nim/issues/9236))\n- Fixed \"[nimpretty] proc is transfered to incorrect code\"\n  ([#8626](https://github.com/nim-lang/Nim/issues/8626))\n- Fixed \"[nimpretty] Additional new line is added with each format\"\n  ([#9144](https://github.com/nim-lang/Nim/issues/9144))\n- Fixed \"\"%NIM%/config/nim.cfg\" is not being read\"\n  ([#9244](https://github.com/nim-lang/Nim/issues/9244))\n- Fixed \"Illegal capture on async proc (except when the argument is `seq`)\"\n  ([#2361](https://github.com/nim-lang/Nim/issues/2361))\n- Fixed \"Jsondoc0 doesn't output module comments.\"\n  ([#9364](https://github.com/nim-lang/Nim/issues/9364))\n- Fixed \"NimPretty has troubles with source code filter\"\n  ([#9384](https://github.com/nim-lang/Nim/issues/9384))\n- Fixed \"tfragment_gc test is flaky on OSX\"\n  ([#9421](https://github.com/nim-lang/Nim/issues/9421))\n\n- Fixed \"ansi color code templates fail to bind symbols\"\n  ([#9394](https://github.com/nim-lang/Nim/issues/9394))\n- Fixed \"SIGSEGV when converting `lines` to closure iterator, most likely caused by defer\"\n  ([#5321](https://github.com/nim-lang/Nim/issues/5321))\n- Fixed \"Compiler crash when creating a variant type\"\n  ([#6220](https://github.com/nim-lang/Nim/issues/6220))\n- Fixed \"old changelogs should be kept instead of erased\"\n  ([#9376](https://github.com/nim-lang/Nim/issues/9376))\n\n- Fixed \"Crash when closing an unopened file on debian 8.\"\n  ([#9456](https://github.com/nim-lang/Nim/issues/9456))\n- Fixed \"nimpretty joins regular and doc comment\"\n  ([#9400](https://github.com/nim-lang/Nim/issues/9400))\n- Fixed \"nimpretty changes indentation level of trailing comment\"\n  ([#9398](https://github.com/nim-lang/Nim/issues/9398))\n- Fixed \"Some bugs with nimpretty\"\n  ([#8078](https://github.com/nim-lang/Nim/issues/8078))\n- Fixed \"nimpretty not idempotent: keeps adding newlines below block comment\"\n  ([#9483](https://github.com/nim-lang/Nim/issues/9483))\n- Fixed \"nimpretty shouldn't format differently whether there's a top-level newline\"\n  ([#9484](https://github.com/nim-lang/Nim/issues/9484))\n- Fixed \"nimpretty shouldn't change file modif time if no changes => use os.updateFile\"\n  ([#9499](https://github.com/nim-lang/Nim/issues/9499))\n- Fixed \"nimpretty adds a space before type, ptr, ref, object in wrong places\"\n  ([#9504](https://github.com/nim-lang/Nim/issues/9504))\n- Fixed \"nimpretty badly indents block comment\"\n  ([#9500](https://github.com/nim-lang/Nim/issues/9500))\n- Fixed \"nimpretty wrongly adds empty newlines inside proc signature\"\n  ([#9506](https://github.com/nim-lang/Nim/issues/9506))\n- Fixed \"Duplicate definition in cpp codegen\"\n  ([#6986](https://github.com/nim-lang/Nim/issues/6986))\n- Fixed \"`nim doc strutils.nim` fails on 32 bit compiler with AssertionError on a RunnableExample\"\n  ([#9525](https://github.com/nim-lang/Nim/issues/9525))\n- Fixed \"using Selectors, Error: undeclared field: 'OSErrorCode'\"\n  ([#7667](https://github.com/nim-lang/Nim/issues/7667))\n\n- Fixed \"strutils.multiReplace() crashes if search string is \"\"\"\n  ([#9557](https://github.com/nim-lang/Nim/issues/9557))\n- Fixed \"Type which followed by a function and generated by a template will not shown in docs generated by `nim doc`\"\n  ([#9235](https://github.com/nim-lang/Nim/issues/9235))\n- Fixed \"Module docs: 2 suggestions...\"\n  ([#5525](https://github.com/nim-lang/Nim/issues/5525))\n- Fixed \"Missing docstrings are replaced with other text\"\n  ([#9169](https://github.com/nim-lang/Nim/issues/9169))\n- Fixed \"templates expand doc comments as documentation of other procedures\"\n  ([#9432](https://github.com/nim-lang/Nim/issues/9432))\n- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"\n  ([#9556](https://github.com/nim-lang/Nim/issues/9556))\n- Fixed \"Nim/compiler/pathutils.nim(226, 12) `canon\"/foo/../bar\" == \"/bar\"`  [AssertionError]\" ([#9507](https://github.com/nim-lang/Nim/issues/9507))\n\n- Fixed \"[Regression] Borrow stringify operator no longer works as expected\"\n  ([#9322](https://github.com/nim-lang/Nim/issues/9322))\n- Fixed \"[NimScript] Error: arguments can only be given if the '--run' option is selected\"\n  ([#9246](https://github.com/nim-lang/Nim/issues/9246))\n- Fixed \"nim check: `internal error: (filename: \"vmgen.nim\", line: 1119, column: 19)`\"\n  ([#9609](https://github.com/nim-lang/Nim/issues/9609))\n- Fixed \"`optInd` missing indent specification in grammar.txt\"\n  ([#9608](https://github.com/nim-lang/Nim/issues/9608))\n- Fixed \"nimpretty should hardcode indentation amount to 2 spaces\"\n  ([#9502](https://github.com/nim-lang/Nim/issues/9502))\n- Fixed \"Nimpretty adds instead of removes incorrect spacing inside backticks\"\n  ([#9673](https://github.com/nim-lang/Nim/issues/9673))\n- Fixed \"Compiler segfault (stack overflow) compiling code on 0.19.0 that works on 0.18.0\"\n  ([#9694](https://github.com/nim-lang/Nim/issues/9694))\n", "tags": [""], "published_at": "", "id": 57}, {"title": "Nim in 2018: A short recap", "slug": "nim-in-a-short-recap", "content": "There were several big news in the Nim world in 2018 -- two new major releases, partnership with Status, and much more.But let us go chronologically.## FOSDEM 2018 participationThe first week of February is reserved for FOSDEM, where members of Nim core development team were promoting the newly published book [Nim in Action](https://book.picheta.me/), selling Nim T-shirts, and meeting with Nim developers.## Version 0.18In March 2018, [version 0.18](https://nim-lang.org/blog/2018/03/01/version-0180-released.html) has been released.With more than 1300 commits since the previous version, it was the biggest release of Nim so far.It introduced [`strformat` module](https://nim-lang.org/docs/strformat.html) with `fmt` and `&` operators for formatted string literals, the ability to have testable documentation examples with `runnableExamples`, and numerous `async` improvements.The TLSF algorithm has been implemented to reduce memory fragmentation, which made `alloc` and `dealloc` O(1) operations.## Partnership with Status.imIn August the partnership with [Status](https://status.im/) was announced.The Status team has chosen the Nim programming language as a base for the implementation of a sharding client for Ethereum, named [Nimbus](https://github.com/status-im/nimbus).With this partnership Status will support the Nim team with funding and resources needed to stay focused on the development of the Nim programming language.This allowed hiring two full-time developers, tasked with fixing bugs, responding to issues, and developing the compiler, the standard library and the tooling.## Version 0.19Version 0.19, [released in September](https://nim-lang.org/blog/2018/09/26/version-0190-released.html), took the crown from 0.18 as the biggest release yet, with more than 1400 new commits.The biggest change introduced is that the `nil` state for strings and sequences is gone -- the default value for these are `\"\"` and `@[]` (an empty string, and an empty sequence, respectively).This eliminates a major confusion-point for beginners, and makes Nim more pleasant for everybody.This version introduced `experimental` as a pragma and a command line switch that can enable specific language extensions (it is not an all-or-nothing switch, like before).Other notable additions include `func` as an alias for a procedure with no side effects, supporting `except` in the `export` statement, so called \"for-loop macros\", `async` working with exception handling (now it is possible to use `await` in a `try` statement), and more.## HacktoberfestIn October our community participated in Hacktoberfest, resulting in impressive 275 closed issues and 160 merged pull requests -- more detailed documentation, improved tests, general cleanup, and much more.These improvements will be part of 0.20 release, and some of them are already backported to the latest bugfix release -- [0.19.2](https://nim-lang.org/blog/2018/12/31/version-0192-released.html).## Nim in 2019If you're interested in seeing and hearing what has been done in 2018 directly from the core developers, take a look at [Nim Development Blog 2018](https://www.youtube.com/watch?v=xUsAKstP-AQ) on Youtube.We have switched to a different release model, with a stable branch (currently that's v0.19.x) which receives bugfixes, it is aimed at daily usage, and Nimble package development should target this version; and a devel branch which will become a new major release -- v0.20, and serve as a release candidate for v1.0.In 2019, the Nim team will continue to work towards that goal, which will mark the end of breaking changes to Nim.We are focusing on the main areas shown in [Nim community survey 2018](https://nim-lang.org/blog/2018/10/27/community-survey-results-2018.html) as needed before Nim v1.0:* better documentation* better standard library* stabilization* implementing destructors and move semantics for a more flexible concurrency model and reduced memory usageCommunity help is, as always, welcome.Report [issues and bugs](https://github.com/nim-lang/nim/issues), make [pull requests](https://github.com/nim-lang/nim/pulls), consider [donating](https://nim-lang.org/donate.html) or becoming a [sponsor](https://nim-lang.org/sponsors.html).", "content_with_meta": "---\ntitle: \"Nim in 2018: A short recap\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThere were several big news in the Nim world in 2018 -- two new major releases, partnership with Status, and much more.\nBut let us go chronologically.\n\n\n## FOSDEM 2018 participation\n\nThe first week of February is reserved for FOSDEM, where members of Nim core development team were promoting the newly published book [Nim in Action](https://book.picheta.me/), selling Nim T-shirts, and meeting with Nim developers.\n\n\n## Version 0.18\n\nIn March 2018, [version 0.18](https://nim-lang.org/blog/2018/03/01/version-0180-released.html) has been released.\nWith more than 1300 commits since the previous version, it was the biggest release of Nim so far.\n\nIt introduced [`strformat` module](https://nim-lang.org/docs/strformat.html) with `fmt` and `&` operators for formatted string literals, the ability to have testable documentation examples with `runnableExamples`, and numerous `async` improvements.\nThe TLSF algorithm has been implemented to reduce memory fragmentation, which made `alloc` and `dealloc` O(1) operations.\n\n\n## Partnership with Status.im\n\nIn August the partnership with [Status](https://status.im/) was announced.\n\nThe Status team has chosen the Nim programming language as a base for the implementation of a sharding client for Ethereum, named [Nimbus](https://github.com/status-im/nimbus).\nWith this partnership Status will support the Nim team with funding and resources needed to stay focused on the development of the Nim programming language.\n\nThis allowed hiring two full-time developers, tasked with fixing bugs, responding to issues, and developing the compiler, the standard library and the tooling.\n\n\n## Version 0.19\n\nVersion 0.19, [released in September](https://nim-lang.org/blog/2018/09/26/version-0190-released.html), took the crown from 0.18 as the biggest release yet, with more than 1400 new commits.\n\nThe biggest change introduced is that the `nil` state for strings and sequences is gone -- the default value for these are `\"\"` and `@[]` (an empty string, and an empty sequence, respectively).\nThis eliminates a major confusion-point for beginners, and makes Nim more pleasant for everybody.\n\nThis version introduced `experimental` as a pragma and a command line switch that can enable specific language extensions (it is not an all-or-nothing switch, like before).\nOther notable additions include `func` as an alias for a procedure with no side effects, supporting `except` in the `export` statement, so called \"for-loop macros\", `async` working with exception handling (now it is possible to use `await` in a `try` statement), and more.\n\n\n## Hacktoberfest\n\nIn October our community participated in Hacktoberfest, resulting in impressive 275 closed issues and 160 merged pull requests -- more detailed documentation, improved tests, general cleanup, and much more.\nThese improvements will be part of 0.20 release, and some of them are already backported to the latest bugfix release -- [0.19.2](https://nim-lang.org/blog/2018/12/31/version-0192-released.html).\n\n\n## Nim in 2019\n\nIf you're interested in seeing and hearing what has been done in 2018 directly from the core developers, take a look at [Nim Development Blog 2018](https://www.youtube.com/watch?v=xUsAKstP-AQ) on Youtube.\n\nWe have switched to a different release model, with a stable branch (currently that's v0.19.x) which receives bugfixes, it is aimed at daily usage, and Nimble package development should target this version; and a devel branch which will become a new major release -- v0.20, and serve as a release candidate for v1.0.\n\nIn 2019, the Nim team will continue to work towards that goal, which will mark the end of breaking changes to Nim.\nWe are focusing on the main areas shown in [Nim community survey 2018](https://nim-lang.org/blog/2018/10/27/community-survey-results-2018.html) as needed before Nim v1.0:\n* better documentation\n* better standard library\n* stabilization\n* implementing destructors and move semantics for a more flexible concurrency model and reduced memory usage\n\nCommunity help is, as always, welcome.\nReport [issues and bugs](https://github.com/nim-lang/nim/issues), make [pull requests](https://github.com/nim-lang/nim/pulls), consider [donating](https://nim-lang.org/donate.html) or becoming a [sponsor](https://nim-lang.org/sponsors.html).\n", "tags": ["nim", "python"], "published_at": "", "id": 58}, {"title": "Version 0.19.4 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.19.4, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.This is mostly a bugfix release of version 0.19.2.There are no breaking changes.The most important bugfixes are:- The mark&sweep GC had a serious performance regression that has been fixed.- The produced tarballs now support `koch tests`.- Json escaping has been fixed.- The documentation for `async` procs was missing, fixed.## Installing 0.19.4If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.19.4 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim by following the instructions on our[install](https://nim-lang.org/install.html) page.### Bugfixes- Fixed \"Latest HEAD segfaults when compiling Aporia\"  ([#9889](https://github.com/nim-lang/Nim/issues/9889))- Fixed \"smtp module doesn't support threads.\"  ([#9728](https://github.com/nim-lang/Nim/issues/9728))- Fixed \"toInt doesn't raise an exception\"  ([#2764](https://github.com/nim-lang/Nim/issues/2764))- Fixed \"allow `import` inside `block`: makes N runnableExamples run N x faster, minimizes scope pollution\"  ([#9300](https://github.com/nim-lang/Nim/issues/9300))- Fixed \"regression: CI failing `Error: unhandled exception: cannot open: /Users/travis/.cache/nim/docgen_sample_d/runnableExamples/docgen_sample_examples.nim [IOError]`\"  ([#10188](https://github.com/nim-lang/Nim/issues/10188))- Fixed \"Discrepancy in Documentation About 'f128 Type-Suffix\"  ([#10213](https://github.com/nim-lang/Nim/issues/10213))- Fixed \"Performance regression with --gc:markandsweep\"  ([#10271](https://github.com/nim-lang/Nim/issues/10271))- Fixed \"cannot call template/macros with varargs[typed] to varargs[untyped]\"  ([#10075](https://github.com/nim-lang/Nim/issues/10075))- Fixed \"--embedsrc does not work on macos\"  ([#10263](https://github.com/nim-lang/Nim/issues/10263))- Fixed \"terminal.nim colored output is not GCSAFE.\"  ([#8294](https://github.com/nim-lang/Nim/issues/8294))- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"  ([#9556](https://github.com/nim-lang/Nim/issues/9556))- Fixed \"\"contributing\" is listed as a module on theindex\"  ([#10287](https://github.com/nim-lang/Nim/issues/10287))- Fixed \"[Regression] converter to string leads fail to compile  on 0.19\"  ([#9149](https://github.com/nim-lang/Nim/issues/9149))- Fixed \"oids counter starts at zero; spec says it should be random\"  ([#2796](https://github.com/nim-lang/Nim/issues/2796))", "content_with_meta": "---\ntitle: \"Version 0.19.4 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.4, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\nThis is mostly a bugfix release of version 0.19.2.\nThere are no breaking changes.\nThe most important bugfixes are:\n\n- The mark&sweep GC had a serious performance regression that has been fixed.\n- The produced tarballs now support `koch tests`.\n- Json escaping has been fixed.\n- The documentation for `async` procs was missing, fixed.\n\n\n## Installing 0.19.4\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.4 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n### Bugfixes\n\n- Fixed \"Latest HEAD segfaults when compiling Aporia\"\n  ([#9889](https://github.com/nim-lang/Nim/issues/9889))\n- Fixed \"smtp module doesn't support threads.\"\n  ([#9728](https://github.com/nim-lang/Nim/issues/9728))\n- Fixed \"toInt doesn't raise an exception\"\n  ([#2764](https://github.com/nim-lang/Nim/issues/2764))\n- Fixed \"allow `import` inside `block`: makes N runnableExamples run N x faster, minimizes scope pollution\"\n  ([#9300](https://github.com/nim-lang/Nim/issues/9300))\n- Fixed \"regression: CI failing `Error: unhandled exception: cannot open: /Users/travis/.cache/nim/docgen_sample_d/runnableExamples/docgen_sample_examples.nim [IOError]`\"\n  ([#10188](https://github.com/nim-lang/Nim/issues/10188))\n- Fixed \"Discrepancy in Documentation About 'f128 Type-Suffix\"\n  ([#10213](https://github.com/nim-lang/Nim/issues/10213))\n- Fixed \"Performance regression with --gc:markandsweep\"\n  ([#10271](https://github.com/nim-lang/Nim/issues/10271))\n- Fixed \"cannot call template/macros with varargs[typed] to varargs[untyped]\"\n  ([#10075](https://github.com/nim-lang/Nim/issues/10075))\n- Fixed \"--embedsrc does not work on macos\"\n  ([#10263](https://github.com/nim-lang/Nim/issues/10263))\n- Fixed \"terminal.nim colored output is not GCSAFE.\"\n  ([#8294](https://github.com/nim-lang/Nim/issues/8294))\n- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"\n  ([#9556](https://github.com/nim-lang/Nim/issues/9556))\n- Fixed \"\"contributing\" is listed as a module on theindex\"\n  ([#10287](https://github.com/nim-lang/Nim/issues/10287))\n- Fixed \"[Regression] converter to string leads fail to compile  on 0.19\"\n  ([#9149](https://github.com/nim-lang/Nim/issues/9149))\n- Fixed \"oids counter starts at zero; spec says it should be random\"\n  ([#2796](https://github.com/nim-lang/Nim/issues/2796))", "tags": ["nim", "python"], "published_at": "", "id": 59}, {"title": "Version 0.19.6 released", "slug": "version-released", "content": "The Nim team is happy to announce that the latest release of Nim,version 0.19.6, is now available. Nim is a systems programming language thatfocuses on performance, portability and expressiveness.This is the third bugfix release of version 0.19.There are no breaking changes.The most important bugfixes are:- Boolean logic at compile time is now correct.- Bitwise operations on signed integers in VM are fixed.- Fixed object self-assignment order of evaluation.- Compiler no longer crashes with generic types and static generic parameters.- Fixed raising generic exceptions.## Installing 0.19.6If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.19.6 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim by following the instructions on our[install](https://nim-lang.org/install.html) page.### Bugfixes- Fixed \"32 bit signed xor broken on VM\"  ([#10482](https://github.com/nim-lang/Nim/issues/10482))- Fixed \"SetMaxPoolSize not heeded\"  ([#10584](https://github.com/nim-lang/Nim/issues/10584))- Fixed \"uint inplace add in if branch is omitted when compiled to JS\"  ([#10697](https://github.com/nim-lang/Nim/issues/10697))- Fixed \"Booleans Work Wrong in Compile-time\"  ([#10886](https://github.com/nim-lang/Nim/issues/10886))- Fixed \"Bug in setTerminate()\"  ([#10765](https://github.com/nim-lang/Nim/issues/10765))- Fixed \"Cannot raise generic exception\"  ([#7845](https://github.com/nim-lang/Nim/issues/7845))- Fixed \"Nim string definition conflicts with other C/C++ instances\"  ([#10907](https://github.com/nim-lang/Nim/issues/10907))- Fixed \"std/json fails to escape most non-printables, breaking generation and parsing\"  ([#10541](https://github.com/nim-lang/Nim/issues/10541))- Fixed \"object self-assignment order-of-evaluation broken\"  ([#9844](https://github.com/nim-lang/Nim/issues/9844))- Fixed \"Compiler crash with generic types and static generic parameters\"  ([#7569](https://github.com/nim-lang/Nim/issues/7569))", "content_with_meta": "---\ntitle: \"Version 0.19.6 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.6, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\nThis is the third bugfix release of version 0.19.\nThere are no breaking changes.\nThe most important bugfixes are:\n\n- Boolean logic at compile time is now correct.\n- Bitwise operations on signed integers in VM are fixed.\n- Fixed object self-assignment order of evaluation.\n- Compiler no longer crashes with generic types and static generic parameters.\n- Fixed raising generic exceptions.\n\n\n## Installing 0.19.6\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.6 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n### Bugfixes\n\n- Fixed \"32 bit signed xor broken on VM\"\n  ([#10482](https://github.com/nim-lang/Nim/issues/10482))\n- Fixed \"SetMaxPoolSize not heeded\"\n  ([#10584](https://github.com/nim-lang/Nim/issues/10584))\n- Fixed \"uint inplace add in if branch is omitted when compiled to JS\"\n  ([#10697](https://github.com/nim-lang/Nim/issues/10697))\n- Fixed \"Booleans Work Wrong in Compile-time\"\n  ([#10886](https://github.com/nim-lang/Nim/issues/10886))\n- Fixed \"Bug in setTerminate()\"\n  ([#10765](https://github.com/nim-lang/Nim/issues/10765))\n- Fixed \"Cannot raise generic exception\"\n  ([#7845](https://github.com/nim-lang/Nim/issues/7845))\n- Fixed \"Nim string definition conflicts with other C/C++ instances\"\n  ([#10907](https://github.com/nim-lang/Nim/issues/10907))\n- Fixed \"std/json fails to escape most non-printables, breaking generation and parsing\"\n  ([#10541](https://github.com/nim-lang/Nim/issues/10541))\n- Fixed \"object self-assignment order-of-evaluation broken\"\n  ([#9844](https://github.com/nim-lang/Nim/issues/9844))\n- Fixed \"Compiler crash with generic types and static generic parameters\"\n  ([#7569](https://github.com/nim-lang/Nim/issues/7569))\n", "tags": ["nim", "python"], "published_at": "", "id": 60}, {"title": "Version 0.20.0 released", "slug": "version-released", "content": "We are very proud to announce Nim version 0.20.This is a massive release, both literally and figuratively.It contains more than 1,000 commits *and* it marks our release candidate for version 1.0!Version 0.20 introduces a number of breaking changes required for version 1.0.These are changes that we feel have been necessary to include in Nim 1.0 and we currently have no plans for any further breaking changes.Version 0.20 is effectively Nim 1.0 RC1.Why not just release v1.0? We want to give the community a chance to test 0.20.0 and find bugs that *may* require breaking changes.This is unlikely, but may require further release candidates.Make no mistake, this release represents what we consider Nim 1.0, we have been working towards this milestone for many years and are incredibly excited to reach it.# The stability guaranteeA 1.0 release means that once either Nim 0.20.0 is promoted to 1.0 status, or another release candidate is, there will no longer be any breaking changes made.Version 1.0 will become a long-term supported stable release that will only receive bug fixes and new features in the future, as long as they don’t break backwards compatibility.The 1.0.x branch will receive bug fixes for as long as there is demand for them.New features (which do not break backwards compatibility) will continue in steadily advancing 1.x branches.Our goal is to make sure that code which compiled under Nim 1.0 continues to compile under any stable Nim 1.x version.## What’s included under the stability guarantee?Backwards compatibility covers only the stable fragment of the language, as defined by the manual.The compiler still implements experimental features which are documented in the newly written[“experimental manual”](https://nim-lang.org/docs/manual_experimental.html), these features are subject to changes which may be backwards incompatible, some of the features included under this umbrella are concepts, the do notation and a few others.Be wary of using these features in production, but do get in touch with us if you want to learn more about our plans regarding them.The standard library is also covered, we will continue to deprecate procedures if we must, but they will remain supported throughout the 1.x version series.## Exceptions to the ruleWe of course have to concede that there are exceptions.In certain serious cases, like for example when a security vulnerability is discovered in the stdlib, we reserve the right to break code which uses it.# Installing 0.20.0If you have installed a previous version of Nim using ``choosenim``,getting Nim 0.20.0 is as easy as:```bash$ choosenim update stable```If you don't have it already, you can get ``choosenim`` by following[these instructions](https://github.com/dom96/choosenim) or you can installNim by following the instructions on our[install](https://nim-lang.org/install.html) page.## Nimble 0.10.2This release includes a brand new version of Nimble.See [Nimble changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0102---03062019).## Contributors to v0.20Our contributors are amazing, and there is [far too many](https://github.com/nim-lang/Nim/graphs/contributors?from=2018-09-26&to=2019-06-06&type=c) to list here.Big thanks to all of you, we couldn’t have pulled off this release without you!# New featuresVersion 0.20 is positively jam packed with features.Here is a selection of our favourites:## `not` is always a unary operator```nimlet a = false# v0.19:assert not a # Error: type mismatch: got <proc (cond: untyped, msg: string): typed, bool>assert(not a) # workaround# v0.20:assert not a```## Stricter compile time checks for integer and float conversions```nim# v0.19:const b = uint16(-1)echo b # 65535# v0.20:const b = uint16(-1)# Error: -1 can't be converted to uint16const c = not uint16(0)echo c # 65535```## Tuple unpacking for constant and for loop variables```nimconst (d, e) = (7, \"eight\")# v0.19: Error: identifier expected, but got '('# v0.20:echo d # 7echo e # eightlet f = @[(51, 10), (23, 25)]for (x, y) in f: # v0.19: Error: identifier expected, but got '('  echo x + y# v0.20:# 61# 48```## Hash sets and tables are initialized by default```nimimport sets, tablesvar s: HashSet[int]s.incl(5)# v0.19: `isValid(s)` Error: unhandled exception: The set needs to be initialized. [AssertionError]# v0.20:echo s # {5}var t: Table[char, int]t['a'] = 10# v0.19: Error: unhandled exception: index out of bounds [IndexError]# v0.20:echo t # {'a': 10}```## Better error message for case-statements```nimtype  MyEnum = enum    first    second    third    fourthproc foo(x: MyEnum): int =  case x  of first: 1  of second: 2  of third: 3  of fourth: 4  else: 99# v0.19: compiles# v0.20: Error: invalid else, all cases are already coveredproc bar(x: MyEnum): int =  case x  of first: 1  of third: 3# v0.19: Error: not all cases are covered# v0.20: Error: not all cases are covered; missing: {second, fourth}```## The length of a table must not change during iteration```nimimport tablesvar xs = {1: \"one\", 2: \"two\", 3: \"three\"}.toTablefor x in xs.keys:  if x mod 2 == 0:    xs[10*x] = \"a lot\"echo xs# v0.19: {200: \"a lot\", 1: \"one\", 2: \"two\", 3: \"three\", 20: \"a lot\"}# v0.20: Error: unhandled exception: the length of the table changed while iterating over it [AssertionError]```## Better error message for index out of bounds```nimlet a = [10, 20, 30]echo a[5]# v0.19: Error: index out of bounds# v0.20: Error: index 5 not in 0 .. 2```# Changelog## Changes affecting backwards compatibility- `shr` is now sign preserving. Use `-d:nimOldShiftRight` to enable  the old behavior globally.- The ``isLower``, ``isUpper`` family of procs in strutils/unicode  operating on **strings** have been  deprecated since it was unclear what these do. Note that the much more  useful procs that operate on ``char`` or ``Rune`` are not affected.- `strutils.editDistance` has been deprecated,  use `editdistance.editDistance` or `editdistance.editDistanceAscii`  instead.- The OpenMP parallel iterator \\``||`\\` now supports any `#pragma omp directive`  and not just `#pragma omp parallel for`. See  [OpenMP documentation](https://www.openmp.org/wp-content/uploads/OpenMP-4.5-1115-CPP-web.pdf).  The default annotation is `parallel for`, if you used OpenMP without annotation  the change is transparent, if you used annotations you will have to prefix  your previous annotations with `parallel for`.  Furthermore, an overload with positive stepping is available.- The `unchecked` pragma was removed, instead use `system.UncheckedArray`.- The undocumented ``#? strongSpaces`` parsing mode has been removed.- The `not` operator is now always a unary operator, this means that code like  ``assert not isFalse(3)`` compiles.- `getImpl` on a `var` or `let` symbol will now return the full `IdentDefs`  tree from the symbol declaration instead of just the initializer portion.- Methods are now ordinary \"single\" methods, only the first parameter is  used to select the variant at runtime. For backwards compatibility  use the new `--multimethods:on` switch.- Generic methods are now deprecated; they never worked well.- Compile time checks for integer and float conversions are now stricter.  For example, `const x = uint32(-1)` now gives a compile time error instead  of being equivalent to `const x = 0xFFFFFFFF'u32`.- Using `typed` as the result type in templates/macros now means  \"expression with a type\". The old meaning of `typed` is preserved  as `void` or no result type at all.- A bug allowed `macro foo(): int = 123` to compile even though a  macro has to return a `NimNode`. This has been fixed.- With the exception of `uint` and `uint64`, conversion to unsigned types  are now range checked during runtime.- Macro arguments of type `typedesc` are now passed to the macro as  `NimNode` like every other type except `static`. Use `typed` for a  behavior that is identical in new and old  Nim. See the RFC [Pass typedesc as NimNode to macros](https://github.com/nim-lang/RFCs/issues/148)  for more details.### Breaking changes in the standard library- `osproc.execProcess` now also takes a `workingDir` parameter.- `std/sha1.secureHash` now accepts `openArray[char]`, not `string`. (Former   successful matches should keep working, though former failures will not.)- `options.UnpackError` is no longer a ref type and inherits from `system.Defect`  instead of `system.ValueError`.- `system.ValueError` now inherits from `system.CatchableError` instead of `system.Defect`.- The procs `parseutils.parseBiggestInt`, `parseutils.parseInt`,  `parseutils.parseBiggestUInt` and `parseutils.parseUInt` now raise a  `ValueError` when the parsed integer is outside of the valid range.  Previously they sometimes raised an `OverflowError` and sometimes they  returned `0`.- The procs `parseutils.parseBin`, `parseutils.parseOct` and `parseutils.parseHex`  were not clearing their `var` parameter `number` and used to push its value to  the left when storing the parsed string into it. Now they always set the value  of the parameter to `0` before storing the result of the parsing, unless the  string to parse is not valid (then the value of `number` is not changed).- `streams.StreamObject` now restricts its fields to only raise `system.Defect`,  `system.IOError` and `system.OSError`.  This change only affects custom stream implementations.- nre's `RegexMatch.{captureBounds,captures}[]`  no longer return `Option` or  `nil`/`\"\"`, respectively. Use the newly added `n in p.captures` method to  check if a group is captured, otherwise you'll receive an exception.- nre's `RegexMatch.{captureBounds,captures}.toTable` no longer accept a  default parameter. Instead uncaptured entries are left empty. Use  `Table.getOrDefault()` if you need defaults.- nre's `RegexMatch.captures.{items,toSeq}` now returns an `Option[string]`  instead of a `string`. With the removal of `nil` strings, this is the only  way to indicate a missing match. Inside your loops, instead  of `capture == \"\"` or `capture == nil`, use `capture.isSome` to check if a capture is  present, and `capture.get` to get its value.- nre's `replace()` no longer throws `ValueError` when the replacement string  has missing captures. It instead throws `KeyError` for named captures, and  `IndexError` for unnamed captures. This is consistent with  `RegexMatch.{captureBounds,captures}[]`.- `splitFile` now correctly handles edge cases, see #10047.- `isNil` is no longer false for undefined in the JavaScript backend:  now it's true for both nil and undefined.  Use `isNull` or `isUndefined` if you need exact equality:  `isNil` is consistent with `===`, `isNull` and `isUndefined` with `==`.- several deprecated modules were removed: `ssl`, `matchers`, `httpserver`,  `unsigned`, `actors`, `parseurl`- two poorly documented and not used modules (`subexes`, `scgi`) were moved to  graveyard (they are available as Nimble packages)- procs `string.add(int)` and `string.add(float)` which implicitly convert  ints and floats to string have been deprecated.  Use `string.addInt(int)` and `string.addFloat(float)` instead.- ``case object`` branch transitions via ``system.reset`` are deprecated.  Compile your code with ``-d:nimOldCaseObjects`` for a transition period.- base64 module: The default parameter `newLine` for the `encode` procs  was changed from `\"\\13\\10\"` to the empty string `\"\"`.### Breaking changes in the compiler- The compiler now implements the \"generic symbol prepass\" for `when` statements  in generics, see bug #8603. This means that code like this does not compile  anymore:```nimproc enumToString*(enums: openArray[enum]): string =  # typo: 'e' instead 'enums'  when e.low.ord >= 0 and e.high.ord < 256:    result = newString(enums.len)  else:    result = newString(enums.len * 2)```- ``discard x`` is now illegal when `x` is a function symbol.- Implicit imports via ``--import: module`` in a config file are now restricted  to the main package.## Library additions- There is a new stdlib module `std/editdistance` as a replacement for the  deprecated `strutils.editDistance`.- There is a new stdlib module `std/wordwrap` as a replacement for the  deprecated `strutils.wordwrap`.- Added `split`, `splitWhitespace`, `size`, `alignLeft`, `align`,  `strip`, `repeat` procs and iterators to `unicode.nim`.- Added `or` for `NimNode` in `macros`.- Added `system.typeof` for more control over how `type` expressions  can be deduced.- Added `macros.isInstantiationOf` for checking if the proc symbol  is instantiation of generic proc symbol.- Added the parameter ``isSorted`` for the ``sequtils.deduplicate`` proc.- Added `os.relativePath`.- Added `parseopt.remainingArgs`.- Added `os.getCurrentCompilerExe` (implemented as `getAppFilename` at CT),  can be used to retrieve the currently executing compiler.- Added `xmltree.toXmlAttributes`.- Added ``std/sums`` module for fast summation functions.- Added `Rusage`, `getrusage`, `wait4` to the posix interface.- Added the `posix_utils` module.- Added `system.default`.- Added `sequtils.items` for closure iterators, allows closure iterators  to be used by the `mapIt`, `filterIt`, `allIt`, `anyIt`, etc.## Library changes- The string output of `macros.lispRepr` proc has been tweaked  slightly. The `dumpLisp` macro in this module now outputs an  indented proper Lisp, devoid of commas.- Added `macros.signatureHash` that returns a stable identifier  derived from the signature of a symbol.- In `strutils` empty strings now no longer match as substrings.- The `Complex` type is now a generic object and not a tuple anymore.- The `ospaths` module is now deprecated, use `os` instead. Note that  `os` is available in a NimScript environment but unsupported  operations produce a compile-time error.- The `parseopt` module now supports a new flag `allowWhitespaceAfterColon`  (default value: true) that can be set to `false` for better Posix  interoperability. (Bug #9619.)- `os.joinPath` and `os.normalizePath` handle edge cases like ``\"a/b/../../..\"``  differently.- `securehash` was moved to `lib/deprecated`.- The switch ``-d:useWinAnsi`` is not supported anymore.- In `times` module, procs `format` and `parse` accept a new optional  `DateTimeLocale` argument for formatting/parsing dates in other languages.## Language additions- Vm support for float32<->int32 and float64<->int64 casts was added.- There is a new pragma block `noSideEffect` that works like  the `gcsafe` pragma block.- added `os.getCurrentProcessId`.- User defined pragmas are now allowed in the pragma blocks.- Pragma blocks are no longer eliminated from the typed AST tree to preserve  pragmas for further analysis by macros.- Custom pragmas are now supported for `var` and `let` symbols.- Tuple unpacking is now supported for constants and for loop variables.- Case object branches can be initialized with a runtime discriminator if  possible discriminator values are constrained within a case statement.## Language changes- The standard extension for SCF (source code filters) files was changed from  ``.tmpl`` to ``.nimf``,  it's more recognizable and allows tools like Github to recognize it as Nim,  see [#9647](https://github.com/nim-lang/Nim/issues/9647).  The previous extension will continue to work.- Pragma syntax is now consistent. Previous syntax where type pragmas did not  follow the type name is now deprecated. Also pragma before generic parameter  list is deprecated to be consistent with how pragmas are used with a proc. See  [#8514](https://github.com/nim-lang/Nim/issues/8514) and  [#1872](https://github.com/nim-lang/Nim/issues/1872) for further details.- Hash sets and tables are initialized by default. The explicit `initHashSet`,  `initTable`, etc. are not needed anymore.### Tool changes- `jsondoc` now includes a `moduleDescription` field with the module  description. `jsondoc0` shows comments as its own objects as shown in the  documentation.- `nimpretty`: --backup now defaults to `off` instead of `on` and the flag was  undocumented; use `git` instead of relying on backup files.- `koch` now defaults to build the latest *stable* Nimble version unless you  explicitly ask for the latest master version via `--latest`.### Compiler changes- The deprecated `fmod` proc is now unavailable on the VM.- A new `--outdir` option was added.- The compiled JavaScript file for the project produced by executing `nim js`  will no longer be placed in the nimcache directory.- The `--hotCodeReloading` has been implemented for the native targets.  The compiler also provides a new more flexible API for handling the  hot code reloading events in the code.- The compiler now supports a ``--expandMacro:macroNameHere`` switch  for easy introspection into what a macro expands into.- The `-d:release` switch now does not disable runtime checks anymore.  For a release build that also disables runtime checks  use `-d:release -d:danger` or simply `-d:danger`.## Bugfixes- Fixed \"distinct generic typeclass not treated as distinct\"  ([#4435](https://github.com/nim-lang/Nim/issues/4435))- Fixed \"multiple dynlib pragmas with function calls conflict with each other causing link time error\"  ([#9222](https://github.com/nim-lang/Nim/issues/9222))- Fixed \"[RFC] `extractFilename(\"usr/lib/\")` should return \"lib\" (not \"\") and be called `baseName` (since works with dirs)\"  ([#8341](https://github.com/nim-lang/Nim/issues/8341))- Fixed \"\\0 in comment replaced with 0 in docs\"  ([#8841](https://github.com/nim-lang/Nim/issues/8841))- Fixed \"round function in Math library sometimes doesn't work\"  ([#9082](https://github.com/nim-lang/Nim/issues/9082))- Fixed \"Async readAll in httpclient produces garbled output.\"  ([#8994](https://github.com/nim-lang/Nim/issues/8994))- Fixed \"[regression] project `config.nims` not being read anymore\"  ([#9264](https://github.com/nim-lang/Nim/issues/9264))- Fixed \"Using iterator within another iterator fails\"  ([#3819](https://github.com/nim-lang/Nim/issues/3819))- Fixed \"`nim js -o:dirname main.nim` writes nothing, and no error shown\"  ([#9154](https://github.com/nim-lang/Nim/issues/9154))- Fixed \"Wrong number of deallocations when using destructors\"  ([#9263](https://github.com/nim-lang/Nim/issues/9263))- Fixed \"devel docs in nim-lang.github.io `Source` links point to master instead of devel\"  ([#9295](https://github.com/nim-lang/Nim/issues/9295))- Fixed \"compiler/nimeval can't be used twice: fails 2nd time with: `Error: internal error: n is not nil`\"  ([#9180](https://github.com/nim-lang/Nim/issues/9180))- Fixed \"Codegen bug with exportc\"  ([#9297](https://github.com/nim-lang/Nim/issues/9297))- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"  ([#9306](https://github.com/nim-lang/Nim/issues/9306))- Fixed \"Openarray: internal compiler error when accessing length if not a param\"  ([#9281](https://github.com/nim-lang/Nim/issues/9281))- Fixed \"finish completely removing web folder\"  ([#9304](https://github.com/nim-lang/Nim/issues/9304))- Fixed \"counting the empty substring in a string results in infinite loop\"  ([#8919](https://github.com/nim-lang/Nim/issues/8919))- Fixed \"[Destructors] Wrong moves and copies\"  ([#9294](https://github.com/nim-lang/Nim/issues/9294))- Fixed \"`proc isNil*(x: Any): bool =` should be updated with non nil string, seq\"  ([#8916](https://github.com/nim-lang/Nim/issues/8916))- Fixed \"doAssert AST expansion excessive\"  ([#8518](https://github.com/nim-lang/Nim/issues/8518))- Fixed \"when Foo (of type iterator) is used where an expression is expected, show useful err msg instead of confusing `Error: attempting to call undeclared routine Foo`\"  ([#8671](https://github.com/nim-lang/Nim/issues/8671))- Fixed \"List comprehensions do not work with generic parameter\"  ([#5707](https://github.com/nim-lang/Nim/issues/5707))- Fixed \"strutils/isUpperAscii and unicode/isUpper consider space, punctuations, numbers as \"lowercase\"\"  ([#7963](https://github.com/nim-lang/Nim/issues/7963))- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"  ([#9306](https://github.com/nim-lang/Nim/issues/9306))- Fixed \"BUG: os.isHidden doesn't work with directories; should use just paths, not filesystem access\"  ([#8225](https://github.com/nim-lang/Nim/issues/8225))- Fixed \"Unable to create distinct tuple in a const with a type declaration\"  ([#2760](https://github.com/nim-lang/Nim/issues/2760))- Fixed \"[nimpretty] raw strings are transformed into normal strings\"  ([#9236](https://github.com/nim-lang/Nim/issues/9236))- Fixed \"[nimpretty] proc is transfered to incorrect code\"  ([#8626](https://github.com/nim-lang/Nim/issues/8626))- Fixed \"[nimpretty] Additional new line is added with each format\"  ([#9144](https://github.com/nim-lang/Nim/issues/9144))- Fixed \"\"%NIM%/config/nim.cfg\" is not being read\"  ([#9244](https://github.com/nim-lang/Nim/issues/9244))- Fixed \"Illegal capture on async proc (except when the argument is `seq`)\"  ([#2361](https://github.com/nim-lang/Nim/issues/2361))- Fixed \"Jsondoc0 doesn't output module comments.\"  ([#9364](https://github.com/nim-lang/Nim/issues/9364))- Fixed \"NimPretty has troubles with source code filter\"  ([#9384](https://github.com/nim-lang/Nim/issues/9384))- Fixed \"tfragment_gc test is flaky on OSX\"  ([#9421](https://github.com/nim-lang/Nim/issues/9421))- Fixed \"ansi color code templates fail to bind symbols\"  ([#9394](https://github.com/nim-lang/Nim/issues/9394))- Fixed \"Term write rule crash compiler.\"  ([#7972](https://github.com/nim-lang/Nim/issues/7972))- Fixed \"SIGSEGV when converting `lines` to closure iterator, most likely caused by defer\"  ([#5321](https://github.com/nim-lang/Nim/issues/5321))- Fixed \"SIGSEGV during the compile\"  ([#5519](https://github.com/nim-lang/Nim/issues/5519))- Fixed \"Compiler crash when creating a variant type\"  ([#6220](https://github.com/nim-lang/Nim/issues/6220))- Fixed \"\"continue\" inside a block without loops gives \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\"  ([#6367](https://github.com/nim-lang/Nim/issues/6367))- Fixed \"old changelogs should be kept instead of erased\"  ([#9376](https://github.com/nim-lang/Nim/issues/9376))- Fixed \"illegal recursion with generic typeclass\"  ([#4674](https://github.com/nim-lang/Nim/issues/4674))- Fixed \"Crash when closing an unopened file on debian 8.\"  ([#9456](https://github.com/nim-lang/Nim/issues/9456))- Fixed \"nimpretty joins regular and doc comment\"  ([#9400](https://github.com/nim-lang/Nim/issues/9400))- Fixed \"nimpretty changes indentation level of trailing comment\"  ([#9398](https://github.com/nim-lang/Nim/issues/9398))- Fixed \"Some bugs with nimpretty\"  ([#8078](https://github.com/nim-lang/Nim/issues/8078))- Fixed \"Computed gotos: bad codegen, label collision with if/statement in the while body\"  ([#9276](https://github.com/nim-lang/Nim/issues/9276))- Fixed \"nimpretty not idempotent: keeps adding newlines below block comment\"  ([#9483](https://github.com/nim-lang/Nim/issues/9483))- Fixed \"nimpretty shouldn't format differently whether there's a top-level newline\"  ([#9484](https://github.com/nim-lang/Nim/issues/9484))- Fixed \"Regression: 0.18 code with mapIt() fails to compile on 0.19\"  ([#9093](https://github.com/nim-lang/Nim/issues/9093))- Fixed \"nimpretty shouldn't change file modif time if no changes => use os.updateFile\"  ([#9499](https://github.com/nim-lang/Nim/issues/9499))- Fixed \"Nim/compiler/pathutils.nim(226, 12) `canon\"/foo/../bar\" == \"/bar\"`  [AssertionError]\"  ([#9507](https://github.com/nim-lang/Nim/issues/9507))- Fixed \"nimpretty adds a space before type, ptr, ref, object in wrong places\"  ([#9504](https://github.com/nim-lang/Nim/issues/9504))- Fixed \"nimpretty badly indents block comment\"  ([#9500](https://github.com/nim-lang/Nim/issues/9500))- Fixed \"typeof: Error: illformed AST: typeof(myIter(), typeOfIter)\"  ([#9498](https://github.com/nim-lang/Nim/issues/9498))- Fixed \"newAsyncSmtp() raises exception with Nim 0.19.0\"  ([#9358](https://github.com/nim-lang/Nim/issues/9358))- Fixed \"nimpretty wrongly adds empty newlines inside proc signature\"  ([#9506](https://github.com/nim-lang/Nim/issues/9506))- Fixed \"HttpClient: requesting URL with no scheme fails\"  ([#7842](https://github.com/nim-lang/Nim/issues/7842))- Fixed \"Duplicate definition in cpp codegen\"  ([#6986](https://github.com/nim-lang/Nim/issues/6986))- Fixed \"Sugar - distinctBase: undeclared identifier uncheckedArray\"  ([#9532](https://github.com/nim-lang/Nim/issues/9532))- Fixed \"Portable fsmonitor\"  ([#6718](https://github.com/nim-lang/Nim/issues/6718))- Fixed \"Small RFC. Minimal stacktrace for Exceptions when frames are disabled\"  ([#9434](https://github.com/nim-lang/Nim/issues/9434))- Fixed \"`nim doc strutils.nim` fails on 32 bit compiler with AssertionError on a RunnableExample\"  ([#9525](https://github.com/nim-lang/Nim/issues/9525))- Fixed \"Error: undeclared identifier: '|'\"  ([#9540](https://github.com/nim-lang/Nim/issues/9540))- Fixed \"using Selectors, Error: undeclared field: 'OSErrorCode'\"  ([#7667](https://github.com/nim-lang/Nim/issues/7667))- Fixed \"The \"--\" template from module nimscript mis-translates \"out\" key\"  ([#6011](https://github.com/nim-lang/Nim/issues/6011))- Fixed \"logging error should go to stderr instead of stdout\"  ([#9547](https://github.com/nim-lang/Nim/issues/9547))- Fixed \"when in generic should fail earlier\"  ([#8603](https://github.com/nim-lang/Nim/issues/8603))- Fixed \"C++ codegen error when iterating in finally block in topmost scope\"  ([#5549](https://github.com/nim-lang/Nim/issues/5549))- Fixed \"document `nim --nep1:on`\"  ([#9564](https://github.com/nim-lang/Nim/issues/9564))- Fixed \"C++ codegen error when iterating in finally block in topmost scope\"  ([#5549](https://github.com/nim-lang/Nim/issues/5549))- Fixed \"strutils.multiReplace() crashes if search string is \"\"\"  ([#9557](https://github.com/nim-lang/Nim/issues/9557))- Fixed \"Missing docstrings are replaced with other text\"  ([#9169](https://github.com/nim-lang/Nim/issues/9169))- Fixed \"Type which followed by a function and generated by a template will not shown in docs generated by `nim doc`\"  ([#9235](https://github.com/nim-lang/Nim/issues/9235))- Fixed \"templates expand doc comments as documentation of other procedures\"  ([#9432](https://github.com/nim-lang/Nim/issues/9432))- Fixed \"please implement http put and delete in httpClient\"  ([#8777](https://github.com/nim-lang/Nim/issues/8777))- Fixed \"Module docs: 2 suggestions...\"  ([#5525](https://github.com/nim-lang/Nim/issues/5525))- Fixed \"math.hypot under/overflows\"  ([#9585](https://github.com/nim-lang/Nim/issues/9585))- Fixed \"`=sink` gets called on `result` when not used explicitly\"  ([#9594](https://github.com/nim-lang/Nim/issues/9594))- Fixed \"Treat compl as a c++ keyword\"  ([#6836](https://github.com/nim-lang/Nim/issues/6836))- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"  ([#9556](https://github.com/nim-lang/Nim/issues/9556))- Fixed \"`nim check` gives `SIGSEGV: Illegal storage access`  ; maybe because of sizeof\"  ([#9610](https://github.com/nim-lang/Nim/issues/9610))- Fixed \"Cannot use a typedesc variable in a template\"  ([#9611](https://github.com/nim-lang/Nim/issues/9611))- Fixed \"`=sink` gets called on `result` when not used explicitly\"  ([#9594](https://github.com/nim-lang/Nim/issues/9594))- Fixed \"[NimScript] Error: arguments can only be given if the '--run' option is selected\"  ([#9246](https://github.com/nim-lang/Nim/issues/9246))- Fixed \"macros.getTypeImpl regression, crash when trying to query type information from ref object\"  ([#9600](https://github.com/nim-lang/Nim/issues/9600))- Fixed \"[Regression] Complex.re and Complex.im are private\"  ([#9639](https://github.com/nim-lang/Nim/issues/9639))- Fixed \"nim check: `internal error: (filename: \"vmgen.nim\", line: 1119, column: 19)`\"  ([#9609](https://github.com/nim-lang/Nim/issues/9609))- Fixed \"`optInd` missing indent specification in grammar.txt\"  ([#9608](https://github.com/nim-lang/Nim/issues/9608))- Fixed \"`not` as prefix operator causes problems\"  ([#9574](https://github.com/nim-lang/Nim/issues/9574))- Fixed \"It is not possible to specify a pragma for the proc that returns `lent T`\"  ([#9633](https://github.com/nim-lang/Nim/issues/9633))- Fixed \"Compiler crash when initializing table with module name\"  ([#9319](https://github.com/nim-lang/Nim/issues/9319))- Fixed \"compiler crash\"  ([#8335](https://github.com/nim-lang/Nim/issues/8335))- Fixed \"\"SIGSEGV\" without any \"undeclared identifier\" error\"  ([#8011](https://github.com/nim-lang/Nim/issues/8011))- Fixed \"Incorrect parseopt parsing ?\"  ([#9619](https://github.com/nim-lang/Nim/issues/9619))- Fixed \"Operator `or` causes a future to be completed more than once\"  ([#8982](https://github.com/nim-lang/Nim/issues/8982))- Fixed \"Nimpretty adds instead of removes incorrect spacing inside backticks\"  ([#9673](https://github.com/nim-lang/Nim/issues/9673))- Fixed \"nimpretty should hardcode indentation amount to 2 spaces\"  ([#9502](https://github.com/nim-lang/Nim/issues/9502))- Fixed \"callSoon() is not working prior getGlobalDispatcher().\"  ([#7192](https://github.com/nim-lang/Nim/issues/7192))- Fixed \"use nimf as standardized extention for nim files with source code filter?\"  ([#9647](https://github.com/nim-lang/Nim/issues/9647))- Fixed \"Banning copy for a type prevents composing\"  ([#9692](https://github.com/nim-lang/Nim/issues/9692))- Fixed \"smtp module doesn't support threads.\"  ([#9728](https://github.com/nim-lang/Nim/issues/9728))- Fixed \"Compiler segfault (stack overflow) compiling code on 0.19.0 that works on 0.18.0\"  ([#9694](https://github.com/nim-lang/Nim/issues/9694))- Fixed \"nre doesn't document quantifiers `re\"foo{2,4}\"`\"  ([#9470](https://github.com/nim-lang/Nim/issues/9470))- Fixed \"ospaths still referenced despite its deprecation\"  ([#9671](https://github.com/nim-lang/Nim/issues/9671))- Fixed \"`move` on dereferenced pointer results in bogus value\"  ([#9743](https://github.com/nim-lang/Nim/issues/9743))- Fixed \"regression in discard statement\"  ([#9726](https://github.com/nim-lang/Nim/issues/9726))- Fixed \"try statements and exceptions do not cooperate well\"  ([#96](https://github.com/nim-lang/Nim/issues/96))- Fixed \"XDeclaredButNotUsed doesn't work with template, let/var/const, type; works with all other routine nodes\"  ([#9764](https://github.com/nim-lang/Nim/issues/9764))- Fixed \"` Warning: fun is deprecated` doesn't check whether deprecated overload is actually used\"  ([#9759](https://github.com/nim-lang/Nim/issues/9759))- Fixed \"Regression: tuple sizeof is incorrect if contains imported object\"  ([#9794](https://github.com/nim-lang/Nim/issues/9794))- Fixed \"Internal error when calling `=destroy` without declaration\"  ([#9675](https://github.com/nim-lang/Nim/issues/9675))- Fixed \"Internal error if `=sink` is used explictly\"  ([#7365](https://github.com/nim-lang/Nim/issues/7365))- Fixed \"unicode.strip behaving oddly\"  ([#9800](https://github.com/nim-lang/Nim/issues/9800))- Fixed \"X_examples.nim generated by runnableExamples should show line number where they came from\"  ([#8289](https://github.com/nim-lang/Nim/issues/8289))- Fixed \"quit() fails with \"unreachable statement after 'return'\"\"  ([#9832](https://github.com/nim-lang/Nim/issues/9832))- Fixed \"quit() fails with \"unreachable statement after 'return'\"\"  ([#9832](https://github.com/nim-lang/Nim/issues/9832))- Fixed \"`Error: internal error: genLiteral: ty is nil` when a `var` is accessed in `quote do`\"  ([#9864](https://github.com/nim-lang/Nim/issues/9864))- Fixed \"Regression: sizeof Error: cannot instantiate: 'T'\"  ([#9868](https://github.com/nim-lang/Nim/issues/9868))- Fixed \"Using a template as a routine pragma no longer works\"  ([#9614](https://github.com/nim-lang/Nim/issues/9614))- Fixed \"Clang error on Rosencrantz\"  ([#9441](https://github.com/nim-lang/Nim/issues/9441))- Fixed \"Enum fields get hintXDeclaredButNotUsed hint even when marked with used pragma\"  ([#9896](https://github.com/nim-lang/Nim/issues/9896))- Fixed \"internal error: environment misses\"  ([#9476](https://github.com/nim-lang/Nim/issues/9476))- Fixed \"SIGSEGV: `setLen` on a seq doesn't construct objects at CT\"  ([#9872](https://github.com/nim-lang/Nim/issues/9872))- Fixed \"Latest HEAD segfaults when compiling Aporia\"  ([#9889](https://github.com/nim-lang/Nim/issues/9889))- Fixed \"Unnecessary semicolon in error message\"  ([#9907](https://github.com/nim-lang/Nim/issues/9907))- Fixed \"`koch temp c t.nim` tries to look up `t.nim` in nim install directory (alongside koch)\"  ([#9913](https://github.com/nim-lang/Nim/issues/9913))- Fixed \"Regression: sizeof Error: cannot instantiate: 'T'\"  ([#9868](https://github.com/nim-lang/Nim/issues/9868))- Fixed \"Showstopper regression: Nimscript no longer works \"  ([#9965](https://github.com/nim-lang/Nim/issues/9965))- Fixed \"Global imports in cfg file broken\"  ([#9978](https://github.com/nim-lang/Nim/issues/9978))- Fixed \"Global imports in cfg file broken\"  ([#9978](https://github.com/nim-lang/Nim/issues/9978))- Fixed \"Regression - Nim compiler shows all gcc commands used when config.nims present\"  ([#9982](https://github.com/nim-lang/Nim/issues/9982))- Fixed \"[regression] Nimscript makes a program slower and more bloated\"  ([#9995](https://github.com/nim-lang/Nim/issues/9995))- Fixed \"Regression in Nimscript projectDir() behavior, returns empty string\"  ([#9985](https://github.com/nim-lang/Nim/issues/9985))- Fixed \"Global imports don't work for non-std modules\"  ([#9994](https://github.com/nim-lang/Nim/issues/9994))- Fixed \"Object constructor regression in JS backend\"  ([#10005](https://github.com/nim-lang/Nim/issues/10005))- Fixed \"Regression: `nimble install` fails on nim devel\"  ([#9991](https://github.com/nim-lang/Nim/issues/9991))- Fixed \"Another config.nims regression\"  ([#9989](https://github.com/nim-lang/Nim/issues/9989))- Fixed \"`nim js -d:nodejs main.nim` gives: `system.nim(1443, 7) Error: cannot 'importc' variable at compile time` with a config.nims\"  ([#9153](https://github.com/nim-lang/Nim/issues/9153))- Fixed \"how to profile? using `--profiler:on` causes: Error: undeclared identifier: 'framePtr'\"  ([#8991](https://github.com/nim-lang/Nim/issues/8991))- Fixed \"nim doc fail on lib/system/profiler.nim\"  ([#9420](https://github.com/nim-lang/Nim/issues/9420))- Fixed \"[regression] ./koch tests: Error: overloaded 'readFile' leads to ambiguous calls (with ~/.config/nim/config.nims)\"  ([#9120](https://github.com/nim-lang/Nim/issues/9120))- Fixed \"regression: normalizePath(\"foo/..\") now incorrectly returns `\"\"`, should be `\".\"` like before + in almost all other languages\"  ([#10017](https://github.com/nim-lang/Nim/issues/10017))- Fixed \"Incorrect 'not all cases are covered' when using enums with nonconsecutive items\"  ([#3060](https://github.com/nim-lang/Nim/issues/3060))- Fixed \"[ospaths] BUG: splitFile(\"/a.txt\").dir = \"\" ; + other bugs with splitFile\"  ([#8255](https://github.com/nim-lang/Nim/issues/8255))- Fixed \"GC bug: seems very slow where it shouldn't; maybe it leaks?\"  ([#10040](https://github.com/nim-lang/Nim/issues/10040))- Fixed \"Closure bug with the JS backend\"  ([#7048](https://github.com/nim-lang/Nim/issues/7048))- Fixed \"Error: unhandled exception: sym is not accessible [FieldError]\"  ([#10058](https://github.com/nim-lang/Nim/issues/10058))- Fixed \"with `--errorMax:100` ; link step should not be attempted if previous step failed\"  ([#9933](https://github.com/nim-lang/Nim/issues/9933))- Fixed \"import os or ospaths compilation error in js\"  ([#10066](https://github.com/nim-lang/Nim/issues/10066))- Fixed \"Example for system.`$`[T: tuple | object] is misleading\"  ([#7898](https://github.com/nim-lang/Nim/issues/7898))- Fixed \"Combining object variants and inheritance leads to SIGSEGV during compilation\"  ([#10033](https://github.com/nim-lang/Nim/issues/10033))- Fixed \"Regression in distros.nim (foreignDep fails to compile)\"  ([#10024](https://github.com/nim-lang/Nim/issues/10024))- Fixed \"Testament megatest fails with Nim not found\"  ([#10049](https://github.com/nim-lang/Nim/issues/10049))- Fixed \"XDeclaredButNotUsed shows redundant info: declaration location shown twice\"  ([#10101](https://github.com/nim-lang/Nim/issues/10101))- Fixed \"Nim beginner's feedback: \"echo type(1)\" does not work\"  ([#5827](https://github.com/nim-lang/Nim/issues/5827))- Fixed \"`sizeof` still broken with regard to bitsize/packed bitfields\"  ([#10082](https://github.com/nim-lang/Nim/issues/10082))- Fixed \"Codegen init regression\"  ([#10148](https://github.com/nim-lang/Nim/issues/10148))- Fixed \"toInt doesn't raise an exception\"  ([#2764](https://github.com/nim-lang/Nim/issues/2764))- Fixed \"allow `import` inside `block`: makes N runnableExamples run N x faster, minimizes scope pollution\"  ([#9300](https://github.com/nim-lang/Nim/issues/9300))- Fixed \"Extra procs & docs for the unicode module\"  ([#2353](https://github.com/nim-lang/Nim/issues/2353))- Fixed \"regression: CI failing `Error: unhandled exception: cannot open: /Users/travis/.cache/nim/docgen_sample_d/runnableExamples/docgen_sample_examples.nim [IOError]`\"  ([#10188](https://github.com/nim-lang/Nim/issues/10188))- Fixed \"getAddrInfo index out of bounds error\"  ([#10198](https://github.com/nim-lang/Nim/issues/10198))- Fixed \"can't build a tuple with `static int` element\"  ([#10073](https://github.com/nim-lang/Nim/issues/10073))- Fixed \"nimpretty creates foo.nim.backup for foo.nims\"  ([#10211](https://github.com/nim-lang/Nim/issues/10211))- Fixed \"regression caused by WEXITSTATUS: `nim cpp compiler/nim.nim` fails on OSX\"  ([#10231](https://github.com/nim-lang/Nim/issues/10231))- Fixed \"travis and appveyor should move the bulk of its logic to running a nim file\"  ([#10041](https://github.com/nim-lang/Nim/issues/10041))- Fixed \"`Error: undeclared field: 'foo'` should show type (+ where type is defined) (hard to guess in generic code)\"  ([#8794](https://github.com/nim-lang/Nim/issues/8794))- Fixed \"Discrepancy in Documentation About 'f128 Type-Suffix\"  ([#10213](https://github.com/nim-lang/Nim/issues/10213))- Fixed \"Incorrect error message\"  ([#10251](https://github.com/nim-lang/Nim/issues/10251))- Fixed \"CI should call `./koch tools` ; right now `nimfind` isn't even being compiled\"  ([#10039](https://github.com/nim-lang/Nim/issues/10039))- Fixed \"Building koch from nim devel fails when config.nims importing `os` present\"  ([#10030](https://github.com/nim-lang/Nim/issues/10030))- Fixed \"unittest module uses `programResult` to report number of failures which can wrap\"  ([#10261](https://github.com/nim-lang/Nim/issues/10261))- Fixed \"Nimscript doesn't raise any exceptions\"  ([#10240](https://github.com/nim-lang/Nim/issues/10240))- Fixed \"{.push raises: [].} breaks when combined with certain symbols\"  ([#10216](https://github.com/nim-lang/Nim/issues/10216))- Fixed \"Support \"#.\" for auto-enumerated lists in RST docs\"  ([#8158](https://github.com/nim-lang/Nim/issues/8158))- Fixed \"`OpenSSL error` breaking nimble and every package\"  ([#10281](https://github.com/nim-lang/Nim/issues/10281))- Fixed \"execShellCmd returns 0 instead of nonzero when child process exits with signal (eg SIGSEGV)\"  ([#10273](https://github.com/nim-lang/Nim/issues/10273))- Fixed \"`nim check` (and nim c --errorMax:0) SIGSEGV on first `index out of bounds` error\"  ([#10104](https://github.com/nim-lang/Nim/issues/10104))- Fixed \"Module `db_sqlite` doesn't finalize statements with db_sqlite.rows after breaking the iterator's loop\"  ([#7241](https://github.com/nim-lang/Nim/issues/7241))- Fixed \"Performance regression with --gc:markandsweep\"  ([#10271](https://github.com/nim-lang/Nim/issues/10271))- Fixed \"internal error when using typedesc `is` comparison in a macro\"  ([#10136](https://github.com/nim-lang/Nim/issues/10136))- Fixed \"cannot call template/macros with varargs[typed] to varargs[untyped]\"  ([#10075](https://github.com/nim-lang/Nim/issues/10075))- Fixed \"nim v0.13.0 breaks symbol lookup in quote block\"  ([#3744](https://github.com/nim-lang/Nim/issues/3744))- Fixed \"Some nimgrep issues\"  ([#989](https://github.com/nim-lang/Nim/issues/989))- Fixed \"Safecall problem?\"  ([#9218](https://github.com/nim-lang/Nim/issues/9218))- Fixed \"Nim script is not supporting reading from stdin.\"  ([#3983](https://github.com/nim-lang/Nim/issues/3983))- Fixed \"Parameter constraints: undeclared identifier '{}' within a template scope\"  ([#7524](https://github.com/nim-lang/Nim/issues/7524))- Fixed \"repr does not work with 'var openarray' parameter in function\"  ([#7878](https://github.com/nim-lang/Nim/issues/7878))- Fixed \"CountTable raisen error instead of returning a count of 0\"  ([#10065](https://github.com/nim-lang/Nim/issues/10065))- Fixed \"`nim c -r main.nim foo1 \"\" foo3` doesn't handle empty params or params w quotes\"  ([#9842](https://github.com/nim-lang/Nim/issues/9842))- Fixed \"refs #10249 ; more debug info to diagnose failures\"  ([#10266](https://github.com/nim-lang/Nim/issues/10266))- Fixed \"ObjectAssignmentError for aliased types\"  ([#10203](https://github.com/nim-lang/Nim/issues/10203))- Fixed \"nim cpp treats Nan as 0.0 (during compile time)\"  ([#10305](https://github.com/nim-lang/Nim/issues/10305))- Fixed \"terminal.nim colored output is not GCSAFE.\"  ([#8294](https://github.com/nim-lang/Nim/issues/8294))- Fixed \"Building koch from nim devel fails when config.nims importing `os` present\"  ([#10030](https://github.com/nim-lang/Nim/issues/10030))- Fixed \"every binary cmd line option should allow on/off switch\"  ([#9629](https://github.com/nim-lang/Nim/issues/9629))- Fixed \"Wrong bounds check using template [] to access array in a const object\"  ([#3899](https://github.com/nim-lang/Nim/issues/3899))- Fixed \"tdont_be_stupid.nim flaky test\"  ([#10386](https://github.com/nim-lang/Nim/issues/10386))- Fixed \"Separate nim install guide for users and packagers\"  ([#5182](https://github.com/nim-lang/Nim/issues/5182))- Fixed \"--embedsrc does not work on macos\"  ([#10263](https://github.com/nim-lang/Nim/issues/10263))- Fixed \"Devel regression on static semcheck\"  ([#10339](https://github.com/nim-lang/Nim/issues/10339))- Fixed \"vccexe.exe does not work without VS2015 x64 Native Tools command prompt.\"  ([#10358](https://github.com/nim-lang/Nim/issues/10358))- Fixed \"ospaths still referenced despite its deprecation\"  ([#9671](https://github.com/nim-lang/Nim/issues/9671))- Fixed \"Regression in sequtils\"  ([#10433](https://github.com/nim-lang/Nim/issues/10433))- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"  ([#9556](https://github.com/nim-lang/Nim/issues/9556))- Fixed \"\"contributing\" is listed as a module on theindex\"  ([#10287](https://github.com/nim-lang/Nim/issues/10287))- Fixed \"`const Foo=int` compiles; is that legal? what does it mean?\"  ([#8610](https://github.com/nim-lang/Nim/issues/8610))- Fixed \"parsecsv can't handle empty lines at the beginning of the file\"  ([#8365](https://github.com/nim-lang/Nim/issues/8365))- Fixed \"Generated c code is not compile with the vcc cl.exe before 2012 after v0.19\"  ([#10352](https://github.com/nim-lang/Nim/issues/10352))- Fixed \"[Regression] converter to string leads fail to compile  on 0.19\"  ([#9149](https://github.com/nim-lang/Nim/issues/9149))- Fixed \"regression: memory leak with default GC\"  ([#10488](https://github.com/nim-lang/Nim/issues/10488))- Fixed \"oids counter starts at zero; spec says it should be random\"  ([#2796](https://github.com/nim-lang/Nim/issues/2796))- Fixed \"re quantifier`{` under-documented\"  ([#9471](https://github.com/nim-lang/Nim/issues/9471))- Fixed \"Minor issues in docs regarding keywords\"  ([#9725](https://github.com/nim-lang/Nim/issues/9725))- Fixed \"Explained the proc \\\"pretty\\\" in detail, file: json.nim with comments and sample program\"  ([#10466](https://github.com/nim-lang/Nim/issues/10466))- Fixed \"net.recvFrom address is always \"0.0.0.0\" for ipv6\"  ([#7634](https://github.com/nim-lang/Nim/issues/7634))- Fixed \"import \"path with space/bar.nim\" gives error msg with wrong file name\"  ([#10042](https://github.com/nim-lang/Nim/issues/10042))- Fixed \"Deprecation warnings for enum values print twice\"  ([#8063](https://github.com/nim-lang/Nim/issues/8063))- Fixed \"Undefined behaviour in the usage of incrSeqV3\"  ([#10568](https://github.com/nim-lang/Nim/issues/10568))- Fixed \"SetMaxPoolSize not heeded\"  ([#10584](https://github.com/nim-lang/Nim/issues/10584))- Fixed \"CI broken: tests/macros/t8997.nim fails\"  ([#10591](https://github.com/nim-lang/Nim/issues/10591))- Fixed \"prevent common user config to interfere with testament\"  ([#10573](https://github.com/nim-lang/Nim/issues/10573))- Fixed \"`static: writeFile` doesn't work anymore since `system refactorings`\"  ([#10585](https://github.com/nim-lang/Nim/issues/10585))- Fixed \"export statement doesn't support directories\"  ([#6227](https://github.com/nim-lang/Nim/issues/6227))- Fixed \"https://nim-lang.github.io/Nim/io.html gives 404\"  ([#10586](https://github.com/nim-lang/Nim/issues/10586))- Fixed \"Choosenim fails with \"ambiguous call\" in rst.nim\"  ([#10602](https://github.com/nim-lang/Nim/issues/10602))- Fixed \"Enable experimental feature with command line argument has no effect.\"  ([#10606](https://github.com/nim-lang/Nim/issues/10606))- Fixed \"Comparing function pointer with nil marks the proc as not gcsafe\"  ([#6955](https://github.com/nim-lang/Nim/issues/6955))- Fixed \"httpclient.timeout not exported\"  ([#10357](https://github.com/nim-lang/Nim/issues/10357))- Fixed \"`nim check SIGSEGV` (causing nimsuggest to fail too)\"  ([#10547](https://github.com/nim-lang/Nim/issues/10547))- Fixed \"`index out of bounds` errors should show `index` and `bound`\"  ([#9880](https://github.com/nim-lang/Nim/issues/9880))- Fixed \"Enable experimental feature with command line argument has no effect.\"  ([#10606](https://github.com/nim-lang/Nim/issues/10606))- Fixed \"Comparing function pointer with nil marks the proc as not gcsafe\"  ([#6955](https://github.com/nim-lang/Nim/issues/6955))- Fixed \"httpclient.timeout not exported\"  ([#10357](https://github.com/nim-lang/Nim/issues/10357))- Fixed \"`nim check SIGSEGV` (causing nimsuggest to fail too)\"  ([#10547](https://github.com/nim-lang/Nim/issues/10547))- Fixed \"certain seq manipulations fail when compiled to JS\"  ([#10651](https://github.com/nim-lang/Nim/issues/10651))- Fixed \"system.insert does not work with strings in VM\"  ([#10561](https://github.com/nim-lang/Nim/issues/10561))- Fixed \"Doc suggestion: include a link to theindex.html on ...\"  ([#5515](https://github.com/nim-lang/Nim/issues/5515))- Fixed \"`koch boot` fails on windows with choosenim-installed nim: proxyexe.nim error\"  ([#10659](https://github.com/nim-lang/Nim/issues/10659))- Fixed \"getImpl on type symbol hides implementation\"  ([#10702](https://github.com/nim-lang/Nim/issues/10702))- Fixed \"Missing stdlib modules\"  ([#8164](https://github.com/nim-lang/Nim/issues/8164))- Fixed \"No \"correct\" way to declare inheritable ref object\"  ([#10195](https://github.com/nim-lang/Nim/issues/10195))- Fixed \"Line number missing in stdlib trace\"  ([#6832](https://github.com/nim-lang/Nim/issues/6832))- Fixed \"Better support for modifying XmlNodes\"  ([#3797](https://github.com/nim-lang/Nim/issues/3797))- Fixed \"No documentation of AsyncStreams\"  ([#6383](https://github.com/nim-lang/Nim/issues/6383))- Fixed \"`set[` in proc definition crashes compiler\"  ([#10678](https://github.com/nim-lang/Nim/issues/10678))- Fixed \"net.bindAddr fails binding to all interfaces if `address == \"\"` for ipv6\"  ([#7633](https://github.com/nim-lang/Nim/issues/7633))- Fixed \"Tuple unpacking of `for` vars fails inside generic proc\"  ([#10727](https://github.com/nim-lang/Nim/issues/10727))- Fixed \"initSet should be called initHashSet\"  ([#10730](https://github.com/nim-lang/Nim/issues/10730))- Fixed \"inheritable placement not symmetric between object and ref object\"  ([#3012](https://github.com/nim-lang/Nim/issues/3012))- Fixed \"Alloc functions have side effects, makes it hard to use side effect tracking with destructors\"  ([#9746](https://github.com/nim-lang/Nim/issues/9746))- Fixed \"hashes:hash returns different values on Windows/Linux\"  ([#10771](https://github.com/nim-lang/Nim/issues/10771))- Fixed \"switch(\"cpu\", \"i386\") with --cc:vcc doesn't work when it is written on *.nims\"  ([#10387](https://github.com/nim-lang/Nim/issues/10387))- Fixed \"async call now treated as non-gc safed call?\"  ([#10795](https://github.com/nim-lang/Nim/issues/10795))- Fixed \"{.borrow.} hangs compiler on non-distinct type (should produce an error or warning)\"  ([#10791](https://github.com/nim-lang/Nim/issues/10791))- Fixed \"DCE regression: modules can't be eliminated\"  ([#10703](https://github.com/nim-lang/Nim/issues/10703))- Fixed \"Unsafeaddr rendered as addr in typed AST \"  ([#10807](https://github.com/nim-lang/Nim/issues/10807))- Fixed \"Rendering of return statements in typed AST\"  ([#10805](https://github.com/nim-lang/Nim/issues/10805))- Fixed \"Assigning shallow string to a field makes a copy\"  ([#10845](https://github.com/nim-lang/Nim/issues/10845))- Fixed \"func keyword for proc types doesn't imply noSideEffect\"  ([#10838](https://github.com/nim-lang/Nim/issues/10838))- Fixed \"SPAN.attachedType in toc should have no width\"  ([#10857](https://github.com/nim-lang/Nim/issues/10857))- Fixed \"[docgen] Generic type pragmas in wrong place\"  ([#10792](https://github.com/nim-lang/Nim/issues/10792))- Fixed \"os.joinPaths documentation is inaccurate; should reference uri.combine\"  ([#10836](https://github.com/nim-lang/Nim/issues/10836))- Fixed \"\"invalid indentation\" when assigning macro with code block to const\"  ([#10861](https://github.com/nim-lang/Nim/issues/10861))- Fixed \"Nim crashes with SIGABRT after getting into a replaceTypeVars infinite loop.\"  ([#10884](https://github.com/nim-lang/Nim/issues/10884))- Fixed \"Booleans Work Wrong in Compile-time\"  ([#10886](https://github.com/nim-lang/Nim/issues/10886))- Fixed \"C / CPP backends differ in argument evaluation order\"  ([#8202](https://github.com/nim-lang/Nim/issues/8202))- Fixed \"Change in syntax breaks valid code\"  ([#10896](https://github.com/nim-lang/Nim/issues/10896))- Fixed \"`auto` return type in macros causes internal error\"  ([#10904](https://github.com/nim-lang/Nim/issues/10904))- Fixed \"Nim string definition conflicts with other C/C++ instances\"  ([#10907](https://github.com/nim-lang/Nim/issues/10907))- Fixed \"nim check crash with invalid code, lowest priority\"  ([#10930](https://github.com/nim-lang/Nim/issues/10930))- Fixed \"nim check crash due to typing error, lowest priority\"  ([#10934](https://github.com/nim-lang/Nim/issues/10934))- Fixed \"Stacktrace displayed two times\"  ([#10922](https://github.com/nim-lang/Nim/issues/10922))- Fixed \"Cpp codegen regression. Showstopper\"  ([#10948](https://github.com/nim-lang/Nim/issues/10948))- Fixed \"`lent T` can return garbage\"  ([#10942](https://github.com/nim-lang/Nim/issues/10942))- Fixed \"Regression. atomicInc doesn't compile with vcc and i386\"  ([#10953](https://github.com/nim-lang/Nim/issues/10953))- Fixed \"{.pure.} has no effect on objects\"  ([#10721](https://github.com/nim-lang/Nim/issues/10721))- Fixed \"nimpretty doesn't put space around operators like `a<b` => `a < b`\"  ([#10200](https://github.com/nim-lang/Nim/issues/10200))- Fixed \"nimpretty messes alignment, after import statement\"  ([#9811](https://github.com/nim-lang/Nim/issues/9811))- Fixed \"Destructor regression for tuples unpacking\"  ([#10940](https://github.com/nim-lang/Nim/issues/10940))- Fixed \"Link error when a module defines a global variable and has no stacktrace\"  ([#10943](https://github.com/nim-lang/Nim/issues/10943))- Fixed \"std/json fails to escape most non-printables, breaking generation and parsing\"  ([#10541](https://github.com/nim-lang/Nim/issues/10541))- Fixed \"rst/markdown parser can't handle extra parentheses after link\"  ([#10475](https://github.com/nim-lang/Nim/issues/10475))- Fixed \"Random: proc rand(x: HSlice) requires substraction\"  ([#7698](https://github.com/nim-lang/Nim/issues/7698))- Fixed \"Bug in setTerminate()\"  ([#10765](https://github.com/nim-lang/Nim/issues/10765))- Fixed \"ICE when using --newruntime with proc returning tuple\"  ([#11004](https://github.com/nim-lang/Nim/issues/11004))- Fixed \"terminal.nim does not compile using --newruntime\"  ([#11005](https://github.com/nim-lang/Nim/issues/11005))- Fixed \"Casting a seq to another seq generates invalid code with --newruntime\"  ([#11018](https://github.com/nim-lang/Nim/issues/11018))- Fixed \"strformat/fmt doesn't work for custom types [regression]\"  ([#11012](https://github.com/nim-lang/Nim/issues/11012))- Fixed \"Casting a seq to another seq generates invalid code with --newruntime\"  ([#11018](https://github.com/nim-lang/Nim/issues/11018))- Fixed \"newruntime - `t.destructor != nil`  [AssertionError] with `toTable()`\"  ([#11014](https://github.com/nim-lang/Nim/issues/11014))- Fixed \"templates (e.g. sequtils.toSeq) often shadow `result`\"  ([#10732](https://github.com/nim-lang/Nim/issues/10732))- Fixed \"newruntime: `Error: system module needs: NimStringDesc` when calling `$` inside method on an object variant\"  ([#11048](https://github.com/nim-lang/Nim/issues/11048))- Fixed \"newruntime: internal error when iterating over seq (which is a field of an object) inside methods\"  ([#11050](https://github.com/nim-lang/Nim/issues/11050))- Fixed \"Error: internal error: '=destroy' operator not found for type owned Node\"  ([#11053](https://github.com/nim-lang/Nim/issues/11053))- Fixed \"`new` output can be assigned to an unowned ref\"  ([#11073](https://github.com/nim-lang/Nim/issues/11073))- Fixed \"Illegal storage access when adding to a ref seq\"  ([#11065](https://github.com/nim-lang/Nim/issues/11065))- Fixed \"strformat float printing doesn't print \".0\" portion [regression]\"  ([#11089](https://github.com/nim-lang/Nim/issues/11089))- Fixed \"nim doc2 ignores --docSeeSrcUrl parameter\"  ([#6071](https://github.com/nim-lang/Nim/issues/6071))- Fixed \"runnableExamples + forLoop = segfault\"  ([#11078](https://github.com/nim-lang/Nim/issues/11078))- Fixed \"destructible context without 'result' or 'return' should also be supported\"  ([#1192](https://github.com/nim-lang/Nim/issues/1192))- Fixed \"`new Obj` crashes at the end of the program on newruntime\"  ([#11082](https://github.com/nim-lang/Nim/issues/11082))- Fixed \"Documentation of the modules broken out of system.nim are missing \"  ([#10972](https://github.com/nim-lang/Nim/issues/10972))- Fixed \"DFA regression. Branches of AST trees are missed in control flow graph.\"  ([#11095](https://github.com/nim-lang/Nim/issues/11095))- Fixed \"[Regression] nkIdentDefs can be left in vmgen\"  ([#11111](https://github.com/nim-lang/Nim/issues/11111))- Fixed \"JS target does not prevent calling compileTime procs\"  ([#11133](https://github.com/nim-lang/Nim/issues/11133))- Fixed \"`rand` can return invalid values of a `range` type\"  ([#11015](https://github.com/nim-lang/Nim/issues/11015))- Fixed \"compiler crash on discard void\"  ([#7470](https://github.com/nim-lang/Nim/issues/7470))- Fixed \"Unowned ref can trivially escape without causing any crashes\"  ([#11114](https://github.com/nim-lang/Nim/issues/11114))- Fixed \"Destructor lifting regression\"  ([#11149](https://github.com/nim-lang/Nim/issues/11149))- Fixed \"`const` alias to compile time function fails.\"  ([#11045](https://github.com/nim-lang/Nim/issues/11045))- Fixed \"Using type instead of typedesc in template signature fails compilation\"  ([#11058](https://github.com/nim-lang/Nim/issues/11058))- Fixed \"Compiler error caused by quote do: else\"  ([#11175](https://github.com/nim-lang/Nim/issues/11175))- Fixed \"cast to non ptr UncheckedArray does not produce an error or warning\"  ([#9403](https://github.com/nim-lang/Nim/issues/9403))- Fixed \"`openArray` generates incorrect C code with \"incomplete type\"\"  ([#9578](https://github.com/nim-lang/Nim/issues/9578))- Fixed \"os:standalone Error: system module needs: appendString\"  ([#10978](https://github.com/nim-lang/Nim/issues/10978))- Fixed \"gensym regression\"  ([#10192](https://github.com/nim-lang/Nim/issues/10192))- Fixed \"new: module names need to be unique per Nimble broken on Windows\"  ([#11196](https://github.com/nim-lang/Nim/issues/11196))- Fixed \"Compiler crash on cfsml bindings\"  ([#11200](https://github.com/nim-lang/Nim/issues/11200))- Fixed \"Newruntime: compileTime variables can cause compilation to fail due to destructor injections\"  ([#11204](https://github.com/nim-lang/Nim/issues/11204))- Fixed \"object self-assignment order-of-evaluation broken\"  ([#9844](https://github.com/nim-lang/Nim/issues/9844))- Fixed \"seq self-assignment order-of-evaluation broken\"  ([#9684](https://github.com/nim-lang/Nim/issues/9684))- Fixed \"Compiler crash with generic types and static generic parameters\"  ([#7569](https://github.com/nim-lang/Nim/issues/7569))- Fixed \"C macro identifiers (e.g. errno) are not properly avoided in code generation\"  ([#11153](https://github.com/nim-lang/Nim/issues/11153))- Fixed \"SIGSEGV in asgnRefNoCycle with const sequence\"  ([#9825](https://github.com/nim-lang/Nim/issues/9825))- Fixed \"asyncdispatch could not be linked to nimrtl\"  ([#6855](https://github.com/nim-lang/Nim/issues/6855))- Fixed \"Newruntime: Bad C++ codegen for ref types with destructors\"  ([#11215](https://github.com/nim-lang/Nim/issues/11215))- Fixed \"Better error message for object variant with enum that is below it\"  ([#4140](https://github.com/nim-lang/Nim/issues/4140))- Fixed \"Can't declare a mixin.\"  ([#11237](https://github.com/nim-lang/Nim/issues/11237))- Fixed \"Nim doc mangles signed octal literals\"  ([#11131](https://github.com/nim-lang/Nim/issues/11131))- Fixed \"Selectors, Error: undeclared field: 'OSErrorCode' on macOS\"  ([#11124](https://github.com/nim-lang/Nim/issues/11124))- Fixed \"`--cppCompileToNamespace:foo` fails compilation with `import os`\"  ([#11194](https://github.com/nim-lang/Nim/issues/11194))- Fixed \"[OpenMP] Nim symbol interpolation support\"  ([#9365](https://github.com/nim-lang/Nim/issues/9365))- Fixed \"Inconsistent typing error with gensymed var\"  ([#7937](https://github.com/nim-lang/Nim/issues/7937))- Fixed \"New module names break file-specific flags\"  ([#11202](https://github.com/nim-lang/Nim/issues/11202))- Fixed \"inheritance for generics does not work\"  ([#88](https://github.com/nim-lang/Nim/issues/88))- Fixed \"Possible bug related to generics type resolution/matched\"  ([#6732](https://github.com/nim-lang/Nim/issues/6732))- Fixed \"static range type bounds not checked when conversion from intLit\"  ([#3766](https://github.com/nim-lang/Nim/issues/3766))- Fixed \"threadpool: sync() deadlocks in high-CPU-usage scenarios\"  ([#11250](https://github.com/nim-lang/Nim/issues/11250))- Fixed \"var result array - bad codegen (null pointer dereference)\"  ([#8053](https://github.com/nim-lang/Nim/issues/8053))- Fixed \"future/sugar `=>` syntax breaks with generics\"  ([#7816](https://github.com/nim-lang/Nim/issues/7816))- Fixed \"os.joinPath removes the leading backslash from UNC paths (regression)\"  ([#10952](https://github.com/nim-lang/Nim/issues/10952))- Fixed \"re: memory leak when calling re proc repeatedly\"  ([#11139](https://github.com/nim-lang/Nim/issues/11139))- Fixed \"threadpool: tests/parallel/tconvexhull.nim segfaults intermittently on systems with more than 4 cores\"  ([#11275](https://github.com/nim-lang/Nim/issues/11275))- Fixed \"Not equal when streams.readBool and peekBool compare `true`\"  ([#11049](https://github.com/nim-lang/Nim/issues/11049))- Fixed \"`os.tailDir` fails on some paths\"  ([#8395](https://github.com/nim-lang/Nim/issues/8395))- Fixed \"Power op ^ is not optimized for a: int; echo a ^ 2 case (minor bug)\"  ([#10910](https://github.com/nim-lang/Nim/issues/10910))- Fixed \"`str &= data` doesn't behave as `str = str & data`.\"  ([#10963](https://github.com/nim-lang/Nim/issues/10963))- Fixed \"Unable to make a const instance of an inherited, generic object.\"  ([#11268](https://github.com/nim-lang/Nim/issues/11268))- Fixed \"Overload precedence for non-builtin types\"  ([#11239](https://github.com/nim-lang/Nim/issues/11239))- Fixed \"Error when trying to iterate a distinct type based array\"  ([#7167](https://github.com/nim-lang/Nim/issues/7167))- Fixed \"Objects marked with {.exportc.} should be fully defined in generated header\"  ([#4723](https://github.com/nim-lang/Nim/issues/4723))- Fixed \"Generic function specialization regression\"  ([#6076](https://github.com/nim-lang/Nim/issues/6076))- Fixed \"compiler should give ambiguity errors in case of multiple compatible matches\"  ([#8568](https://github.com/nim-lang/Nim/issues/8568))- Fixed \"`xmltree.findAll` doesn't work as expected with `htmlparser` for non-lowercase names\"  ([#8329](https://github.com/nim-lang/Nim/issues/8329))- Fixed \"wrong stack trace information about the raised exception\"  ([#11309](https://github.com/nim-lang/Nim/issues/11309))- Fixed \"Newruntime: owned procs don't implicitly convert to unowned in `==`\"  ([#11257](https://github.com/nim-lang/Nim/issues/11257))- Fixed \"order of imports can cause errors\"  ([#11187](https://github.com/nim-lang/Nim/issues/11187))- Fixed \"Passing code via stdin to Nim stopped working [regression Nim 0.19+]\"  ([#11294](https://github.com/nim-lang/Nim/issues/11294))- Fixed \"\"--out:\" switch is ineffective with \"nim doc\" [regression]\"  ([#11312](https://github.com/nim-lang/Nim/issues/11312))- Fixed \"VC++ broken in devel: module machine type 'X86' conflicts with target machine type 'x64'\"  ([#11306](https://github.com/nim-lang/Nim/issues/11306))- Fixed \"Code that used `multi` aspect of multimethod now crashes at runtime\"  ([#10912](https://github.com/nim-lang/Nim/issues/10912))- Fixed \"symbol resolution issues when ambiguous call happens in generic proc\"  ([#11188](https://github.com/nim-lang/Nim/issues/11188))- Fixed \"compile pragma name collision\"  ([#10299](https://github.com/nim-lang/Nim/issues/10299))- Fixed \"Unexpected behaviour on method dispatch\"  ([#10038](https://github.com/nim-lang/Nim/issues/10038))- Fixed \"Nim object variant issue\"  ([#1286](https://github.com/nim-lang/Nim/issues/1286))- Fixed \"json.to macro cannot handle ambiguous types even in a full form (module.Type)\"  ([#11057](https://github.com/nim-lang/Nim/issues/11057))- Fixed \"Out of bounds access in CritBitTree\"  ([#11344](https://github.com/nim-lang/Nim/issues/11344))- Fixed \"Newruntime: assignment to discriminant field in case objects not supported\"  ([#11205](https://github.com/nim-lang/Nim/issues/11205))- Fixed \"Dynamic dispatch broken if base method returns generic var type\"  ([#6777](https://github.com/nim-lang/Nim/issues/6777))- Fixed \"newruntime and unused generics: compiler crash\"  ([#6755](https://github.com/nim-lang/Nim/issues/6755))- Fixed \"Type aliases do not work with Exceptions.\"  ([#10889](https://github.com/nim-lang/Nim/issues/10889))- Fixed \"Compiler crash when accessing constant in nested template\"  ([#5235](https://github.com/nim-lang/Nim/issues/5235))- Fixed \"unicode.nim Error: type mismatch: got <seq[char]> but expected 'string'\"  ([#9762](https://github.com/nim-lang/Nim/issues/9762))- Fixed \"Internal error with auto return in closure iterator\"  ([#5859](https://github.com/nim-lang/Nim/issues/5859))- Fixed \"[Compiler Crash] - getAST + hasCustomPragma\"  ([#7615](https://github.com/nim-lang/Nim/issues/7615))- Fixed \"debug mode compiler crash when executing some compile time code\"  ([#8199](https://github.com/nim-lang/Nim/issues/8199))- Fixed \"Compiler does not set `.typ` inside macros when creating literal NimNodes\"  ([#7792](https://github.com/nim-lang/Nim/issues/7792))- Fixed \"Error: internal error: expr: var not init sevColor_994035\"  ([#8573](https://github.com/nim-lang/Nim/issues/8573))- Fixed \"`internal error: could not find env param for` when one iterator references another\"  ([#9827](https://github.com/nim-lang/Nim/issues/9827))- Fixed \"internal error when assigning a type to a constant of typedesc\"  ([#9961](https://github.com/nim-lang/Nim/issues/9961))- Fixed \"Overload resolution regression\"  ([#11375](https://github.com/nim-lang/Nim/issues/11375))- Fixed \"strutils: toBin(64) uses '/' for the 63rd bit if it's set\"  ([#11369](https://github.com/nim-lang/Nim/issues/11369))- Fixed \"base64.encode should not \"prettify\" the result by default\"  ([#11364](https://github.com/nim-lang/Nim/issues/11364))- Fixed \"Nim ships latest nimble rather than stable\"  ([#11402](https://github.com/nim-lang/Nim/issues/11402))- Fixed \"`debugger:native` no longer generates pdb file with `cc:vcc`\"  ([#11405](https://github.com/nim-lang/Nim/issues/11405))", "content_with_meta": "---\ntitle: \"Version 0.20.0 released\"\nauthor: The Nim Team\nexcerpt: \"We are very proud to announce Nim version 0.20. This is a massive release, both literally and figuratively. It contains more than 1,000 commits and it marks our release candidate for version 1.0!\"\ntags: nim, python\n---\n\nWe are very proud to announce Nim version 0.20.\n\nThis is a massive release, both literally and figuratively.\nIt contains more than 1,000 commits *and* it marks our release candidate for version 1.0!\n\nVersion 0.20 introduces a number of breaking changes required for version 1.0.\nThese are changes that we feel have been necessary to include in Nim 1.0 and we currently have no plans for any further breaking changes.\nVersion 0.20 is effectively Nim 1.0 RC1.\n\nWhy not just release v1.0? We want to give the community a chance to test 0.20.0 and find bugs that *may* require breaking changes.\nThis is unlikely, but may require further release candidates.\nMake no mistake, this release represents what we consider Nim 1.0, we have been working towards this milestone for many years and are incredibly excited to reach it.\n\n\n\n# The stability guarantee\n\nA 1.0 release means that once either Nim 0.20.0 is promoted to 1.0 status, or another release candidate is, there will no longer be any breaking changes made.\nVersion 1.0 will become a long-term supported stable release that will only receive bug fixes and new features in the future, as long as they don’t break backwards compatibility.\n\nThe 1.0.x branch will receive bug fixes for as long as there is demand for them.\nNew features (which do not break backwards compatibility) will continue in steadily advancing 1.x branches.\n\nOur goal is to make sure that code which compiled under Nim 1.0 continues to compile under any stable Nim 1.x version.\n\n\n## What’s included under the stability guarantee?\n\nBackwards compatibility covers only the stable fragment of the language, as defined by the manual.\n\nThe compiler still implements experimental features which are documented in the newly written\n[“experimental manual”](https://nim-lang.org/docs/manual_experimental.html), these features are subject to changes which may be backwards incompatible, some of the features included under this umbrella are concepts, the do notation and a few others.\nBe wary of using these features in production, but do get in touch with us if you want to learn more about our plans regarding them.\n\nThe standard library is also covered, we will continue to deprecate procedures if we must, but they will remain supported throughout the 1.x version series.\n\n\n## Exceptions to the rule\n\nWe of course have to concede that there are exceptions.\nIn certain serious cases, like for example when a security vulnerability is discovered in the stdlib, we reserve the right to break code which uses it.\n\n\n\n# Installing 0.20.0\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.20.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n## Nimble 0.10.2\n\nThis release includes a brand new version of Nimble.\nSee [Nimble changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0102---03062019).\n\n\n## Contributors to v0.20\n\nOur contributors are amazing, and there is [far too many](https://github.com/nim-lang/Nim/graphs/contributors?from=2018-09-26&to=2019-06-06&type=c) to list here.\nBig thanks to all of you, we couldn’t have pulled off this release without you!\n\n\n\n# New features\n\nVersion 0.20 is positively jam packed with features.\nHere is a selection of our favourites:\n\n\n## `not` is always a unary operator\n\n```nim\nlet a = false\n\n# v0.19:\nassert not a # Error: type mismatch: got <proc (cond: untyped, msg: string): typed, bool>\nassert(not a) # workaround\n\n# v0.20:\nassert not a\n```\n\n\n## Stricter compile time checks for integer and float conversions\n\n```nim\n# v0.19:\nconst b = uint16(-1)\necho b # 65535\n\n# v0.20:\nconst b = uint16(-1)\n# Error: -1 can't be converted to uint16\nconst c = not uint16(0)\necho c # 65535\n```\n\n\n## Tuple unpacking for constant and for loop variables\n\n```nim\nconst (d, e) = (7, \"eight\")\n# v0.19: Error: identifier expected, but got '('\n\n# v0.20:\necho d # 7\necho e # eight\n\n\nlet f = @[(51, 10), (23, 25)]\n\nfor (x, y) in f: # v0.19: Error: identifier expected, but got '('\n  echo x + y\n# v0.20:\n# 61\n# 48\n```\n\n## Hash sets and tables are initialized by default\n\n```nim\nimport sets, tables\n\nvar s: HashSet[int]\n\ns.incl(5)\n# v0.19: `isValid(s)` Error: unhandled exception: The set needs to be initialized. [AssertionError]\n# v0.20:\necho s # {5}\n\n\nvar t: Table[char, int]\nt['a'] = 10\n# v0.19: Error: unhandled exception: index out of bounds [IndexError]\n# v0.20:\necho t # {'a': 10}\n```\n\n\n## Better error message for case-statements\n\n```nim\ntype\n  MyEnum = enum\n    first\n    second\n    third\n    fourth\n\nproc foo(x: MyEnum): int =\n  case x\n  of first: 1\n  of second: 2\n  of third: 3\n  of fourth: 4\n  else: 99\n\n# v0.19: compiles\n# v0.20: Error: invalid else, all cases are already covered\n\n\nproc bar(x: MyEnum): int =\n  case x\n  of first: 1\n  of third: 3\n\n# v0.19: Error: not all cases are covered\n# v0.20: Error: not all cases are covered; missing: {second, fourth}\n```\n\n\n## The length of a table must not change during iteration\n\n```nim\nimport tables\n\nvar xs = {1: \"one\", 2: \"two\", 3: \"three\"}.toTable\n\nfor x in xs.keys:\n  if x mod 2 == 0:\n    xs[10*x] = \"a lot\"\necho xs\n\n# v0.19: {200: \"a lot\", 1: \"one\", 2: \"two\", 3: \"three\", 20: \"a lot\"}\n# v0.20: Error: unhandled exception: the length of the table changed while iterating over it [AssertionError]\n```\n\n\n## Better error message for index out of bounds\n\n```nim\nlet a = [10, 20, 30]\n\necho a[5]\n# v0.19: Error: index out of bounds\n# v0.20: Error: index 5 not in 0 .. 2\n```\n\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n- `shr` is now sign preserving. Use `-d:nimOldShiftRight` to enable\n  the old behavior globally.\n\n- The ``isLower``, ``isUpper`` family of procs in strutils/unicode\n  operating on **strings** have been\n  deprecated since it was unclear what these do. Note that the much more\n  useful procs that operate on ``char`` or ``Rune`` are not affected.\n\n- `strutils.editDistance` has been deprecated,\n  use `editdistance.editDistance` or `editdistance.editDistanceAscii`\n  instead.\n\n- The OpenMP parallel iterator \\``||`\\` now supports any `#pragma omp directive`\n  and not just `#pragma omp parallel for`. See\n  [OpenMP documentation](https://www.openmp.org/wp-content/uploads/OpenMP-4.5-1115-CPP-web.pdf).\n\n  The default annotation is `parallel for`, if you used OpenMP without annotation\n  the change is transparent, if you used annotations you will have to prefix\n  your previous annotations with `parallel for`.\n\n  Furthermore, an overload with positive stepping is available.\n\n- The `unchecked` pragma was removed, instead use `system.UncheckedArray`.\n\n- The undocumented ``#? strongSpaces`` parsing mode has been removed.\n\n- The `not` operator is now always a unary operator, this means that code like\n  ``assert not isFalse(3)`` compiles.\n\n- `getImpl` on a `var` or `let` symbol will now return the full `IdentDefs`\n  tree from the symbol declaration instead of just the initializer portion.\n\n- Methods are now ordinary \"single\" methods, only the first parameter is\n  used to select the variant at runtime. For backwards compatibility\n  use the new `--multimethods:on` switch.\n\n- Generic methods are now deprecated; they never worked well.\n\n- Compile time checks for integer and float conversions are now stricter.\n  For example, `const x = uint32(-1)` now gives a compile time error instead\n  of being equivalent to `const x = 0xFFFFFFFF'u32`.\n\n- Using `typed` as the result type in templates/macros now means\n  \"expression with a type\". The old meaning of `typed` is preserved\n  as `void` or no result type at all.\n\n- A bug allowed `macro foo(): int = 123` to compile even though a\n  macro has to return a `NimNode`. This has been fixed.\n\n- With the exception of `uint` and `uint64`, conversion to unsigned types\n  are now range checked during runtime.\n\n- Macro arguments of type `typedesc` are now passed to the macro as\n  `NimNode` like every other type except `static`. Use `typed` for a\n  behavior that is identical in new and old\n  Nim. See the RFC [Pass typedesc as NimNode to macros](https://github.com/nim-lang/RFCs/issues/148)\n  for more details.\n\n\n### Breaking changes in the standard library\n\n- `osproc.execProcess` now also takes a `workingDir` parameter.\n\n- `std/sha1.secureHash` now accepts `openArray[char]`, not `string`. (Former\n   successful matches should keep working, though former failures will not.)\n\n- `options.UnpackError` is no longer a ref type and inherits from `system.Defect`\n  instead of `system.ValueError`.\n\n- `system.ValueError` now inherits from `system.CatchableError` instead of `system.Defect`.\n\n- The procs `parseutils.parseBiggestInt`, `parseutils.parseInt`,\n  `parseutils.parseBiggestUInt` and `parseutils.parseUInt` now raise a\n  `ValueError` when the parsed integer is outside of the valid range.\n  Previously they sometimes raised an `OverflowError` and sometimes they\n  returned `0`.\n\n- The procs `parseutils.parseBin`, `parseutils.parseOct` and `parseutils.parseHex`\n  were not clearing their `var` parameter `number` and used to push its value to\n  the left when storing the parsed string into it. Now they always set the value\n  of the parameter to `0` before storing the result of the parsing, unless the\n  string to parse is not valid (then the value of `number` is not changed).\n\n- `streams.StreamObject` now restricts its fields to only raise `system.Defect`,\n  `system.IOError` and `system.OSError`.\n  This change only affects custom stream implementations.\n\n- nre's `RegexMatch.{captureBounds,captures}[]`  no longer return `Option` or\n  `nil`/`\"\"`, respectively. Use the newly added `n in p.captures` method to\n  check if a group is captured, otherwise you'll receive an exception.\n\n- nre's `RegexMatch.{captureBounds,captures}.toTable` no longer accept a\n  default parameter. Instead uncaptured entries are left empty. Use\n  `Table.getOrDefault()` if you need defaults.\n\n- nre's `RegexMatch.captures.{items,toSeq}` now returns an `Option[string]`\n  instead of a `string`. With the removal of `nil` strings, this is the only\n  way to indicate a missing match. Inside your loops, instead\n  of `capture == \"\"` or `capture == nil`, use `capture.isSome` to check if a capture is\n  present, and `capture.get` to get its value.\n\n- nre's `replace()` no longer throws `ValueError` when the replacement string\n  has missing captures. It instead throws `KeyError` for named captures, and\n  `IndexError` for unnamed captures. This is consistent with\n  `RegexMatch.{captureBounds,captures}[]`.\n\n- `splitFile` now correctly handles edge cases, see #10047.\n\n- `isNil` is no longer false for undefined in the JavaScript backend:\n  now it's true for both nil and undefined.\n  Use `isNull` or `isUndefined` if you need exact equality:\n  `isNil` is consistent with `===`, `isNull` and `isUndefined` with `==`.\n\n- several deprecated modules were removed: `ssl`, `matchers`, `httpserver`,\n  `unsigned`, `actors`, `parseurl`\n\n- two poorly documented and not used modules (`subexes`, `scgi`) were moved to\n  graveyard (they are available as Nimble packages)\n\n- procs `string.add(int)` and `string.add(float)` which implicitly convert\n  ints and floats to string have been deprecated.\n  Use `string.addInt(int)` and `string.addFloat(float)` instead.\n\n- ``case object`` branch transitions via ``system.reset`` are deprecated.\n  Compile your code with ``-d:nimOldCaseObjects`` for a transition period.\n\n- base64 module: The default parameter `newLine` for the `encode` procs\n  was changed from `\"\\13\\10\"` to the empty string `\"\"`.\n\n\n### Breaking changes in the compiler\n\n- The compiler now implements the \"generic symbol prepass\" for `when` statements\n  in generics, see bug #8603. This means that code like this does not compile\n  anymore:\n\n```nim\nproc enumToString*(enums: openArray[enum]): string =\n  # typo: 'e' instead 'enums'\n  when e.low.ord >= 0 and e.high.ord < 256:\n    result = newString(enums.len)\n  else:\n    result = newString(enums.len * 2)\n```\n\n- ``discard x`` is now illegal when `x` is a function symbol.\n\n- Implicit imports via ``--import: module`` in a config file are now restricted\n  to the main package.\n\n\n## Library additions\n\n- There is a new stdlib module `std/editdistance` as a replacement for the\n  deprecated `strutils.editDistance`.\n\n- There is a new stdlib module `std/wordwrap` as a replacement for the\n  deprecated `strutils.wordwrap`.\n\n- Added `split`, `splitWhitespace`, `size`, `alignLeft`, `align`,\n  `strip`, `repeat` procs and iterators to `unicode.nim`.\n\n- Added `or` for `NimNode` in `macros`.\n\n- Added `system.typeof` for more control over how `type` expressions\n  can be deduced.\n\n- Added `macros.isInstantiationOf` for checking if the proc symbol\n  is instantiation of generic proc symbol.\n\n- Added the parameter ``isSorted`` for the ``sequtils.deduplicate`` proc.\n\n- Added `os.relativePath`.\n\n- Added `parseopt.remainingArgs`.\n\n- Added `os.getCurrentCompilerExe` (implemented as `getAppFilename` at CT),\n  can be used to retrieve the currently executing compiler.\n\n- Added `xmltree.toXmlAttributes`.\n\n- Added ``std/sums`` module for fast summation functions.\n\n- Added `Rusage`, `getrusage`, `wait4` to the posix interface.\n\n- Added the `posix_utils` module.\n\n- Added `system.default`.\n\n- Added `sequtils.items` for closure iterators, allows closure iterators\n  to be used by the `mapIt`, `filterIt`, `allIt`, `anyIt`, etc.\n\n\n## Library changes\n\n- The string output of `macros.lispRepr` proc has been tweaked\n  slightly. The `dumpLisp` macro in this module now outputs an\n  indented proper Lisp, devoid of commas.\n\n- Added `macros.signatureHash` that returns a stable identifier\n  derived from the signature of a symbol.\n\n- In `strutils` empty strings now no longer match as substrings.\n\n- The `Complex` type is now a generic object and not a tuple anymore.\n\n- The `ospaths` module is now deprecated, use `os` instead. Note that\n  `os` is available in a NimScript environment but unsupported\n  operations produce a compile-time error.\n\n- The `parseopt` module now supports a new flag `allowWhitespaceAfterColon`\n  (default value: true) that can be set to `false` for better Posix\n  interoperability. (Bug #9619.)\n\n- `os.joinPath` and `os.normalizePath` handle edge cases like ``\"a/b/../../..\"``\n  differently.\n\n- `securehash` was moved to `lib/deprecated`.\n\n- The switch ``-d:useWinAnsi`` is not supported anymore.\n\n- In `times` module, procs `format` and `parse` accept a new optional\n  `DateTimeLocale` argument for formatting/parsing dates in other languages.\n\n\n## Language additions\n\n- Vm support for float32<->int32 and float64<->int64 casts was added.\n- There is a new pragma block `noSideEffect` that works like\n  the `gcsafe` pragma block.\n- added `os.getCurrentProcessId`.\n- User defined pragmas are now allowed in the pragma blocks.\n- Pragma blocks are no longer eliminated from the typed AST tree to preserve\n  pragmas for further analysis by macros.\n- Custom pragmas are now supported for `var` and `let` symbols.\n- Tuple unpacking is now supported for constants and for loop variables.\n- Case object branches can be initialized with a runtime discriminator if\n  possible discriminator values are constrained within a case statement.\n\n## Language changes\n\n- The standard extension for SCF (source code filters) files was changed from\n  ``.tmpl`` to ``.nimf``,\n  it's more recognizable and allows tools like Github to recognize it as Nim,\n  see [#9647](https://github.com/nim-lang/Nim/issues/9647).\n  The previous extension will continue to work.\n\n- Pragma syntax is now consistent. Previous syntax where type pragmas did not\n  follow the type name is now deprecated. Also pragma before generic parameter\n  list is deprecated to be consistent with how pragmas are used with a proc. See\n  [#8514](https://github.com/nim-lang/Nim/issues/8514) and\n  [#1872](https://github.com/nim-lang/Nim/issues/1872) for further details.\n\n- Hash sets and tables are initialized by default. The explicit `initHashSet`,\n  `initTable`, etc. are not needed anymore.\n\n\n### Tool changes\n\n- `jsondoc` now includes a `moduleDescription` field with the module\n  description. `jsondoc0` shows comments as its own objects as shown in the\n  documentation.\n- `nimpretty`: --backup now defaults to `off` instead of `on` and the flag was\n  undocumented; use `git` instead of relying on backup files.\n- `koch` now defaults to build the latest *stable* Nimble version unless you\n  explicitly ask for the latest master version via `--latest`.\n\n\n### Compiler changes\n\n- The deprecated `fmod` proc is now unavailable on the VM.\n- A new `--outdir` option was added.\n- The compiled JavaScript file for the project produced by executing `nim js`\n  will no longer be placed in the nimcache directory.\n- The `--hotCodeReloading` has been implemented for the native targets.\n  The compiler also provides a new more flexible API for handling the\n  hot code reloading events in the code.\n- The compiler now supports a ``--expandMacro:macroNameHere`` switch\n  for easy introspection into what a macro expands into.\n- The `-d:release` switch now does not disable runtime checks anymore.\n  For a release build that also disables runtime checks\n  use `-d:release -d:danger` or simply `-d:danger`.\n\n\n\n## Bugfixes\n\n- Fixed \"distinct generic typeclass not treated as distinct\"\n  ([#4435](https://github.com/nim-lang/Nim/issues/4435))\n- Fixed \"multiple dynlib pragmas with function calls conflict with each other causing link time error\"\n  ([#9222](https://github.com/nim-lang/Nim/issues/9222))\n- Fixed \"[RFC] `extractFilename(\"usr/lib/\")` should return \"lib\" (not \"\") and be called `baseName` (since works with dirs)\"\n  ([#8341](https://github.com/nim-lang/Nim/issues/8341))\n- Fixed \"\\0 in comment replaced with 0 in docs\"\n  ([#8841](https://github.com/nim-lang/Nim/issues/8841))\n- Fixed \"round function in Math library sometimes doesn't work\"\n  ([#9082](https://github.com/nim-lang/Nim/issues/9082))\n- Fixed \"Async readAll in httpclient produces garbled output.\"\n  ([#8994](https://github.com/nim-lang/Nim/issues/8994))\n- Fixed \"[regression] project `config.nims` not being read anymore\"\n  ([#9264](https://github.com/nim-lang/Nim/issues/9264))\n- Fixed \"Using iterator within another iterator fails\"\n  ([#3819](https://github.com/nim-lang/Nim/issues/3819))\n- Fixed \"`nim js -o:dirname main.nim` writes nothing, and no error shown\"\n  ([#9154](https://github.com/nim-lang/Nim/issues/9154))\n- Fixed \"Wrong number of deallocations when using destructors\"\n  ([#9263](https://github.com/nim-lang/Nim/issues/9263))\n- Fixed \"devel docs in nim-lang.github.io `Source` links point to master instead of devel\"\n  ([#9295](https://github.com/nim-lang/Nim/issues/9295))\n- Fixed \"compiler/nimeval can't be used twice: fails 2nd time with: `Error: internal error: n is not nil`\"\n  ([#9180](https://github.com/nim-lang/Nim/issues/9180))\n- Fixed \"Codegen bug with exportc\"\n  ([#9297](https://github.com/nim-lang/Nim/issues/9297))\n- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"\n  ([#9306](https://github.com/nim-lang/Nim/issues/9306))\n- Fixed \"Openarray: internal compiler error when accessing length if not a param\"\n  ([#9281](https://github.com/nim-lang/Nim/issues/9281))\n- Fixed \"finish completely removing web folder\"\n  ([#9304](https://github.com/nim-lang/Nim/issues/9304))\n- Fixed \"counting the empty substring in a string results in infinite loop\"\n  ([#8919](https://github.com/nim-lang/Nim/issues/8919))\n- Fixed \"[Destructors] Wrong moves and copies\"\n  ([#9294](https://github.com/nim-lang/Nim/issues/9294))\n- Fixed \"`proc isNil*(x: Any): bool =` should be updated with non nil string, seq\"\n  ([#8916](https://github.com/nim-lang/Nim/issues/8916))\n- Fixed \"doAssert AST expansion excessive\"\n  ([#8518](https://github.com/nim-lang/Nim/issues/8518))\n- Fixed \"when Foo (of type iterator) is used where an expression is expected, show useful err msg instead of confusing `Error: attempting to call undeclared routine Foo`\"\n  ([#8671](https://github.com/nim-lang/Nim/issues/8671))\n- Fixed \"List comprehensions do not work with generic parameter\"\n  ([#5707](https://github.com/nim-lang/Nim/issues/5707))\n- Fixed \"strutils/isUpperAscii and unicode/isUpper consider space, punctuations, numbers as \"lowercase\"\"\n  ([#7963](https://github.com/nim-lang/Nim/issues/7963))\n- Fixed \"Regular Expressions: replacing empty patterns only works correctly in nre\"\n  ([#9306](https://github.com/nim-lang/Nim/issues/9306))\n- Fixed \"BUG: os.isHidden doesn't work with directories; should use just paths, not filesystem access\"\n  ([#8225](https://github.com/nim-lang/Nim/issues/8225))\n- Fixed \"Unable to create distinct tuple in a const with a type declaration\"\n  ([#2760](https://github.com/nim-lang/Nim/issues/2760))\n- Fixed \"[nimpretty] raw strings are transformed into normal strings\"\n  ([#9236](https://github.com/nim-lang/Nim/issues/9236))\n- Fixed \"[nimpretty] proc is transfered to incorrect code\"\n  ([#8626](https://github.com/nim-lang/Nim/issues/8626))\n- Fixed \"[nimpretty] Additional new line is added with each format\"\n  ([#9144](https://github.com/nim-lang/Nim/issues/9144))\n- Fixed \"\"%NIM%/config/nim.cfg\" is not being read\"\n  ([#9244](https://github.com/nim-lang/Nim/issues/9244))\n- Fixed \"Illegal capture on async proc (except when the argument is `seq`)\"\n  ([#2361](https://github.com/nim-lang/Nim/issues/2361))\n- Fixed \"Jsondoc0 doesn't output module comments.\"\n  ([#9364](https://github.com/nim-lang/Nim/issues/9364))\n- Fixed \"NimPretty has troubles with source code filter\"\n  ([#9384](https://github.com/nim-lang/Nim/issues/9384))\n- Fixed \"tfragment_gc test is flaky on OSX\"\n  ([#9421](https://github.com/nim-lang/Nim/issues/9421))\n- Fixed \"ansi color code templates fail to bind symbols\"\n  ([#9394](https://github.com/nim-lang/Nim/issues/9394))\n- Fixed \"Term write rule crash compiler.\"\n  ([#7972](https://github.com/nim-lang/Nim/issues/7972))\n- Fixed \"SIGSEGV when converting `lines` to closure iterator, most likely caused by defer\"\n  ([#5321](https://github.com/nim-lang/Nim/issues/5321))\n- Fixed \"SIGSEGV during the compile\"\n  ([#5519](https://github.com/nim-lang/Nim/issues/5519))\n- Fixed \"Compiler crash when creating a variant type\"\n  ([#6220](https://github.com/nim-lang/Nim/issues/6220))\n- Fixed \"\"continue\" inside a block without loops gives \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\"\n  ([#6367](https://github.com/nim-lang/Nim/issues/6367))\n- Fixed \"old changelogs should be kept instead of erased\"\n  ([#9376](https://github.com/nim-lang/Nim/issues/9376))\n- Fixed \"illegal recursion with generic typeclass\"\n  ([#4674](https://github.com/nim-lang/Nim/issues/4674))\n- Fixed \"Crash when closing an unopened file on debian 8.\"\n  ([#9456](https://github.com/nim-lang/Nim/issues/9456))\n- Fixed \"nimpretty joins regular and doc comment\"\n  ([#9400](https://github.com/nim-lang/Nim/issues/9400))\n- Fixed \"nimpretty changes indentation level of trailing comment\"\n  ([#9398](https://github.com/nim-lang/Nim/issues/9398))\n- Fixed \"Some bugs with nimpretty\"\n  ([#8078](https://github.com/nim-lang/Nim/issues/8078))\n- Fixed \"Computed gotos: bad codegen, label collision with if/statement in the while body\"\n  ([#9276](https://github.com/nim-lang/Nim/issues/9276))\n- Fixed \"nimpretty not idempotent: keeps adding newlines below block comment\"\n  ([#9483](https://github.com/nim-lang/Nim/issues/9483))\n- Fixed \"nimpretty shouldn't format differently whether there's a top-level newline\"\n  ([#9484](https://github.com/nim-lang/Nim/issues/9484))\n- Fixed \"Regression: 0.18 code with mapIt() fails to compile on 0.19\"\n  ([#9093](https://github.com/nim-lang/Nim/issues/9093))\n- Fixed \"nimpretty shouldn't change file modif time if no changes => use os.updateFile\"\n  ([#9499](https://github.com/nim-lang/Nim/issues/9499))\n- Fixed \"Nim/compiler/pathutils.nim(226, 12) `canon\"/foo/../bar\" == \"/bar\"`  [AssertionError]\"\n  ([#9507](https://github.com/nim-lang/Nim/issues/9507))\n- Fixed \"nimpretty adds a space before type, ptr, ref, object in wrong places\"\n  ([#9504](https://github.com/nim-lang/Nim/issues/9504))\n- Fixed \"nimpretty badly indents block comment\"\n  ([#9500](https://github.com/nim-lang/Nim/issues/9500))\n- Fixed \"typeof: Error: illformed AST: typeof(myIter(), typeOfIter)\"\n  ([#9498](https://github.com/nim-lang/Nim/issues/9498))\n- Fixed \"newAsyncSmtp() raises exception with Nim 0.19.0\"\n  ([#9358](https://github.com/nim-lang/Nim/issues/9358))\n- Fixed \"nimpretty wrongly adds empty newlines inside proc signature\"\n  ([#9506](https://github.com/nim-lang/Nim/issues/9506))\n- Fixed \"HttpClient: requesting URL with no scheme fails\"\n  ([#7842](https://github.com/nim-lang/Nim/issues/7842))\n- Fixed \"Duplicate definition in cpp codegen\"\n  ([#6986](https://github.com/nim-lang/Nim/issues/6986))\n- Fixed \"Sugar - distinctBase: undeclared identifier uncheckedArray\"\n  ([#9532](https://github.com/nim-lang/Nim/issues/9532))\n- Fixed \"Portable fsmonitor\"\n  ([#6718](https://github.com/nim-lang/Nim/issues/6718))\n- Fixed \"Small RFC. Minimal stacktrace for Exceptions when frames are disabled\"\n  ([#9434](https://github.com/nim-lang/Nim/issues/9434))\n- Fixed \"`nim doc strutils.nim` fails on 32 bit compiler with AssertionError on a RunnableExample\"\n  ([#9525](https://github.com/nim-lang/Nim/issues/9525))\n- Fixed \"Error: undeclared identifier: '|'\"\n  ([#9540](https://github.com/nim-lang/Nim/issues/9540))\n- Fixed \"using Selectors, Error: undeclared field: 'OSErrorCode'\"\n  ([#7667](https://github.com/nim-lang/Nim/issues/7667))\n- Fixed \"The \"--\" template from module nimscript mis-translates \"out\" key\"\n  ([#6011](https://github.com/nim-lang/Nim/issues/6011))\n- Fixed \"logging error should go to stderr instead of stdout\"\n  ([#9547](https://github.com/nim-lang/Nim/issues/9547))\n- Fixed \"when in generic should fail earlier\"\n  ([#8603](https://github.com/nim-lang/Nim/issues/8603))\n- Fixed \"C++ codegen error when iterating in finally block in topmost scope\"\n  ([#5549](https://github.com/nim-lang/Nim/issues/5549))\n- Fixed \"document `nim --nep1:on`\"\n  ([#9564](https://github.com/nim-lang/Nim/issues/9564))\n- Fixed \"C++ codegen error when iterating in finally block in topmost scope\"\n  ([#5549](https://github.com/nim-lang/Nim/issues/5549))\n- Fixed \"strutils.multiReplace() crashes if search string is \"\"\"\n  ([#9557](https://github.com/nim-lang/Nim/issues/9557))\n- Fixed \"Missing docstrings are replaced with other text\"\n  ([#9169](https://github.com/nim-lang/Nim/issues/9169))\n- Fixed \"Type which followed by a function and generated by a template will not shown in docs generated by `nim doc`\"\n  ([#9235](https://github.com/nim-lang/Nim/issues/9235))\n- Fixed \"templates expand doc comments as documentation of other procedures\"\n  ([#9432](https://github.com/nim-lang/Nim/issues/9432))\n- Fixed \"please implement http put and delete in httpClient\"\n  ([#8777](https://github.com/nim-lang/Nim/issues/8777))\n- Fixed \"Module docs: 2 suggestions...\"\n  ([#5525](https://github.com/nim-lang/Nim/issues/5525))\n- Fixed \"math.hypot under/overflows\"\n  ([#9585](https://github.com/nim-lang/Nim/issues/9585))\n- Fixed \"`=sink` gets called on `result` when not used explicitly\"\n  ([#9594](https://github.com/nim-lang/Nim/issues/9594))\n- Fixed \"Treat compl as a c++ keyword\"\n  ([#6836](https://github.com/nim-lang/Nim/issues/6836))\n- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"\n  ([#9556](https://github.com/nim-lang/Nim/issues/9556))\n- Fixed \"`nim check` gives `SIGSEGV: Illegal storage access`  ; maybe because of sizeof\"\n  ([#9610](https://github.com/nim-lang/Nim/issues/9610))\n- Fixed \"Cannot use a typedesc variable in a template\"\n  ([#9611](https://github.com/nim-lang/Nim/issues/9611))\n- Fixed \"`=sink` gets called on `result` when not used explicitly\"\n  ([#9594](https://github.com/nim-lang/Nim/issues/9594))\n- Fixed \"[NimScript] Error: arguments can only be given if the '--run' option is selected\"\n  ([#9246](https://github.com/nim-lang/Nim/issues/9246))\n- Fixed \"macros.getTypeImpl regression, crash when trying to query type information from ref object\"\n  ([#9600](https://github.com/nim-lang/Nim/issues/9600))\n- Fixed \"[Regression] Complex.re and Complex.im are private\"\n  ([#9639](https://github.com/nim-lang/Nim/issues/9639))\n- Fixed \"nim check: `internal error: (filename: \"vmgen.nim\", line: 1119, column: 19)`\"\n  ([#9609](https://github.com/nim-lang/Nim/issues/9609))\n- Fixed \"`optInd` missing indent specification in grammar.txt\"\n  ([#9608](https://github.com/nim-lang/Nim/issues/9608))\n- Fixed \"`not` as prefix operator causes problems\"\n  ([#9574](https://github.com/nim-lang/Nim/issues/9574))\n- Fixed \"It is not possible to specify a pragma for the proc that returns `lent T`\"\n  ([#9633](https://github.com/nim-lang/Nim/issues/9633))\n- Fixed \"Compiler crash when initializing table with module name\"\n  ([#9319](https://github.com/nim-lang/Nim/issues/9319))\n- Fixed \"compiler crash\"\n  ([#8335](https://github.com/nim-lang/Nim/issues/8335))\n- Fixed \"\"SIGSEGV\" without any \"undeclared identifier\" error\"\n  ([#8011](https://github.com/nim-lang/Nim/issues/8011))\n- Fixed \"Incorrect parseopt parsing ?\"\n  ([#9619](https://github.com/nim-lang/Nim/issues/9619))\n- Fixed \"Operator `or` causes a future to be completed more than once\"\n  ([#8982](https://github.com/nim-lang/Nim/issues/8982))\n- Fixed \"Nimpretty adds instead of removes incorrect spacing inside backticks\"\n  ([#9673](https://github.com/nim-lang/Nim/issues/9673))\n- Fixed \"nimpretty should hardcode indentation amount to 2 spaces\"\n  ([#9502](https://github.com/nim-lang/Nim/issues/9502))\n- Fixed \"callSoon() is not working prior getGlobalDispatcher().\"\n  ([#7192](https://github.com/nim-lang/Nim/issues/7192))\n- Fixed \"use nimf as standardized extention for nim files with source code filter?\"\n  ([#9647](https://github.com/nim-lang/Nim/issues/9647))\n- Fixed \"Banning copy for a type prevents composing\"\n  ([#9692](https://github.com/nim-lang/Nim/issues/9692))\n- Fixed \"smtp module doesn't support threads.\"\n  ([#9728](https://github.com/nim-lang/Nim/issues/9728))\n- Fixed \"Compiler segfault (stack overflow) compiling code on 0.19.0 that works on 0.18.0\"\n  ([#9694](https://github.com/nim-lang/Nim/issues/9694))\n- Fixed \"nre doesn't document quantifiers `re\"foo{2,4}\"`\"\n  ([#9470](https://github.com/nim-lang/Nim/issues/9470))\n- Fixed \"ospaths still referenced despite its deprecation\"\n  ([#9671](https://github.com/nim-lang/Nim/issues/9671))\n- Fixed \"`move` on dereferenced pointer results in bogus value\"\n  ([#9743](https://github.com/nim-lang/Nim/issues/9743))\n- Fixed \"regression in discard statement\"\n  ([#9726](https://github.com/nim-lang/Nim/issues/9726))\n- Fixed \"try statements and exceptions do not cooperate well\"\n  ([#96](https://github.com/nim-lang/Nim/issues/96))\n- Fixed \"XDeclaredButNotUsed doesn't work with template, let/var/const, type; works with all other routine nodes\"\n  ([#9764](https://github.com/nim-lang/Nim/issues/9764))\n- Fixed \"` Warning: fun is deprecated` doesn't check whether deprecated overload is actually used\"\n  ([#9759](https://github.com/nim-lang/Nim/issues/9759))\n- Fixed \"Regression: tuple sizeof is incorrect if contains imported object\"\n  ([#9794](https://github.com/nim-lang/Nim/issues/9794))\n- Fixed \"Internal error when calling `=destroy` without declaration\"\n  ([#9675](https://github.com/nim-lang/Nim/issues/9675))\n- Fixed \"Internal error if `=sink` is used explictly\"\n  ([#7365](https://github.com/nim-lang/Nim/issues/7365))\n- Fixed \"unicode.strip behaving oddly\"\n  ([#9800](https://github.com/nim-lang/Nim/issues/9800))\n- Fixed \"X_examples.nim generated by runnableExamples should show line number where they came from\"\n  ([#8289](https://github.com/nim-lang/Nim/issues/8289))\n- Fixed \"quit() fails with \"unreachable statement after 'return'\"\"\n  ([#9832](https://github.com/nim-lang/Nim/issues/9832))\n- Fixed \"quit() fails with \"unreachable statement after 'return'\"\"\n  ([#9832](https://github.com/nim-lang/Nim/issues/9832))\n- Fixed \"`Error: internal error: genLiteral: ty is nil` when a `var` is accessed in `quote do`\"\n  ([#9864](https://github.com/nim-lang/Nim/issues/9864))\n- Fixed \"Regression: sizeof Error: cannot instantiate: 'T'\"\n  ([#9868](https://github.com/nim-lang/Nim/issues/9868))\n- Fixed \"Using a template as a routine pragma no longer works\"\n  ([#9614](https://github.com/nim-lang/Nim/issues/9614))\n- Fixed \"Clang error on Rosencrantz\"\n  ([#9441](https://github.com/nim-lang/Nim/issues/9441))\n- Fixed \"Enum fields get hintXDeclaredButNotUsed hint even when marked with used pragma\"\n  ([#9896](https://github.com/nim-lang/Nim/issues/9896))\n- Fixed \"internal error: environment misses\"\n  ([#9476](https://github.com/nim-lang/Nim/issues/9476))\n- Fixed \"SIGSEGV: `setLen` on a seq doesn't construct objects at CT\"\n  ([#9872](https://github.com/nim-lang/Nim/issues/9872))\n- Fixed \"Latest HEAD segfaults when compiling Aporia\"\n  ([#9889](https://github.com/nim-lang/Nim/issues/9889))\n- Fixed \"Unnecessary semicolon in error message\"\n  ([#9907](https://github.com/nim-lang/Nim/issues/9907))\n- Fixed \"`koch temp c t.nim` tries to look up `t.nim` in nim install directory (alongside koch)\"\n  ([#9913](https://github.com/nim-lang/Nim/issues/9913))\n- Fixed \"Regression: sizeof Error: cannot instantiate: 'T'\"\n  ([#9868](https://github.com/nim-lang/Nim/issues/9868))\n- Fixed \"Showstopper regression: Nimscript no longer works \"\n  ([#9965](https://github.com/nim-lang/Nim/issues/9965))\n- Fixed \"Global imports in cfg file broken\"\n  ([#9978](https://github.com/nim-lang/Nim/issues/9978))\n- Fixed \"Global imports in cfg file broken\"\n  ([#9978](https://github.com/nim-lang/Nim/issues/9978))\n- Fixed \"Regression - Nim compiler shows all gcc commands used when config.nims present\"\n  ([#9982](https://github.com/nim-lang/Nim/issues/9982))\n- Fixed \"[regression] Nimscript makes a program slower and more bloated\"\n  ([#9995](https://github.com/nim-lang/Nim/issues/9995))\n- Fixed \"Regression in Nimscript projectDir() behavior, returns empty string\"\n  ([#9985](https://github.com/nim-lang/Nim/issues/9985))\n- Fixed \"Global imports don't work for non-std modules\"\n  ([#9994](https://github.com/nim-lang/Nim/issues/9994))\n- Fixed \"Object constructor regression in JS backend\"\n  ([#10005](https://github.com/nim-lang/Nim/issues/10005))\n- Fixed \"Regression: `nimble install` fails on nim devel\"\n  ([#9991](https://github.com/nim-lang/Nim/issues/9991))\n- Fixed \"Another config.nims regression\"\n  ([#9989](https://github.com/nim-lang/Nim/issues/9989))\n- Fixed \"`nim js -d:nodejs main.nim` gives: `system.nim(1443, 7) Error: cannot 'importc' variable at compile time` with a config.nims\"\n  ([#9153](https://github.com/nim-lang/Nim/issues/9153))\n- Fixed \"how to profile? using `--profiler:on` causes: Error: undeclared identifier: 'framePtr'\"\n  ([#8991](https://github.com/nim-lang/Nim/issues/8991))\n- Fixed \"nim doc fail on lib/system/profiler.nim\"\n  ([#9420](https://github.com/nim-lang/Nim/issues/9420))\n- Fixed \"[regression] ./koch tests: Error: overloaded 'readFile' leads to ambiguous calls (with ~/.config/nim/config.nims)\"\n  ([#9120](https://github.com/nim-lang/Nim/issues/9120))\n- Fixed \"regression: normalizePath(\"foo/..\") now incorrectly returns `\"\"`, should be `\".\"` like before + in almost all other languages\"\n  ([#10017](https://github.com/nim-lang/Nim/issues/10017))\n- Fixed \"Incorrect 'not all cases are covered' when using enums with nonconsecutive items\"\n  ([#3060](https://github.com/nim-lang/Nim/issues/3060))\n- Fixed \"[ospaths] BUG: splitFile(\"/a.txt\").dir = \"\" ; + other bugs with splitFile\"\n  ([#8255](https://github.com/nim-lang/Nim/issues/8255))\n- Fixed \"GC bug: seems very slow where it shouldn't; maybe it leaks?\"\n  ([#10040](https://github.com/nim-lang/Nim/issues/10040))\n- Fixed \"Closure bug with the JS backend\"\n  ([#7048](https://github.com/nim-lang/Nim/issues/7048))\n- Fixed \"Error: unhandled exception: sym is not accessible [FieldError]\"\n  ([#10058](https://github.com/nim-lang/Nim/issues/10058))\n- Fixed \"with `--errorMax:100` ; link step should not be attempted if previous step failed\"\n  ([#9933](https://github.com/nim-lang/Nim/issues/9933))\n- Fixed \"import os or ospaths compilation error in js\"\n  ([#10066](https://github.com/nim-lang/Nim/issues/10066))\n- Fixed \"Example for system.`$`[T: tuple | object] is misleading\"\n  ([#7898](https://github.com/nim-lang/Nim/issues/7898))\n- Fixed \"Combining object variants and inheritance leads to SIGSEGV during compilation\"\n  ([#10033](https://github.com/nim-lang/Nim/issues/10033))\n- Fixed \"Regression in distros.nim (foreignDep fails to compile)\"\n  ([#10024](https://github.com/nim-lang/Nim/issues/10024))\n- Fixed \"Testament megatest fails with Nim not found\"\n  ([#10049](https://github.com/nim-lang/Nim/issues/10049))\n- Fixed \"XDeclaredButNotUsed shows redundant info: declaration location shown twice\"\n  ([#10101](https://github.com/nim-lang/Nim/issues/10101))\n- Fixed \"Nim beginner's feedback: \"echo type(1)\" does not work\"\n  ([#5827](https://github.com/nim-lang/Nim/issues/5827))\n- Fixed \"`sizeof` still broken with regard to bitsize/packed bitfields\"\n  ([#10082](https://github.com/nim-lang/Nim/issues/10082))\n- Fixed \"Codegen init regression\"\n  ([#10148](https://github.com/nim-lang/Nim/issues/10148))\n- Fixed \"toInt doesn't raise an exception\"\n  ([#2764](https://github.com/nim-lang/Nim/issues/2764))\n- Fixed \"allow `import` inside `block`: makes N runnableExamples run N x faster, minimizes scope pollution\"\n  ([#9300](https://github.com/nim-lang/Nim/issues/9300))\n- Fixed \"Extra procs & docs for the unicode module\"\n  ([#2353](https://github.com/nim-lang/Nim/issues/2353))\n- Fixed \"regression: CI failing `Error: unhandled exception: cannot open: /Users/travis/.cache/nim/docgen_sample_d/runnableExamples/docgen_sample_examples.nim [IOError]`\"\n  ([#10188](https://github.com/nim-lang/Nim/issues/10188))\n- Fixed \"getAddrInfo index out of bounds error\"\n  ([#10198](https://github.com/nim-lang/Nim/issues/10198))\n- Fixed \"can't build a tuple with `static int` element\"\n  ([#10073](https://github.com/nim-lang/Nim/issues/10073))\n- Fixed \"nimpretty creates foo.nim.backup for foo.nims\"\n  ([#10211](https://github.com/nim-lang/Nim/issues/10211))\n- Fixed \"regression caused by WEXITSTATUS: `nim cpp compiler/nim.nim` fails on OSX\"\n  ([#10231](https://github.com/nim-lang/Nim/issues/10231))\n- Fixed \"travis and appveyor should move the bulk of its logic to running a nim file\"\n  ([#10041](https://github.com/nim-lang/Nim/issues/10041))\n- Fixed \"`Error: undeclared field: 'foo'` should show type (+ where type is defined) (hard to guess in generic code)\"\n  ([#8794](https://github.com/nim-lang/Nim/issues/8794))\n- Fixed \"Discrepancy in Documentation About 'f128 Type-Suffix\"\n  ([#10213](https://github.com/nim-lang/Nim/issues/10213))\n- Fixed \"Incorrect error message\"\n  ([#10251](https://github.com/nim-lang/Nim/issues/10251))\n- Fixed \"CI should call `./koch tools` ; right now `nimfind` isn't even being compiled\"\n  ([#10039](https://github.com/nim-lang/Nim/issues/10039))\n- Fixed \"Building koch from nim devel fails when config.nims importing `os` present\"\n  ([#10030](https://github.com/nim-lang/Nim/issues/10030))\n- Fixed \"unittest module uses `programResult` to report number of failures which can wrap\"\n  ([#10261](https://github.com/nim-lang/Nim/issues/10261))\n- Fixed \"Nimscript doesn't raise any exceptions\"\n  ([#10240](https://github.com/nim-lang/Nim/issues/10240))\n- Fixed \"{.push raises: [].} breaks when combined with certain symbols\"\n  ([#10216](https://github.com/nim-lang/Nim/issues/10216))\n- Fixed \"Support \"#.\" for auto-enumerated lists in RST docs\"\n  ([#8158](https://github.com/nim-lang/Nim/issues/8158))\n- Fixed \"`OpenSSL error` breaking nimble and every package\"\n  ([#10281](https://github.com/nim-lang/Nim/issues/10281))\n- Fixed \"execShellCmd returns 0 instead of nonzero when child process exits with signal (eg SIGSEGV)\"\n  ([#10273](https://github.com/nim-lang/Nim/issues/10273))\n- Fixed \"`nim check` (and nim c --errorMax:0) SIGSEGV on first `index out of bounds` error\"\n  ([#10104](https://github.com/nim-lang/Nim/issues/10104))\n- Fixed \"Module `db_sqlite` doesn't finalize statements with db_sqlite.rows after breaking the iterator's loop\"\n  ([#7241](https://github.com/nim-lang/Nim/issues/7241))\n- Fixed \"Performance regression with --gc:markandsweep\"\n  ([#10271](https://github.com/nim-lang/Nim/issues/10271))\n- Fixed \"internal error when using typedesc `is` comparison in a macro\"\n  ([#10136](https://github.com/nim-lang/Nim/issues/10136))\n- Fixed \"cannot call template/macros with varargs[typed] to varargs[untyped]\"\n  ([#10075](https://github.com/nim-lang/Nim/issues/10075))\n- Fixed \"nim v0.13.0 breaks symbol lookup in quote block\"\n  ([#3744](https://github.com/nim-lang/Nim/issues/3744))\n- Fixed \"Some nimgrep issues\"\n  ([#989](https://github.com/nim-lang/Nim/issues/989))\n- Fixed \"Safecall problem?\"\n  ([#9218](https://github.com/nim-lang/Nim/issues/9218))\n- Fixed \"Nim script is not supporting reading from stdin.\"\n  ([#3983](https://github.com/nim-lang/Nim/issues/3983))\n- Fixed \"Parameter constraints: undeclared identifier '{}' within a template scope\"\n  ([#7524](https://github.com/nim-lang/Nim/issues/7524))\n- Fixed \"repr does not work with 'var openarray' parameter in function\"\n  ([#7878](https://github.com/nim-lang/Nim/issues/7878))\n- Fixed \"CountTable raisen error instead of returning a count of 0\"\n  ([#10065](https://github.com/nim-lang/Nim/issues/10065))\n- Fixed \"`nim c -r main.nim foo1 \"\" foo3` doesn't handle empty params or params w quotes\"\n  ([#9842](https://github.com/nim-lang/Nim/issues/9842))\n- Fixed \"refs #10249 ; more debug info to diagnose failures\"\n  ([#10266](https://github.com/nim-lang/Nim/issues/10266))\n- Fixed \"ObjectAssignmentError for aliased types\"\n  ([#10203](https://github.com/nim-lang/Nim/issues/10203))\n- Fixed \"nim cpp treats Nan as 0.0 (during compile time)\"\n  ([#10305](https://github.com/nim-lang/Nim/issues/10305))\n- Fixed \"terminal.nim colored output is not GCSAFE.\"\n  ([#8294](https://github.com/nim-lang/Nim/issues/8294))\n- Fixed \"Building koch from nim devel fails when config.nims importing `os` present\"\n  ([#10030](https://github.com/nim-lang/Nim/issues/10030))\n- Fixed \"every binary cmd line option should allow on/off switch\"\n  ([#9629](https://github.com/nim-lang/Nim/issues/9629))\n\n- Fixed \"Wrong bounds check using template [] to access array in a const object\"\n  ([#3899](https://github.com/nim-lang/Nim/issues/3899))\n- Fixed \"tdont_be_stupid.nim flaky test\"\n  ([#10386](https://github.com/nim-lang/Nim/issues/10386))\n- Fixed \"Separate nim install guide for users and packagers\"\n  ([#5182](https://github.com/nim-lang/Nim/issues/5182))\n- Fixed \"--embedsrc does not work on macos\"\n  ([#10263](https://github.com/nim-lang/Nim/issues/10263))\n- Fixed \"Devel regression on static semcheck\"\n  ([#10339](https://github.com/nim-lang/Nim/issues/10339))\n- Fixed \"vccexe.exe does not work without VS2015 x64 Native Tools command prompt.\"\n  ([#10358](https://github.com/nim-lang/Nim/issues/10358))\n- Fixed \"ospaths still referenced despite its deprecation\"\n  ([#9671](https://github.com/nim-lang/Nim/issues/9671))\n- Fixed \"Regression in sequtils\"\n  ([#10433](https://github.com/nim-lang/Nim/issues/10433))\n- Fixed \"Path in error message has `..\\..\\..\\..\\..\\`  prefix since 0.19.0\"\n  ([#9556](https://github.com/nim-lang/Nim/issues/9556))\n- Fixed \"\"contributing\" is listed as a module on theindex\"\n  ([#10287](https://github.com/nim-lang/Nim/issues/10287))\n- Fixed \"`const Foo=int` compiles; is that legal? what does it mean?\"\n  ([#8610](https://github.com/nim-lang/Nim/issues/8610))\n- Fixed \"parsecsv can't handle empty lines at the beginning of the file\"\n  ([#8365](https://github.com/nim-lang/Nim/issues/8365))\n- Fixed \"Generated c code is not compile with the vcc cl.exe before 2012 after v0.19\"\n  ([#10352](https://github.com/nim-lang/Nim/issues/10352))\n- Fixed \"[Regression] converter to string leads fail to compile  on 0.19\"\n  ([#9149](https://github.com/nim-lang/Nim/issues/9149))\n- Fixed \"regression: memory leak with default GC\"\n  ([#10488](https://github.com/nim-lang/Nim/issues/10488))\n- Fixed \"oids counter starts at zero; spec says it should be random\"\n  ([#2796](https://github.com/nim-lang/Nim/issues/2796))\n- Fixed \"re quantifier`{` under-documented\"\n  ([#9471](https://github.com/nim-lang/Nim/issues/9471))\n- Fixed \"Minor issues in docs regarding keywords\"\n  ([#9725](https://github.com/nim-lang/Nim/issues/9725))\n- Fixed \"Explained the proc \\\"pretty\\\" in detail, file: json.nim with comments and sample program\"\n  ([#10466](https://github.com/nim-lang/Nim/issues/10466))\n- Fixed \"net.recvFrom address is always \"0.0.0.0\" for ipv6\"\n  ([#7634](https://github.com/nim-lang/Nim/issues/7634))\n- Fixed \"import \"path with space/bar.nim\" gives error msg with wrong file name\"\n  ([#10042](https://github.com/nim-lang/Nim/issues/10042))\n- Fixed \"Deprecation warnings for enum values print twice\"\n  ([#8063](https://github.com/nim-lang/Nim/issues/8063))\n- Fixed \"Undefined behaviour in the usage of incrSeqV3\"\n  ([#10568](https://github.com/nim-lang/Nim/issues/10568))\n- Fixed \"SetMaxPoolSize not heeded\"\n  ([#10584](https://github.com/nim-lang/Nim/issues/10584))\n- Fixed \"CI broken: tests/macros/t8997.nim fails\"\n  ([#10591](https://github.com/nim-lang/Nim/issues/10591))\n- Fixed \"prevent common user config to interfere with testament\"\n  ([#10573](https://github.com/nim-lang/Nim/issues/10573))\n- Fixed \"`static: writeFile` doesn't work anymore since `system refactorings`\"\n  ([#10585](https://github.com/nim-lang/Nim/issues/10585))\n- Fixed \"export statement doesn't support directories\"\n  ([#6227](https://github.com/nim-lang/Nim/issues/6227))\n- Fixed \"https://nim-lang.github.io/Nim/io.html gives 404\"\n  ([#10586](https://github.com/nim-lang/Nim/issues/10586))\n- Fixed \"Choosenim fails with \"ambiguous call\" in rst.nim\"\n  ([#10602](https://github.com/nim-lang/Nim/issues/10602))\n- Fixed \"Enable experimental feature with command line argument has no effect.\"\n  ([#10606](https://github.com/nim-lang/Nim/issues/10606))\n- Fixed \"Comparing function pointer with nil marks the proc as not gcsafe\"\n  ([#6955](https://github.com/nim-lang/Nim/issues/6955))\n- Fixed \"httpclient.timeout not exported\"\n  ([#10357](https://github.com/nim-lang/Nim/issues/10357))\n- Fixed \"`nim check SIGSEGV` (causing nimsuggest to fail too)\"\n  ([#10547](https://github.com/nim-lang/Nim/issues/10547))\n- Fixed \"`index out of bounds` errors should show `index` and `bound`\"\n  ([#9880](https://github.com/nim-lang/Nim/issues/9880))\n- Fixed \"Enable experimental feature with command line argument has no effect.\"\n  ([#10606](https://github.com/nim-lang/Nim/issues/10606))\n- Fixed \"Comparing function pointer with nil marks the proc as not gcsafe\"\n  ([#6955](https://github.com/nim-lang/Nim/issues/6955))\n- Fixed \"httpclient.timeout not exported\"\n  ([#10357](https://github.com/nim-lang/Nim/issues/10357))\n- Fixed \"`nim check SIGSEGV` (causing nimsuggest to fail too)\"\n  ([#10547](https://github.com/nim-lang/Nim/issues/10547))\n- Fixed \"certain seq manipulations fail when compiled to JS\"\n  ([#10651](https://github.com/nim-lang/Nim/issues/10651))\n- Fixed \"system.insert does not work with strings in VM\"\n  ([#10561](https://github.com/nim-lang/Nim/issues/10561))\n- Fixed \"Doc suggestion: include a link to theindex.html on ...\"\n  ([#5515](https://github.com/nim-lang/Nim/issues/5515))\n- Fixed \"`koch boot` fails on windows with choosenim-installed nim: proxyexe.nim error\"\n  ([#10659](https://github.com/nim-lang/Nim/issues/10659))\n- Fixed \"getImpl on type symbol hides implementation\"\n  ([#10702](https://github.com/nim-lang/Nim/issues/10702))\n- Fixed \"Missing stdlib modules\"\n  ([#8164](https://github.com/nim-lang/Nim/issues/8164))\n- Fixed \"No \"correct\" way to declare inheritable ref object\"\n  ([#10195](https://github.com/nim-lang/Nim/issues/10195))\n- Fixed \"Line number missing in stdlib trace\"\n  ([#6832](https://github.com/nim-lang/Nim/issues/6832))\n- Fixed \"Better support for modifying XmlNodes\"\n  ([#3797](https://github.com/nim-lang/Nim/issues/3797))\n- Fixed \"No documentation of AsyncStreams\"\n  ([#6383](https://github.com/nim-lang/Nim/issues/6383))\n- Fixed \"`set[` in proc definition crashes compiler\"\n  ([#10678](https://github.com/nim-lang/Nim/issues/10678))\n- Fixed \"net.bindAddr fails binding to all interfaces if `address == \"\"` for ipv6\"\n  ([#7633](https://github.com/nim-lang/Nim/issues/7633))\n- Fixed \"Tuple unpacking of `for` vars fails inside generic proc\"\n  ([#10727](https://github.com/nim-lang/Nim/issues/10727))\n- Fixed \"initSet should be called initHashSet\"\n  ([#10730](https://github.com/nim-lang/Nim/issues/10730))\n- Fixed \"inheritable placement not symmetric between object and ref object\"\n  ([#3012](https://github.com/nim-lang/Nim/issues/3012))\n- Fixed \"Alloc functions have side effects, makes it hard to use side effect tracking with destructors\"\n  ([#9746](https://github.com/nim-lang/Nim/issues/9746))\n- Fixed \"hashes:hash returns different values on Windows/Linux\"\n  ([#10771](https://github.com/nim-lang/Nim/issues/10771))\n- Fixed \"switch(\"cpu\", \"i386\") with --cc:vcc doesn't work when it is written on *.nims\"\n  ([#10387](https://github.com/nim-lang/Nim/issues/10387))\n- Fixed \"async call now treated as non-gc safed call?\"\n  ([#10795](https://github.com/nim-lang/Nim/issues/10795))\n- Fixed \"{.borrow.} hangs compiler on non-distinct type (should produce an error or warning)\"\n  ([#10791](https://github.com/nim-lang/Nim/issues/10791))\n- Fixed \"DCE regression: modules can't be eliminated\"\n  ([#10703](https://github.com/nim-lang/Nim/issues/10703))\n- Fixed \"Unsafeaddr rendered as addr in typed AST \"\n  ([#10807](https://github.com/nim-lang/Nim/issues/10807))\n- Fixed \"Rendering of return statements in typed AST\"\n  ([#10805](https://github.com/nim-lang/Nim/issues/10805))\n- Fixed \"Assigning shallow string to a field makes a copy\"\n  ([#10845](https://github.com/nim-lang/Nim/issues/10845))\n- Fixed \"func keyword for proc types doesn't imply noSideEffect\"\n  ([#10838](https://github.com/nim-lang/Nim/issues/10838))\n- Fixed \"SPAN.attachedType in toc should have no width\"\n  ([#10857](https://github.com/nim-lang/Nim/issues/10857))\n- Fixed \"[docgen] Generic type pragmas in wrong place\"\n  ([#10792](https://github.com/nim-lang/Nim/issues/10792))\n- Fixed \"os.joinPaths documentation is inaccurate; should reference uri.combine\"\n  ([#10836](https://github.com/nim-lang/Nim/issues/10836))\n- Fixed \"\"invalid indentation\" when assigning macro with code block to const\"\n  ([#10861](https://github.com/nim-lang/Nim/issues/10861))\n- Fixed \"Nim crashes with SIGABRT after getting into a replaceTypeVars infinite loop.\"\n  ([#10884](https://github.com/nim-lang/Nim/issues/10884))\n- Fixed \"Booleans Work Wrong in Compile-time\"\n  ([#10886](https://github.com/nim-lang/Nim/issues/10886))\n- Fixed \"C / CPP backends differ in argument evaluation order\"\n  ([#8202](https://github.com/nim-lang/Nim/issues/8202))\n- Fixed \"Change in syntax breaks valid code\"\n  ([#10896](https://github.com/nim-lang/Nim/issues/10896))\n- Fixed \"`auto` return type in macros causes internal error\"\n  ([#10904](https://github.com/nim-lang/Nim/issues/10904))\n- Fixed \"Nim string definition conflicts with other C/C++ instances\"\n  ([#10907](https://github.com/nim-lang/Nim/issues/10907))\n- Fixed \"nim check crash with invalid code, lowest priority\"\n  ([#10930](https://github.com/nim-lang/Nim/issues/10930))\n- Fixed \"nim check crash due to typing error, lowest priority\"\n  ([#10934](https://github.com/nim-lang/Nim/issues/10934))\n- Fixed \"Stacktrace displayed two times\"\n  ([#10922](https://github.com/nim-lang/Nim/issues/10922))\n- Fixed \"Cpp codegen regression. Showstopper\"\n  ([#10948](https://github.com/nim-lang/Nim/issues/10948))\n- Fixed \"`lent T` can return garbage\"\n  ([#10942](https://github.com/nim-lang/Nim/issues/10942))\n- Fixed \"Regression. atomicInc doesn't compile with vcc and i386\"\n  ([#10953](https://github.com/nim-lang/Nim/issues/10953))\n- Fixed \"{.pure.} has no effect on objects\"\n  ([#10721](https://github.com/nim-lang/Nim/issues/10721))\n- Fixed \"nimpretty doesn't put space around operators like `a<b` => `a < b`\"\n  ([#10200](https://github.com/nim-lang/Nim/issues/10200))\n- Fixed \"nimpretty messes alignment, after import statement\"\n  ([#9811](https://github.com/nim-lang/Nim/issues/9811))\n- Fixed \"Destructor regression for tuples unpacking\"\n  ([#10940](https://github.com/nim-lang/Nim/issues/10940))\n- Fixed \"Link error when a module defines a global variable and has no stacktrace\"\n  ([#10943](https://github.com/nim-lang/Nim/issues/10943))\n- Fixed \"std/json fails to escape most non-printables, breaking generation and parsing\"\n  ([#10541](https://github.com/nim-lang/Nim/issues/10541))\n- Fixed \"rst/markdown parser can't handle extra parentheses after link\"\n  ([#10475](https://github.com/nim-lang/Nim/issues/10475))\n- Fixed \"Random: proc rand(x: HSlice) requires substraction\"\n  ([#7698](https://github.com/nim-lang/Nim/issues/7698))\n- Fixed \"Bug in setTerminate()\"\n  ([#10765](https://github.com/nim-lang/Nim/issues/10765))\n- Fixed \"ICE when using --newruntime with proc returning tuple\"\n  ([#11004](https://github.com/nim-lang/Nim/issues/11004))\n- Fixed \"terminal.nim does not compile using --newruntime\"\n  ([#11005](https://github.com/nim-lang/Nim/issues/11005))\n- Fixed \"Casting a seq to another seq generates invalid code with --newruntime\"\n  ([#11018](https://github.com/nim-lang/Nim/issues/11018))\n- Fixed \"strformat/fmt doesn't work for custom types [regression]\"\n  ([#11012](https://github.com/nim-lang/Nim/issues/11012))\n- Fixed \"Casting a seq to another seq generates invalid code with --newruntime\"\n  ([#11018](https://github.com/nim-lang/Nim/issues/11018))\n- Fixed \"newruntime - `t.destructor != nil`  [AssertionError] with `toTable()`\"\n  ([#11014](https://github.com/nim-lang/Nim/issues/11014))\n- Fixed \"templates (e.g. sequtils.toSeq) often shadow `result`\"\n  ([#10732](https://github.com/nim-lang/Nim/issues/10732))\n- Fixed \"newruntime: `Error: system module needs: NimStringDesc` when calling `$` inside method on an object variant\"\n  ([#11048](https://github.com/nim-lang/Nim/issues/11048))\n- Fixed \"newruntime: internal error when iterating over seq (which is a field of an object) inside methods\"\n  ([#11050](https://github.com/nim-lang/Nim/issues/11050))\n- Fixed \"Error: internal error: '=destroy' operator not found for type owned Node\"\n  ([#11053](https://github.com/nim-lang/Nim/issues/11053))\n- Fixed \"`new` output can be assigned to an unowned ref\"\n  ([#11073](https://github.com/nim-lang/Nim/issues/11073))\n- Fixed \"Illegal storage access when adding to a ref seq\"\n  ([#11065](https://github.com/nim-lang/Nim/issues/11065))\n- Fixed \"strformat float printing doesn't print \".0\" portion [regression]\"\n  ([#11089](https://github.com/nim-lang/Nim/issues/11089))\n- Fixed \"nim doc2 ignores --docSeeSrcUrl parameter\"\n  ([#6071](https://github.com/nim-lang/Nim/issues/6071))\n- Fixed \"runnableExamples + forLoop = segfault\"\n  ([#11078](https://github.com/nim-lang/Nim/issues/11078))\n- Fixed \"destructible context without 'result' or 'return' should also be supported\"\n  ([#1192](https://github.com/nim-lang/Nim/issues/1192))\n- Fixed \"`new Obj` crashes at the end of the program on newruntime\"\n  ([#11082](https://github.com/nim-lang/Nim/issues/11082))\n- Fixed \"Documentation of the modules broken out of system.nim are missing \"\n  ([#10972](https://github.com/nim-lang/Nim/issues/10972))\n- Fixed \"DFA regression. Branches of AST trees are missed in control flow graph.\"\n  ([#11095](https://github.com/nim-lang/Nim/issues/11095))\n- Fixed \"[Regression] nkIdentDefs can be left in vmgen\"\n  ([#11111](https://github.com/nim-lang/Nim/issues/11111))\n- Fixed \"JS target does not prevent calling compileTime procs\"\n  ([#11133](https://github.com/nim-lang/Nim/issues/11133))\n- Fixed \"`rand` can return invalid values of a `range` type\"\n  ([#11015](https://github.com/nim-lang/Nim/issues/11015))\n- Fixed \"compiler crash on discard void\"\n  ([#7470](https://github.com/nim-lang/Nim/issues/7470))\n- Fixed \"Unowned ref can trivially escape without causing any crashes\"\n  ([#11114](https://github.com/nim-lang/Nim/issues/11114))\n- Fixed \"Destructor lifting regression\"\n  ([#11149](https://github.com/nim-lang/Nim/issues/11149))\n- Fixed \"`const` alias to compile time function fails.\"\n  ([#11045](https://github.com/nim-lang/Nim/issues/11045))\n- Fixed \"Using type instead of typedesc in template signature fails compilation\"\n  ([#11058](https://github.com/nim-lang/Nim/issues/11058))\n- Fixed \"Compiler error caused by quote do: else\"\n  ([#11175](https://github.com/nim-lang/Nim/issues/11175))\n- Fixed \"cast to non ptr UncheckedArray does not produce an error or warning\"\n  ([#9403](https://github.com/nim-lang/Nim/issues/9403))\n- Fixed \"`openArray` generates incorrect C code with \"incomplete type\"\"\n  ([#9578](https://github.com/nim-lang/Nim/issues/9578))\n- Fixed \"os:standalone Error: system module needs: appendString\"\n  ([#10978](https://github.com/nim-lang/Nim/issues/10978))\n- Fixed \"gensym regression\"\n  ([#10192](https://github.com/nim-lang/Nim/issues/10192))\n- Fixed \"new: module names need to be unique per Nimble broken on Windows\"\n  ([#11196](https://github.com/nim-lang/Nim/issues/11196))\n- Fixed \"Compiler crash on cfsml bindings\"\n  ([#11200](https://github.com/nim-lang/Nim/issues/11200))\n- Fixed \"Newruntime: compileTime variables can cause compilation to fail due to destructor injections\"\n  ([#11204](https://github.com/nim-lang/Nim/issues/11204))\n- Fixed \"object self-assignment order-of-evaluation broken\"\n  ([#9844](https://github.com/nim-lang/Nim/issues/9844))\n- Fixed \"seq self-assignment order-of-evaluation broken\"\n  ([#9684](https://github.com/nim-lang/Nim/issues/9684))\n- Fixed \"Compiler crash with generic types and static generic parameters\"\n  ([#7569](https://github.com/nim-lang/Nim/issues/7569))\n- Fixed \"C macro identifiers (e.g. errno) are not properly avoided in code generation\"\n  ([#11153](https://github.com/nim-lang/Nim/issues/11153))\n- Fixed \"SIGSEGV in asgnRefNoCycle with const sequence\"\n  ([#9825](https://github.com/nim-lang/Nim/issues/9825))\n- Fixed \"asyncdispatch could not be linked to nimrtl\"\n  ([#6855](https://github.com/nim-lang/Nim/issues/6855))\n- Fixed \"Newruntime: Bad C++ codegen for ref types with destructors\"\n  ([#11215](https://github.com/nim-lang/Nim/issues/11215))\n- Fixed \"Better error message for object variant with enum that is below it\"\n  ([#4140](https://github.com/nim-lang/Nim/issues/4140))\n- Fixed \"Can't declare a mixin.\"\n  ([#11237](https://github.com/nim-lang/Nim/issues/11237))\n- Fixed \"Nim doc mangles signed octal literals\"\n  ([#11131](https://github.com/nim-lang/Nim/issues/11131))\n- Fixed \"Selectors, Error: undeclared field: 'OSErrorCode' on macOS\"\n  ([#11124](https://github.com/nim-lang/Nim/issues/11124))\n- Fixed \"`--cppCompileToNamespace:foo` fails compilation with `import os`\"\n  ([#11194](https://github.com/nim-lang/Nim/issues/11194))\n- Fixed \"[OpenMP] Nim symbol interpolation support\"\n  ([#9365](https://github.com/nim-lang/Nim/issues/9365))\n- Fixed \"Inconsistent typing error with gensymed var\"\n  ([#7937](https://github.com/nim-lang/Nim/issues/7937))\n- Fixed \"New module names break file-specific flags\"\n  ([#11202](https://github.com/nim-lang/Nim/issues/11202))\n- Fixed \"inheritance for generics does not work\"\n  ([#88](https://github.com/nim-lang/Nim/issues/88))\n- Fixed \"Possible bug related to generics type resolution/matched\"\n  ([#6732](https://github.com/nim-lang/Nim/issues/6732))\n- Fixed \"static range type bounds not checked when conversion from intLit\"\n  ([#3766](https://github.com/nim-lang/Nim/issues/3766))\n- Fixed \"threadpool: sync() deadlocks in high-CPU-usage scenarios\"\n  ([#11250](https://github.com/nim-lang/Nim/issues/11250))\n- Fixed \"var result array - bad codegen (null pointer dereference)\"\n  ([#8053](https://github.com/nim-lang/Nim/issues/8053))\n- Fixed \"future/sugar `=>` syntax breaks with generics\"\n  ([#7816](https://github.com/nim-lang/Nim/issues/7816))\n- Fixed \"os.joinPath removes the leading backslash from UNC paths (regression)\"\n  ([#10952](https://github.com/nim-lang/Nim/issues/10952))\n- Fixed \"re: memory leak when calling re proc repeatedly\"\n  ([#11139](https://github.com/nim-lang/Nim/issues/11139))\n- Fixed \"threadpool: tests/parallel/tconvexhull.nim segfaults intermittently on systems with more than 4 cores\"\n  ([#11275](https://github.com/nim-lang/Nim/issues/11275))\n- Fixed \"Not equal when streams.readBool and peekBool compare `true`\"\n  ([#11049](https://github.com/nim-lang/Nim/issues/11049))\n- Fixed \"`os.tailDir` fails on some paths\"\n  ([#8395](https://github.com/nim-lang/Nim/issues/8395))\n- Fixed \"Power op ^ is not optimized for a: int; echo a ^ 2 case (minor bug)\"\n  ([#10910](https://github.com/nim-lang/Nim/issues/10910))\n- Fixed \"`str &= data` doesn't behave as `str = str & data`.\"\n  ([#10963](https://github.com/nim-lang/Nim/issues/10963))\n- Fixed \"Unable to make a const instance of an inherited, generic object.\"\n  ([#11268](https://github.com/nim-lang/Nim/issues/11268))\n- Fixed \"Overload precedence for non-builtin types\"\n  ([#11239](https://github.com/nim-lang/Nim/issues/11239))\n- Fixed \"Error when trying to iterate a distinct type based array\"\n  ([#7167](https://github.com/nim-lang/Nim/issues/7167))\n- Fixed \"Objects marked with {.exportc.} should be fully defined in generated header\"\n  ([#4723](https://github.com/nim-lang/Nim/issues/4723))\n- Fixed \"Generic function specialization regression\"\n  ([#6076](https://github.com/nim-lang/Nim/issues/6076))\n- Fixed \"compiler should give ambiguity errors in case of multiple compatible matches\"\n  ([#8568](https://github.com/nim-lang/Nim/issues/8568))\n- Fixed \"`xmltree.findAll` doesn't work as expected with `htmlparser` for non-lowercase names\"\n  ([#8329](https://github.com/nim-lang/Nim/issues/8329))\n- Fixed \"wrong stack trace information about the raised exception\"\n  ([#11309](https://github.com/nim-lang/Nim/issues/11309))\n- Fixed \"Newruntime: owned procs don't implicitly convert to unowned in `==`\"\n  ([#11257](https://github.com/nim-lang/Nim/issues/11257))\n- Fixed \"order of imports can cause errors\"\n  ([#11187](https://github.com/nim-lang/Nim/issues/11187))\n- Fixed \"Passing code via stdin to Nim stopped working [regression Nim 0.19+]\"\n  ([#11294](https://github.com/nim-lang/Nim/issues/11294))\n- Fixed \"\"--out:\" switch is ineffective with \"nim doc\" [regression]\"\n  ([#11312](https://github.com/nim-lang/Nim/issues/11312))\n- Fixed \"VC++ broken in devel: module machine type 'X86' conflicts with target machine type 'x64'\"\n  ([#11306](https://github.com/nim-lang/Nim/issues/11306))\n- Fixed \"Code that used `multi` aspect of multimethod now crashes at runtime\"\n  ([#10912](https://github.com/nim-lang/Nim/issues/10912))\n- Fixed \"symbol resolution issues when ambiguous call happens in generic proc\"\n  ([#11188](https://github.com/nim-lang/Nim/issues/11188))\n- Fixed \"compile pragma name collision\"\n  ([#10299](https://github.com/nim-lang/Nim/issues/10299))\n- Fixed \"Unexpected behaviour on method dispatch\"\n  ([#10038](https://github.com/nim-lang/Nim/issues/10038))\n- Fixed \"Nim object variant issue\"\n  ([#1286](https://github.com/nim-lang/Nim/issues/1286))\n- Fixed \"json.to macro cannot handle ambiguous types even in a full form (module.Type)\"\n  ([#11057](https://github.com/nim-lang/Nim/issues/11057))\n- Fixed \"Out of bounds access in CritBitTree\"\n  ([#11344](https://github.com/nim-lang/Nim/issues/11344))\n- Fixed \"Newruntime: assignment to discriminant field in case objects not supported\"\n  ([#11205](https://github.com/nim-lang/Nim/issues/11205))\n- Fixed \"Dynamic dispatch broken if base method returns generic var type\"\n  ([#6777](https://github.com/nim-lang/Nim/issues/6777))\n- Fixed \"newruntime and unused generics: compiler crash\"\n  ([#6755](https://github.com/nim-lang/Nim/issues/6755))\n- Fixed \"Type aliases do not work with Exceptions.\"\n  ([#10889](https://github.com/nim-lang/Nim/issues/10889))\n- Fixed \"Compiler crash when accessing constant in nested template\"\n  ([#5235](https://github.com/nim-lang/Nim/issues/5235))\n- Fixed \"unicode.nim Error: type mismatch: got <seq[char]> but expected 'string'\"\n  ([#9762](https://github.com/nim-lang/Nim/issues/9762))\n- Fixed \"Internal error with auto return in closure iterator\"\n  ([#5859](https://github.com/nim-lang/Nim/issues/5859))\n- Fixed \"[Compiler Crash] - getAST + hasCustomPragma\"\n  ([#7615](https://github.com/nim-lang/Nim/issues/7615))\n- Fixed \"debug mode compiler crash when executing some compile time code\"\n  ([#8199](https://github.com/nim-lang/Nim/issues/8199))\n- Fixed \"Compiler does not set `.typ` inside macros when creating literal NimNodes\"\n  ([#7792](https://github.com/nim-lang/Nim/issues/7792))\n- Fixed \"Error: internal error: expr: var not init sevColor_994035\"\n  ([#8573](https://github.com/nim-lang/Nim/issues/8573))\n- Fixed \"`internal error: could not find env param for` when one iterator references another\"\n  ([#9827](https://github.com/nim-lang/Nim/issues/9827))\n- Fixed \"internal error when assigning a type to a constant of typedesc\"\n  ([#9961](https://github.com/nim-lang/Nim/issues/9961))\n- Fixed \"Overload resolution regression\"\n  ([#11375](https://github.com/nim-lang/Nim/issues/11375))\n- Fixed \"strutils: toBin(64) uses '/' for the 63rd bit if it's set\"\n  ([#11369](https://github.com/nim-lang/Nim/issues/11369))\n- Fixed \"base64.encode should not \"prettify\" the result by default\"\n  ([#11364](https://github.com/nim-lang/Nim/issues/11364))\n- Fixed \"Nim ships latest nimble rather than stable\"\n  ([#11402](https://github.com/nim-lang/Nim/issues/11402))\n- Fixed \"`debugger:native` no longer generates pdb file with `cc:vcc`\"\n  ([#11405](https://github.com/nim-lang/Nim/issues/11405))\n", "tags": ["nim", "python"], "published_at": "", "id": 61}, {"title": "Version 0.20.2 released", "slug": "version-released", "content": "---\ntitle: \"Version 0.20.2 released\"\nauthor: The Nim Team\ntags: nim, python, markdown\n\n\nThe Nim team is happy to announce version 0.20.2, which is our second\nrelease candidate for version 1.0.\n\nTo read more about version 0.20 and our plans for version 1.0 and beyond,\ncheck the [previous release notes](https://nim-lang.org/blog/2019/06/06/version-0200-released.html).\nThis is mostly a bugfix release of version 0.20.0 (1.0 RC1).\n\nThe only new feature is that `toOpenArray`, our slicing operator,\nis now available for the JavaScript backend.\n\nAlthough this release comes only one month after a previous release,\nit has over 200 new commits, fixing over 70 reported issues and bringing\nlots of improvements which should make Nim even more stable.\n\n\n### Style checks\n\nSince version 0.20.0 we improved our style checker to the point that\nNim now bootstraps with `--styleCheck:error` flag, meaning that the compiler\nand the standard library are now style checked and they won't compile if\ndifferent styles (e.g. `fooBar` and `foo_bar`) are used.\n\nIf you would like to only style check your own nimble package, but not its\ndependencies, you can use `--styleCheck:hint`, making your package consistent\nwhile still retaining perfect interoperability with all other Nim code in the wild.\n\n\n### Nimpretty\n\nOne of the areas which we focused on for this release is our `nimpretty` tool --\nit is a Nim source code beautifier, to format code according to the official\nstyle guide ([NEP-1](https://nim-lang.org/docs/nep1.html)).\nMore than 30 commits were made aiming to improve `nimpretty` experience and\nto make it more robust for real-world scenarios.\nNimpretty version 0.2 ships with Nim, and we invite you to give it a try.\n\n\n### New runtime\n\nThe new runtime is progressing nicely but it is off the critical path for\nversion 1.0 as it's an opt-in feature.\nThe next significant milestone is to make the new runtime work with `async`.\nOnly after this is accomplished we can push for more adoption of it.\n\n\n\n## Installing 0.20.2\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.20.2 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n\n\n## Changes affecting backwards compatibility\n\n- All `strutils.rfind` procs now take `start` and `last` like `strutils.find`\n  with the same data slice/index meaning. This is backwards compatible for\n  calls *not* changing the `rfind` `start` parameter from its default. (#11487)\n\n  In the unlikely case that you were using `rfind X, start=N`, or `rfind X, N`,\n  then you need to change that to `rfind X, last=N` or `rfind X, 0, N`. (This\n  should minimize gotchas porting code from other languages like Python or C++.)\n\n- On Windows stderr/stdout/stdin are not opened as binary files anymore. Use the switch\n  `-d:nimBinaryStdFiles` for a transition period.\n\n### Breaking changes in the standard library\n\n- Mac OS X / BSD: TSa_Family is now the ``uint8`` type, so type\n  conversions like ``x.sin_family = uint16 toInt(nativesockets.AF_INET)``\n  need to be changed into ``x.sin_family = TSa_Family toInt(nativesockets.AF_INET)``.\n\n\n\n## Library additions\n\n- `toOpenArray` is now available for the JS target.\n\n\n## Library changes\n\n- Fix async IO operations stalling even after socket is closed. (#11232)\n\n- More informative error message for `streams.openFileStream`. (#11438)\n\n\n## Compiler changes\n\n- Better error message for IndexError for empty containers. (#11476)\n\n- Fix regression in semfold for old right shift. (#11477)\n\n- Fix for passing tuples as static params to macros. (#11423)\n\n\n## Bugfixes\n\n- Fixed \"nimpretty goes crazy with this snippet\"\n  ([#10295](https://github.com/nim-lang/Nim/issues/10295))\n- Fixed \"nimpretty doesn't trim all whitespace on the right side of an export marker\"\n  ([#10177](https://github.com/nim-lang/Nim/issues/10177))\n- Fixed \"nimpretty gives invalid indentation to array elements\"\n  ([#9505](https://github.com/nim-lang/Nim/issues/9505))\n- Fixed \"nimpretty doesn't indent correctly if preceding line ends with `;`, `{` etc\"\n  ([#10159](https://github.com/nim-lang/Nim/issues/10159))\n- Fixed \"Nimpretty wrong indentation for doc comments\"\n  ([#10156](https://github.com/nim-lang/Nim/issues/10156))\n- Fixed \"HttpClient Documentation needs Proxy example\"\n  ([#11281](https://github.com/nim-lang/Nim/issues/11281))\n- Fixed \"nimpretty aligns comment annoyingly\"\n  ([#9399](https://github.com/nim-lang/Nim/issues/9399))\n- Fixed \"ENDB missing from Docs and TheIndex, remove ENDB from --fullhelp\"\n  ([#11431](https://github.com/nim-lang/Nim/issues/11431))\n- Fixed \"Nimrod on Documentation generator\"\n  ([#11460](https://github.com/nim-lang/Nim/issues/11460))\n- Fixed \"nimpretty (de)indents code where it shouldn't\"\n  ([#11468](https://github.com/nim-lang/Nim/issues/11468))\n- Fixed \"nimpretty adds spaces where it shouldn't\"\n  ([#11470](https://github.com/nim-lang/Nim/issues/11470))\n- Fixed \"nimpretty formats enums differently based on commas\"\n  ([#11467](https://github.com/nim-lang/Nim/issues/11467))\n- Fixed \"strutils.rfind start parameter is unecessarily unusual\"\n  ([#11430](https://github.com/nim-lang/Nim/issues/11430))\n- Fixed \"TinyC is not documented\"\n  ([#11495](https://github.com/nim-lang/Nim/issues/11495))\n- Fixed \"c2nim missing from 0.20.0\"\n  ([#11434](https://github.com/nim-lang/Nim/issues/11434))\n- Fixed \"nimsuggest doesn't work unless compiled with -d:danger\"\n  ([#11482](https://github.com/nim-lang/Nim/issues/11482))\n- Fixed \"random.initRand crashes in Nim 0.20.0 JS backend\"\n  ([#11450](https://github.com/nim-lang/Nim/issues/11450))\n- Fixed \"0.20.0 fails to bootstrap when passing \"--verbosity:2\" (or 3) to koch\"\n  ([#11436](https://github.com/nim-lang/Nim/issues/11436))\n- Fixed \"Destructors lifting doesn't work with inheritance\"\n  ([#11517](https://github.com/nim-lang/Nim/issues/11517))\n- Fixed \"std/sums missing from TheIndex\"\n  ([#11543](https://github.com/nim-lang/Nim/issues/11543))\n- Fixed \"sequtils module: link is broken\"\n  ([#11546](https://github.com/nim-lang/Nim/issues/11546))\n- Fixed \"Case Statement Macros do not work in functions above exported functions.\"\n  ([#11556](https://github.com/nim-lang/Nim/issues/11556))\n- Fixed \"newruntime: internal error when initializing a proc variable\"\n  ([#11533](https://github.com/nim-lang/Nim/issues/11533))\n- Fixed \"newruntime: error when modifying a sequence\"\n  ([#11524](https://github.com/nim-lang/Nim/issues/11524))\n- Fixed \"fmod and other math module functions are missing in js mode\"\n  ([#4630](https://github.com/nim-lang/Nim/issues/4630))\n- Fixed \"Object variants and new runtime\"\n  ([#11563](https://github.com/nim-lang/Nim/issues/11563))\n- Fixed \"newruntime exceptions\"\n  ([#11577](https://github.com/nim-lang/Nim/issues/11577))\n- Fixed \"nimpretty is not aware that the next line is a part of the same context\"\n  ([#11469](https://github.com/nim-lang/Nim/issues/11469))\n- Fixed \"Distinct procs fail to compile\"\n  ([#11600](https://github.com/nim-lang/Nim/issues/11600))\n- Fixed \"[SharedTables] Error: undeclared identifier: 'defaultInitialSize'\"\n  ([#11588](https://github.com/nim-lang/Nim/issues/11588))\n- Fixed \"newSeqOfCap is not working in newruntime\"\n  ([#11098](https://github.com/nim-lang/Nim/issues/11098))\n- Fixed \"nimpretty destroys source with a source code filter\"\n  ([#11532](https://github.com/nim-lang/Nim/issues/11532))\n- Fixed \"Unexpected behaviour when constructing with `result`\"\n  ([#11525](https://github.com/nim-lang/Nim/issues/11525))\n- Fixed \"Regression in 0.20.0: Nested proc using outer scope variable fails to compile\"\n  ([#11523](https://github.com/nim-lang/Nim/issues/11523))\n- Fixed \"os:standalone Error: redefinition of 'nimToCStringConv' \"\n  ([#11445](https://github.com/nim-lang/Nim/issues/11445))\n- Fixed \"No ambiguity error on field overloaded by `field=`\"\n  ([#11514](https://github.com/nim-lang/Nim/issues/11514))\n- Fixed \"object variants and new runtime part 2\"\n  ([#11611](https://github.com/nim-lang/Nim/issues/11611))\n- Fixed \"seq Error: unhandled exception: value out of range: 32772 \"\n  ([#11606](https://github.com/nim-lang/Nim/issues/11606))\n- Fixed \"Compiled binary includes full path to internal nim files\"\n  ([#11572](https://github.com/nim-lang/Nim/issues/11572))\n- Fixed \"Newruntime: top-level string variable is empty after an array assignment\"\n  ([#11614](https://github.com/nim-lang/Nim/issues/11614))\n- Fixed \"Newruntime: raise ObjContructor() doesn't compile\"\n  ([#11628](https://github.com/nim-lang/Nim/issues/11628))\n- Fixed \"Owned ref can be copied and causes double-free\"\n  ([#11617](https://github.com/nim-lang/Nim/issues/11617))\n- Fixed \"When compiling to JS (in `-d:release`) output contains toolchain path on dev's machine\"\n  ([#11545](https://github.com/nim-lang/Nim/issues/11545))\n- Fixed \"wrong unicode string output\"\n  ([#11618](https://github.com/nim-lang/Nim/issues/11618))\n- Fixed \"unittest \"generic instantiation too nested\" error\"\n  ([#11515](https://github.com/nim-lang/Nim/issues/11515))\n- Fixed \"Last read of a var parameter generates sink instead of assignment\"\n  ([#11633](https://github.com/nim-lang/Nim/issues/11633))\n- Fixed \"const table with proc type does not compile anymore\"\n  ([#11479](https://github.com/nim-lang/Nim/issues/11479))\n- Fixed \"Can't use offsetOf on object that ends with an UncheckedArray\"\n  ([#11320](https://github.com/nim-lang/Nim/issues/11320))\n- Fixed \"Newruntime/regression: Bad codegen for inline methods\"\n  ([#11636](https://github.com/nim-lang/Nim/issues/11636))\n- Fixed \"String or sequences inside a loop are not cleared in each iteration\"\n  ([#11510](https://github.com/nim-lang/Nim/issues/11510))\n- Fixed \"Nim -v doesn't acknowledge new danger flag\"\n  ([#11484](https://github.com/nim-lang/Nim/issues/11484))\n- Fixed \"SIGSEGV while compiling when trying to instantiate a case type, that uses an enum with non-zero start\"\n  ([#11585](https://github.com/nim-lang/Nim/issues/11585))\n- Fixed \"Compile-time usage of parts of strutils fails when using -d:useNimRtl\"\n  ([#8405](https://github.com/nim-lang/Nim/issues/8405))\n- Fixed \"regression(0.20): `finally` block executed twice in VM\"\n  ([#11610](https://github.com/nim-lang/Nim/issues/11610))\n- Fixed \"exportc symbol not exported, leading to link error\"\n  ([#11651](https://github.com/nim-lang/Nim/issues/11651))\n- Fixed \"Render bug: opearator priority can be wrong for second argument\"\n  ([#11662](https://github.com/nim-lang/Nim/issues/11662))\n- Fixed \"Nim & C disagree on type size\"\n  ([#6860](https://github.com/nim-lang/Nim/issues/6860))\n- Fixed \"Spawn passes refs across threads\"\n  ([#7057](https://github.com/nim-lang/Nim/issues/7057))\n- Fixed \"BUG: \"varargs[string, `$`]\"  calls `$` n^2 times instead of n times (n=len(varargs))\"\n  ([#8316](https://github.com/nim-lang/Nim/issues/8316))\n- Fixed \"Problem with the same name for module and exported type\"\n  ([#3333](https://github.com/nim-lang/Nim/issues/3333))\n- Fixed \"--gc:go does not work anymore\"\n  ([#11447](https://github.com/nim-lang/Nim/issues/11447))\n- Fixed \"Error: inconsistent typing for reintroduced symbol\"\n  ([#11494](https://github.com/nim-lang/Nim/issues/11494))\n- Fixed \"Auto generated destructors  for tuples/objects fail with \"non-trivial\" error...\"\n  ([#11671](https://github.com/nim-lang/Nim/issues/11671))\n- Fixed \"Regression: parameter default value + typedesc parameter causes compiler crash\"\n  ([#11660](https://github.com/nim-lang/Nim/issues/11660))\n- Fixed \"newruntime: undetected dangling ref\"\n  ([#11350](https://github.com/nim-lang/Nim/issues/11350))\n- Fixed \"Newruntime: setLen() not working on sequences of owned refs\"\n  ([#11530](https://github.com/nim-lang/Nim/issues/11530))\n- Fixed \"Incorrect overflow/underflow error in case statements\"\n  ([#11551](https://github.com/nim-lang/Nim/issues/11551))\n- Fixed \"cgen preprocessor directive placed after struct declaration\"\n  ([#11691](https://github.com/nim-lang/Nim/issues/11691))\n- Fixed \"`continue` in an `except Exception as e` block crashes the compiler.\"\n  ([#11683](https://github.com/nim-lang/Nim/issues/11683))\n- Fixed \"nimsuggest, nim check segfault when using bindSym and doAssert\"\n  ([#10901](https://github.com/nim-lang/Nim/issues/10901))\n- Fixed \"Nimpretty issue, multiline string of x length only causes output grow every time.\"\n  ([#11700](https://github.com/nim-lang/Nim/issues/11700))\n- Fixed \"Array indexed by distinct int doesnt work with iterators\"\n  ([#11715](https://github.com/nim-lang/Nim/issues/11715))\n", "content_with_meta": "---\ntitle: \"Version 0.20.2 released\"\nauthor: The Nim Team\ntags: nim, python, markdown\n\n\nThe Nim team is happy to announce version 0.20.2, which is our second\nrelease candidate for version 1.0.\n\nTo read more about version 0.20 and our plans for version 1.0 and beyond,\ncheck the [previous release notes](https://nim-lang.org/blog/2019/06/06/version-0200-released.html).\nThis is mostly a bugfix release of version 0.20.0 (1.0 RC1).\n\nThe only new feature is that `toOpenArray`, our slicing operator,\nis now available for the JavaScript backend.\n\nAlthough this release comes only one month after a previous release,\nit has over 200 new commits, fixing over 70 reported issues and bringing\nlots of improvements which should make Nim even more stable.\n\n\n### Style checks\n\nSince version 0.20.0 we improved our style checker to the point that\nNim now bootstraps with `--styleCheck:error` flag, meaning that the compiler\nand the standard library are now style checked and they won't compile if\ndifferent styles (e.g. `fooBar` and `foo_bar`) are used.\n\nIf you would like to only style check your own nimble package, but not its\ndependencies, you can use `--styleCheck:hint`, making your package consistent\nwhile still retaining perfect interoperability with all other Nim code in the wild.\n\n\n### Nimpretty\n\nOne of the areas which we focused on for this release is our `nimpretty` tool --\nit is a Nim source code beautifier, to format code according to the official\nstyle guide ([NEP-1](https://nim-lang.org/docs/nep1.html)).\nMore than 30 commits were made aiming to improve `nimpretty` experience and\nto make it more robust for real-world scenarios.\nNimpretty version 0.2 ships with Nim, and we invite you to give it a try.\n\n\n### New runtime\n\nThe new runtime is progressing nicely but it is off the critical path for\nversion 1.0 as it's an opt-in feature.\nThe next significant milestone is to make the new runtime work with `async`.\nOnly after this is accomplished we can push for more adoption of it.\n\n\n\n## Installing 0.20.2\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.20.2 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n\n\n## Changes affecting backwards compatibility\n\n- All `strutils.rfind` procs now take `start` and `last` like `strutils.find`\n  with the same data slice/index meaning. This is backwards compatible for\n  calls *not* changing the `rfind` `start` parameter from its default. (#11487)\n\n  In the unlikely case that you were using `rfind X, start=N`, or `rfind X, N`,\n  then you need to change that to `rfind X, last=N` or `rfind X, 0, N`. (This\n  should minimize gotchas porting code from other languages like Python or C++.)\n\n- On Windows stderr/stdout/stdin are not opened as binary files anymore. Use the switch\n  `-d:nimBinaryStdFiles` for a transition period.\n\n### Breaking changes in the standard library\n\n- Mac OS X / BSD: TSa_Family is now the ``uint8`` type, so type\n  conversions like ``x.sin_family = uint16 toInt(nativesockets.AF_INET)``\n  need to be changed into ``x.sin_family = TSa_Family toInt(nativesockets.AF_INET)``.\n\n\n\n## Library additions\n\n- `toOpenArray` is now available for the JS target.\n\n\n## Library changes\n\n- Fix async IO operations stalling even after socket is closed. (#11232)\n\n- More informative error message for `streams.openFileStream`. (#11438)\n\n\n## Compiler changes\n\n- Better error message for IndexError for empty containers. (#11476)\n\n- Fix regression in semfold for old right shift. (#11477)\n\n- Fix for passing tuples as static params to macros. (#11423)\n\n\n## Bugfixes\n\n- Fixed \"nimpretty goes crazy with this snippet\"\n  ([#10295](https://github.com/nim-lang/Nim/issues/10295))\n- Fixed \"nimpretty doesn't trim all whitespace on the right side of an export marker\"\n  ([#10177](https://github.com/nim-lang/Nim/issues/10177))\n- Fixed \"nimpretty gives invalid indentation to array elements\"\n  ([#9505](https://github.com/nim-lang/Nim/issues/9505))\n- Fixed \"nimpretty doesn't indent correctly if preceding line ends with `;`, `{` etc\"\n  ([#10159](https://github.com/nim-lang/Nim/issues/10159))\n- Fixed \"Nimpretty wrong indentation for doc comments\"\n  ([#10156](https://github.com/nim-lang/Nim/issues/10156))\n- Fixed \"HttpClient Documentation needs Proxy example\"\n  ([#11281](https://github.com/nim-lang/Nim/issues/11281))\n- Fixed \"nimpretty aligns comment annoyingly\"\n  ([#9399](https://github.com/nim-lang/Nim/issues/9399))\n- Fixed \"ENDB missing from Docs and TheIndex, remove ENDB from --fullhelp\"\n  ([#11431](https://github.com/nim-lang/Nim/issues/11431))\n- Fixed \"Nimrod on Documentation generator\"\n  ([#11460](https://github.com/nim-lang/Nim/issues/11460))\n- Fixed \"nimpretty (de)indents code where it shouldn't\"\n  ([#11468](https://github.com/nim-lang/Nim/issues/11468))\n- Fixed \"nimpretty adds spaces where it shouldn't\"\n  ([#11470](https://github.com/nim-lang/Nim/issues/11470))\n- Fixed \"nimpretty formats enums differently based on commas\"\n  ([#11467](https://github.com/nim-lang/Nim/issues/11467))\n- Fixed \"strutils.rfind start parameter is unecessarily unusual\"\n  ([#11430](https://github.com/nim-lang/Nim/issues/11430))\n- Fixed \"TinyC is not documented\"\n  ([#11495](https://github.com/nim-lang/Nim/issues/11495))\n- Fixed \"c2nim missing from 0.20.0\"\n  ([#11434](https://github.com/nim-lang/Nim/issues/11434))\n- Fixed \"nimsuggest doesn't work unless compiled with -d:danger\"\n  ([#11482](https://github.com/nim-lang/Nim/issues/11482))\n- Fixed \"random.initRand crashes in Nim 0.20.0 JS backend\"\n  ([#11450](https://github.com/nim-lang/Nim/issues/11450))\n- Fixed \"0.20.0 fails to bootstrap when passing \"--verbosity:2\" (or 3) to koch\"\n  ([#11436](https://github.com/nim-lang/Nim/issues/11436))\n- Fixed \"Destructors lifting doesn't work with inheritance\"\n  ([#11517](https://github.com/nim-lang/Nim/issues/11517))\n- Fixed \"std/sums missing from TheIndex\"\n  ([#11543](https://github.com/nim-lang/Nim/issues/11543))\n- Fixed \"sequtils module: link is broken\"\n  ([#11546](https://github.com/nim-lang/Nim/issues/11546))\n- Fixed \"Case Statement Macros do not work in functions above exported functions.\"\n  ([#11556](https://github.com/nim-lang/Nim/issues/11556))\n- Fixed \"newruntime: internal error when initializing a proc variable\"\n  ([#11533](https://github.com/nim-lang/Nim/issues/11533))\n- Fixed \"newruntime: error when modifying a sequence\"\n  ([#11524](https://github.com/nim-lang/Nim/issues/11524))\n- Fixed \"fmod and other math module functions are missing in js mode\"\n  ([#4630](https://github.com/nim-lang/Nim/issues/4630))\n- Fixed \"Object variants and new runtime\"\n  ([#11563](https://github.com/nim-lang/Nim/issues/11563))\n- Fixed \"newruntime exceptions\"\n  ([#11577](https://github.com/nim-lang/Nim/issues/11577))\n- Fixed \"nimpretty is not aware that the next line is a part of the same context\"\n  ([#11469](https://github.com/nim-lang/Nim/issues/11469))\n- Fixed \"Distinct procs fail to compile\"\n  ([#11600](https://github.com/nim-lang/Nim/issues/11600))\n- Fixed \"[SharedTables] Error: undeclared identifier: 'defaultInitialSize'\"\n  ([#11588](https://github.com/nim-lang/Nim/issues/11588))\n- Fixed \"newSeqOfCap is not working in newruntime\"\n  ([#11098](https://github.com/nim-lang/Nim/issues/11098))\n- Fixed \"nimpretty destroys source with a source code filter\"\n  ([#11532](https://github.com/nim-lang/Nim/issues/11532))\n- Fixed \"Unexpected behaviour when constructing with `result`\"\n  ([#11525](https://github.com/nim-lang/Nim/issues/11525))\n- Fixed \"Regression in 0.20.0: Nested proc using outer scope variable fails to compile\"\n  ([#11523](https://github.com/nim-lang/Nim/issues/11523))\n- Fixed \"os:standalone Error: redefinition of 'nimToCStringConv' \"\n  ([#11445](https://github.com/nim-lang/Nim/issues/11445))\n- Fixed \"No ambiguity error on field overloaded by `field=`\"\n  ([#11514](https://github.com/nim-lang/Nim/issues/11514))\n- Fixed \"object variants and new runtime part 2\"\n  ([#11611](https://github.com/nim-lang/Nim/issues/11611))\n- Fixed \"seq Error: unhandled exception: value out of range: 32772 \"\n  ([#11606](https://github.com/nim-lang/Nim/issues/11606))\n- Fixed \"Compiled binary includes full path to internal nim files\"\n  ([#11572](https://github.com/nim-lang/Nim/issues/11572))\n- Fixed \"Newruntime: top-level string variable is empty after an array assignment\"\n  ([#11614](https://github.com/nim-lang/Nim/issues/11614))\n- Fixed \"Newruntime: raise ObjContructor() doesn't compile\"\n  ([#11628](https://github.com/nim-lang/Nim/issues/11628))\n- Fixed \"Owned ref can be copied and causes double-free\"\n  ([#11617](https://github.com/nim-lang/Nim/issues/11617))\n- Fixed \"When compiling to JS (in `-d:release`) output contains toolchain path on dev's machine\"\n  ([#11545](https://github.com/nim-lang/Nim/issues/11545))\n- Fixed \"wrong unicode string output\"\n  ([#11618](https://github.com/nim-lang/Nim/issues/11618))\n- Fixed \"unittest \"generic instantiation too nested\" error\"\n  ([#11515](https://github.com/nim-lang/Nim/issues/11515))\n- Fixed \"Last read of a var parameter generates sink instead of assignment\"\n  ([#11633](https://github.com/nim-lang/Nim/issues/11633))\n- Fixed \"const table with proc type does not compile anymore\"\n  ([#11479](https://github.com/nim-lang/Nim/issues/11479))\n- Fixed \"Can't use offsetOf on object that ends with an UncheckedArray\"\n  ([#11320](https://github.com/nim-lang/Nim/issues/11320))\n- Fixed \"Newruntime/regression: Bad codegen for inline methods\"\n  ([#11636](https://github.com/nim-lang/Nim/issues/11636))\n- Fixed \"String or sequences inside a loop are not cleared in each iteration\"\n  ([#11510](https://github.com/nim-lang/Nim/issues/11510))\n- Fixed \"Nim -v doesn't acknowledge new danger flag\"\n  ([#11484](https://github.com/nim-lang/Nim/issues/11484))\n- Fixed \"SIGSEGV while compiling when trying to instantiate a case type, that uses an enum with non-zero start\"\n  ([#11585](https://github.com/nim-lang/Nim/issues/11585))\n- Fixed \"Compile-time usage of parts of strutils fails when using -d:useNimRtl\"\n  ([#8405](https://github.com/nim-lang/Nim/issues/8405))\n- Fixed \"regression(0.20): `finally` block executed twice in VM\"\n  ([#11610](https://github.com/nim-lang/Nim/issues/11610))\n- Fixed \"exportc symbol not exported, leading to link error\"\n  ([#11651](https://github.com/nim-lang/Nim/issues/11651))\n- Fixed \"Render bug: opearator priority can be wrong for second argument\"\n  ([#11662](https://github.com/nim-lang/Nim/issues/11662))\n- Fixed \"Nim & C disagree on type size\"\n  ([#6860](https://github.com/nim-lang/Nim/issues/6860))\n- Fixed \"Spawn passes refs across threads\"\n  ([#7057](https://github.com/nim-lang/Nim/issues/7057))\n- Fixed \"BUG: \"varargs[string, `$`]\"  calls `$` n^2 times instead of n times (n=len(varargs))\"\n  ([#8316](https://github.com/nim-lang/Nim/issues/8316))\n- Fixed \"Problem with the same name for module and exported type\"\n  ([#3333](https://github.com/nim-lang/Nim/issues/3333))\n- Fixed \"--gc:go does not work anymore\"\n  ([#11447](https://github.com/nim-lang/Nim/issues/11447))\n- Fixed \"Error: inconsistent typing for reintroduced symbol\"\n  ([#11494](https://github.com/nim-lang/Nim/issues/11494))\n- Fixed \"Auto generated destructors  for tuples/objects fail with \"non-trivial\" error...\"\n  ([#11671](https://github.com/nim-lang/Nim/issues/11671))\n- Fixed \"Regression: parameter default value + typedesc parameter causes compiler crash\"\n  ([#11660](https://github.com/nim-lang/Nim/issues/11660))\n- Fixed \"newruntime: undetected dangling ref\"\n  ([#11350](https://github.com/nim-lang/Nim/issues/11350))\n- Fixed \"Newruntime: setLen() not working on sequences of owned refs\"\n  ([#11530](https://github.com/nim-lang/Nim/issues/11530))\n- Fixed \"Incorrect overflow/underflow error in case statements\"\n  ([#11551](https://github.com/nim-lang/Nim/issues/11551))\n- Fixed \"cgen preprocessor directive placed after struct declaration\"\n  ([#11691](https://github.com/nim-lang/Nim/issues/11691))\n- Fixed \"`continue` in an `except Exception as e` block crashes the compiler.\"\n  ([#11683](https://github.com/nim-lang/Nim/issues/11683))\n- Fixed \"nimsuggest, nim check segfault when using bindSym and doAssert\"\n  ([#10901](https://github.com/nim-lang/Nim/issues/10901))\n- Fixed \"Nimpretty issue, multiline string of x length only causes output grow every time.\"\n  ([#11700](https://github.com/nim-lang/Nim/issues/11700))\n- Fixed \"Array indexed by distinct int doesnt work with iterators\"\n  ([#11715](https://github.com/nim-lang/Nim/issues/11715))\n", "tags": ["nim", "python", "markdown"], "published_at": "", "id": 62}, {"title": "Version 1.0 released", "slug": "version-released", "content": "Today is the day. The Nim Team is very proudand happy to announce the much-anticipated version 1.0 of the language.Nim has always been focused on providing a compiled statically typed languagefocusing on efficiency, readability and flexibility.Version 1.0 marks the beginning of a stable base whichcan be used in the coming years, knowing that the future versions of Nim won'tbreak the code you have written with the current version.Nim has built a warm and welcoming [community](https://nim-lang.org/community.html)which is ready to help newcomers to the language.If you are one of the new users, check out our[learning resources](https://nim-lang.org/learn.html) and try Nim in[our playground](https://play.nim-lang.org/).This release includes many changes, including bug fixes and somelanguage additions. All changes are documented in the v1.0.0 changelogavailable [here](https://github.com/nim-lang/Nim/blob/devel/changelogs/changelog_1_0_0.md).Included as well is the latest release of Nimble, v0.11.0, the changelog for which is available[here](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0110---22092019).# The stability guaranteeVersion 1.0 is now a long-term supported stable release that will onlyreceive bug fixes and new features in the future, as long as they don'tbreak backwards compatibility.The 1.0.x branch will receive bug fixes for as long as there is demand for them.New features (which do not break backwards compatibility) will continue insteadily advancing 1.x branches.Our goal is to make sure that code which compiled under Nim 1.0 continues tocompile under any stable Nim 1.x version in the future.## What is included under the stability guarantee?Backwards compatibility covers only the stable fragment of the language,as defined by the [manual](https://nim-lang.org/docs/manual.html).The compiler still implements experimental features which are documented in the[\"experimental manual\"](https://nim-lang.org/docs/manual_experimental.html).These features are subject to changes which may be backwards incompatible;some of the features included under this umbrella are concepts,the `do` notation and a few others. There are also modules in the stdlibwhich are still considered unstable - these have been marked with an\"Unstable API\" in their docs.You can use experimental features, even in production, but be aware thatthese are not as fleshed out as we would like them to be.The standard library is also covered, as long as the module in questionis clearly marked with a v1.0 tag in its documentation.## Exceptions to the ruleWe of course have to concede that there are exceptions.In certain serious cases, for example if a security vulnerability isdiscovered in the standard library, we reserve the right to break code whichuses it.# Installing Nim 1.0## New usersCheck out if the package manager of your OS already ships version 1.0 orinstall it as described [here](https://nim-lang.org/install.html).## Existing usersIf you have installed a previous version of Nim using `choosenim`,getting Nim 1.0 is as easy as:```bash$ choosenim update stable```# ContributorsOver the years, more than 500 people contributed to the Nim codebase,implementing new features, fixing bugs and issues, writing documentation, andso on.The Nim team would like to thank all of you who helped us build Nim to becomewhat it is today.We would also want to thank all people who have created Nimble packages,extending what is possible to do with Nim.The number of Nimble packages has been steadily growing, and in August 2019 webroke the 1000 package milestone!We are optimistic that with this release we will see even bigger growth ofnew and exciting packages.If you would like to help Nim grow consider donating via[Open Collective](https://opencollective.com/nim) or [other services](https://nim-lang.org/donate.html).", "content_with_meta": "---\ntitle: \"Version 1.0 released\"\nauthor: The Nim Team\nexcerpt: \"The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.\"\ntags: nim, python, markdown\n---\n\n\nToday is the day. The Nim Team is very proud\nand happy to announce the much-anticipated version 1.0 of the language.\n\nNim has always been focused on providing a compiled statically typed language\nfocusing on efficiency, readability and flexibility.\n\nVersion 1.0 marks the beginning of a stable base which\ncan be used in the coming years, knowing that the future versions of Nim won't\nbreak the code you have written with the current version.\n\nNim has built a warm and welcoming [community](https://nim-lang.org/community.html)\nwhich is ready to help newcomers to the language.\n\nIf you are one of the new users, check out our\n[learning resources](https://nim-lang.org/learn.html) and try Nim in\n[our playground](https://play.nim-lang.org/).\n\nThis release includes many changes, including bug fixes and some\nlanguage additions. All changes are documented in the v1.0.0 changelog\navailable [here](https://github.com/nim-lang/Nim/blob/devel/changelogs/changelog_1_0_0.md).\nIncluded as well is the latest release of Nimble, v0.11.0, the changelog for which is available\n[here](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0110---22092019).\n\n\n# The stability guarantee\n\nVersion 1.0 is now a long-term supported stable release that will only\nreceive bug fixes and new features in the future, as long as they don't\nbreak backwards compatibility.\n\nThe 1.0.x branch will receive bug fixes for as long as there is demand for them.\nNew features (which do not break backwards compatibility) will continue in\nsteadily advancing 1.x branches.\n\nOur goal is to make sure that code which compiled under Nim 1.0 continues to\ncompile under any stable Nim 1.x version in the future.\n\n\n## What is included under the stability guarantee?\n\nBackwards compatibility covers only the stable fragment of the language,\nas defined by the [manual](https://nim-lang.org/docs/manual.html).\n\nThe compiler still implements experimental features which are documented in the\n[\"experimental manual\"](https://nim-lang.org/docs/manual_experimental.html).\nThese features are subject to changes which may be backwards incompatible;\nsome of the features included under this umbrella are concepts,\nthe `do` notation and a few others. There are also modules in the stdlib\nwhich are still considered unstable - these have been marked with an\n\"Unstable API\" in their docs.\n\nYou can use experimental features, even in production, but be aware that\nthese are not as fleshed out as we would like them to be.\n\nThe standard library is also covered, as long as the module in question\nis clearly marked with a v1.0 tag in its documentation.\n\n\n## Exceptions to the rule\n\nWe of course have to concede that there are exceptions.\nIn certain serious cases, for example if a security vulnerability is\ndiscovered in the standard library, we reserve the right to break code which\nuses it.\n\n\n\n# Installing Nim 1.0\n\n## New users\n\nCheck out if the package manager of your OS already ships version 1.0 or\ninstall it as described [here](https://nim-lang.org/install.html).\n\n\n## Existing users\n\nIf you have installed a previous version of Nim using `choosenim`,\ngetting Nim 1.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\n\n\n# Contributors\n\nOver the years, more than 500 people contributed to the Nim codebase,\nimplementing new features, fixing bugs and issues, writing documentation, and\nso on.\nThe Nim team would like to thank all of you who helped us build Nim to become\nwhat it is today.\n\nWe would also want to thank all people who have created Nimble packages,\nextending what is possible to do with Nim.\nThe number of Nimble packages has been steadily growing, and in August 2019 we\nbroke the 1000 package milestone!\nWe are optimistic that with this release we will see even bigger growth of\nnew and exciting packages.\n\nIf you would like to help Nim grow consider donating via\n[Open Collective](https://opencollective.com/nim) or [other services](https://nim-lang.org/donate.html).\n", "tags": ["nim", "python", "markdown"], "published_at": "", "id": 63}]
